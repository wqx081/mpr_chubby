// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: service.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "service.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace mpr {
namespace chubby {

namespace {

const ::google::protobuf::Descriptor* UserInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Entry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Entry_reflection_ = NULL;
const ::google::protobuf::Descriptor* StatInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StatInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* AppendEntriesRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AppendEntriesRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* AppendEntriesResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AppendEntriesResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* VoteRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VoteRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* VoteResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VoteResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* PutRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PutRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* PutResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PutResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* DelRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DelRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* DelResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DelResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* UnLockRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UnLockRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* UnLockResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UnLockResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ShowStatusRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ShowStatusRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ShowStatusResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ShowStatusResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ScanRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ScanRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ScanItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ScanItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* ScanResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ScanResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* LockRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LockRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* LockResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LockResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* KeepAliveRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KeepAliveRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* KeepAliveResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KeepAliveResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoginRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* Status_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Status_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoginResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* LogoutRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogoutRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* LogoutResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogoutResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* RegisterRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RegisterRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* RegisterResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RegisterResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CleanBinlogRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CleanBinlogRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CleanBinlogResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CleanBinlogResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* RpcStatRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RpcStatRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* RpcStatResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RpcStatResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NodeStatus_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* LogOperation_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* StatOperation_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_service_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_service_2eproto() {
  protobuf_AddDesc_service_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "service.proto");
  GOOGLE_CHECK(file != NULL);
  UserInfo_descriptor_ = file->message_type(0);
  static const int UserInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, password_),
  };
  UserInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      UserInfo_descriptor_,
      UserInfo::default_instance_,
      UserInfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(UserInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, _is_default_instance_));
  Entry_descriptor_ = file->message_type(1);
  static const int Entry_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Entry, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Entry, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Entry, term_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Entry, op_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Entry, user_),
  };
  Entry_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Entry_descriptor_,
      Entry::default_instance_,
      Entry_offsets_,
      -1,
      -1,
      -1,
      sizeof(Entry),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Entry, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Entry, _is_default_instance_));
  StatInfo_descriptor_ = file->message_type(2);
  static const int StatInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatInfo, current_stat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatInfo, average_stat_),
  };
  StatInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      StatInfo_descriptor_,
      StatInfo::default_instance_,
      StatInfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(StatInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatInfo, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatInfo, _is_default_instance_));
  AppendEntriesRequest_descriptor_ = file->message_type(3);
  static const int AppendEntriesRequest_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppendEntriesRequest, term_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppendEntriesRequest, leader_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppendEntriesRequest, prev_log_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppendEntriesRequest, prev_log_term_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppendEntriesRequest, leader_commit_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppendEntriesRequest, entries_),
  };
  AppendEntriesRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AppendEntriesRequest_descriptor_,
      AppendEntriesRequest::default_instance_,
      AppendEntriesRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(AppendEntriesRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppendEntriesRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppendEntriesRequest, _is_default_instance_));
  AppendEntriesResponse_descriptor_ = file->message_type(4);
  static const int AppendEntriesResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppendEntriesResponse, current_term_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppendEntriesResponse, success_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppendEntriesResponse, log_length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppendEntriesResponse, is_busy_),
  };
  AppendEntriesResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AppendEntriesResponse_descriptor_,
      AppendEntriesResponse::default_instance_,
      AppendEntriesResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(AppendEntriesResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppendEntriesResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppendEntriesResponse, _is_default_instance_));
  VoteRequest_descriptor_ = file->message_type(5);
  static const int VoteRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoteRequest, term_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoteRequest, candidate_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoteRequest, last_log_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoteRequest, last_log_term_),
  };
  VoteRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      VoteRequest_descriptor_,
      VoteRequest::default_instance_,
      VoteRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(VoteRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoteRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoteRequest, _is_default_instance_));
  VoteResponse_descriptor_ = file->message_type(6);
  static const int VoteResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoteResponse, term_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoteResponse, vote_granted_),
  };
  VoteResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      VoteResponse_descriptor_,
      VoteResponse::default_instance_,
      VoteResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(VoteResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoteResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoteResponse, _is_default_instance_));
  PutRequest_descriptor_ = file->message_type(7);
  static const int PutRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutRequest, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutRequest, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutRequest, uuid_),
  };
  PutRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PutRequest_descriptor_,
      PutRequest::default_instance_,
      PutRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(PutRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutRequest, _is_default_instance_));
  PutResponse_descriptor_ = file->message_type(8);
  static const int PutResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutResponse, success_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutResponse, leader_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutResponse, uuid_expired_),
  };
  PutResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PutResponse_descriptor_,
      PutResponse::default_instance_,
      PutResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(PutResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutResponse, _is_default_instance_));
  GetRequest_descriptor_ = file->message_type(9);
  static const int GetRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRequest, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRequest, uuid_),
  };
  GetRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GetRequest_descriptor_,
      GetRequest::default_instance_,
      GetRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(GetRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRequest, _is_default_instance_));
  GetResponse_descriptor_ = file->message_type(10);
  static const int GetResponse_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetResponse, hit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetResponse, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetResponse, leader_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetResponse, success_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetResponse, uuid_expired_),
  };
  GetResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GetResponse_descriptor_,
      GetResponse::default_instance_,
      GetResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(GetResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetResponse, _is_default_instance_));
  DelRequest_descriptor_ = file->message_type(11);
  static const int DelRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelRequest, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelRequest, uuid_),
  };
  DelRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DelRequest_descriptor_,
      DelRequest::default_instance_,
      DelRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(DelRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelRequest, _is_default_instance_));
  DelResponse_descriptor_ = file->message_type(12);
  static const int DelResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelResponse, success_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelResponse, leader_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelResponse, uuid_expired_),
  };
  DelResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DelResponse_descriptor_,
      DelResponse::default_instance_,
      DelResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(DelResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelResponse, _is_default_instance_));
  UnLockRequest_descriptor_ = file->message_type(13);
  static const int UnLockRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnLockRequest, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnLockRequest, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnLockRequest, uuid_),
  };
  UnLockRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      UnLockRequest_descriptor_,
      UnLockRequest::default_instance_,
      UnLockRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(UnLockRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnLockRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnLockRequest, _is_default_instance_));
  UnLockResponse_descriptor_ = file->message_type(14);
  static const int UnLockResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnLockResponse, success_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnLockResponse, leader_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnLockResponse, uuid_expired_),
  };
  UnLockResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      UnLockResponse_descriptor_,
      UnLockResponse::default_instance_,
      UnLockResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(UnLockResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnLockResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnLockResponse, _is_default_instance_));
  ShowStatusRequest_descriptor_ = file->message_type(15);
  static const int ShowStatusRequest_offsets_[1] = {
  };
  ShowStatusRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ShowStatusRequest_descriptor_,
      ShowStatusRequest::default_instance_,
      ShowStatusRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(ShowStatusRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShowStatusRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShowStatusRequest, _is_default_instance_));
  ShowStatusResponse_descriptor_ = file->message_type(16);
  static const int ShowStatusResponse_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShowStatusResponse, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShowStatusResponse, term_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShowStatusResponse, last_log_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShowStatusResponse, last_log_term_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShowStatusResponse, commit_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShowStatusResponse, last_applied_),
  };
  ShowStatusResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ShowStatusResponse_descriptor_,
      ShowStatusResponse::default_instance_,
      ShowStatusResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(ShowStatusResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShowStatusResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShowStatusResponse, _is_default_instance_));
  ScanRequest_descriptor_ = file->message_type(17);
  static const int ScanRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanRequest, start_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanRequest, end_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanRequest, size_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanRequest, uuid_),
  };
  ScanRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ScanRequest_descriptor_,
      ScanRequest::default_instance_,
      ScanRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(ScanRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanRequest, _is_default_instance_));
  ScanItem_descriptor_ = file->message_type(18);
  static const int ScanItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanItem, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanItem, value_),
  };
  ScanItem_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ScanItem_descriptor_,
      ScanItem::default_instance_,
      ScanItem_offsets_,
      -1,
      -1,
      -1,
      sizeof(ScanItem),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanItem, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanItem, _is_default_instance_));
  ScanResponse_descriptor_ = file->message_type(19);
  static const int ScanResponse_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanResponse, has_more_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanResponse, items_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanResponse, leader_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanResponse, success_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanResponse, uuid_expired_),
  };
  ScanResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ScanResponse_descriptor_,
      ScanResponse::default_instance_,
      ScanResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(ScanResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanResponse, _is_default_instance_));
  LockRequest_descriptor_ = file->message_type(20);
  static const int LockRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LockRequest, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LockRequest, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LockRequest, hostname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LockRequest, uuid_),
  };
  LockRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LockRequest_descriptor_,
      LockRequest::default_instance_,
      LockRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(LockRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LockRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LockRequest, _is_default_instance_));
  LockResponse_descriptor_ = file->message_type(21);
  static const int LockResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LockResponse, success_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LockResponse, leader_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LockResponse, uuid_expired_),
  };
  LockResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LockResponse_descriptor_,
      LockResponse::default_instance_,
      LockResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(LockResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LockResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LockResponse, _is_default_instance_));
  KeepAliveRequest_descriptor_ = file->message_type(22);
  static const int KeepAliveRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeepAliveRequest, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeepAliveRequest, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeepAliveRequest, locks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeepAliveRequest, forward_from_leader_),
  };
  KeepAliveRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      KeepAliveRequest_descriptor_,
      KeepAliveRequest::default_instance_,
      KeepAliveRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(KeepAliveRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeepAliveRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeepAliveRequest, _is_default_instance_));
  KeepAliveResponse_descriptor_ = file->message_type(23);
  static const int KeepAliveResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeepAliveResponse, success_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeepAliveResponse, leader_id_),
  };
  KeepAliveResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      KeepAliveResponse_descriptor_,
      KeepAliveResponse::default_instance_,
      KeepAliveResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(KeepAliveResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeepAliveResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeepAliveResponse, _is_default_instance_));
  LoginRequest_descriptor_ = file->message_type(24);
  static const int LoginRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest, passwd_),
  };
  LoginRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LoginRequest_descriptor_,
      LoginRequest::default_instance_,
      LoginRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(LoginRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest, _is_default_instance_));
  Status_descriptor_ = file->message_type(25);
  static const int Status_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Status, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Status, message_),
  };
  Status_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Status_descriptor_,
      Status::default_instance_,
      Status_offsets_,
      -1,
      -1,
      -1,
      sizeof(Status),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Status, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Status, _is_default_instance_));
  LoginResponse_descriptor_ = file->message_type(26);
  static const int LoginResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResponse, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResponse, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResponse, leader_id_),
  };
  LoginResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LoginResponse_descriptor_,
      LoginResponse::default_instance_,
      LoginResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(LoginResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResponse, _is_default_instance_));
  LogoutRequest_descriptor_ = file->message_type(27);
  static const int LogoutRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogoutRequest, uuid_),
  };
  LogoutRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LogoutRequest_descriptor_,
      LogoutRequest::default_instance_,
      LogoutRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(LogoutRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogoutRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogoutRequest, _is_default_instance_));
  LogoutResponse_descriptor_ = file->message_type(28);
  static const int LogoutResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogoutResponse, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogoutResponse, leader_id_),
  };
  LogoutResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LogoutResponse_descriptor_,
      LogoutResponse::default_instance_,
      LogoutResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(LogoutResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogoutResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogoutResponse, _is_default_instance_));
  RegisterRequest_descriptor_ = file->message_type(29);
  static const int RegisterRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterRequest, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterRequest, passwd_),
  };
  RegisterRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RegisterRequest_descriptor_,
      RegisterRequest::default_instance_,
      RegisterRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(RegisterRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterRequest, _is_default_instance_));
  RegisterResponse_descriptor_ = file->message_type(30);
  static const int RegisterResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterResponse, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterResponse, leader_id_),
  };
  RegisterResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RegisterResponse_descriptor_,
      RegisterResponse::default_instance_,
      RegisterResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(RegisterResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterResponse, _is_default_instance_));
  CleanBinlogRequest_descriptor_ = file->message_type(31);
  static const int CleanBinlogRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CleanBinlogRequest, end_index_),
  };
  CleanBinlogRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CleanBinlogRequest_descriptor_,
      CleanBinlogRequest::default_instance_,
      CleanBinlogRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(CleanBinlogRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CleanBinlogRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CleanBinlogRequest, _is_default_instance_));
  CleanBinlogResponse_descriptor_ = file->message_type(32);
  static const int CleanBinlogResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CleanBinlogResponse, success_),
  };
  CleanBinlogResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CleanBinlogResponse_descriptor_,
      CleanBinlogResponse::default_instance_,
      CleanBinlogResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(CleanBinlogResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CleanBinlogResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CleanBinlogResponse, _is_default_instance_));
  RpcStatRequest_descriptor_ = file->message_type(33);
  static const int RpcStatRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcStatRequest, op_),
  };
  RpcStatRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RpcStatRequest_descriptor_,
      RpcStatRequest::default_instance_,
      RpcStatRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(RpcStatRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcStatRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcStatRequest, _is_default_instance_));
  RpcStatResponse_descriptor_ = file->message_type(34);
  static const int RpcStatResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcStatResponse, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcStatResponse, stats_),
  };
  RpcStatResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RpcStatResponse_descriptor_,
      RpcStatResponse::default_instance_,
      RpcStatResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(RpcStatResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcStatResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcStatResponse, _is_default_instance_));
  NodeStatus_descriptor_ = file->enum_type(0);
  LogOperation_descriptor_ = file->enum_type(1);
  StatOperation_descriptor_ = file->enum_type(2);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_service_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      UserInfo_descriptor_, &UserInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Entry_descriptor_, &Entry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      StatInfo_descriptor_, &StatInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AppendEntriesRequest_descriptor_, &AppendEntriesRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AppendEntriesResponse_descriptor_, &AppendEntriesResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      VoteRequest_descriptor_, &VoteRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      VoteResponse_descriptor_, &VoteResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PutRequest_descriptor_, &PutRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PutResponse_descriptor_, &PutResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GetRequest_descriptor_, &GetRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GetResponse_descriptor_, &GetResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DelRequest_descriptor_, &DelRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DelResponse_descriptor_, &DelResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      UnLockRequest_descriptor_, &UnLockRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      UnLockResponse_descriptor_, &UnLockResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ShowStatusRequest_descriptor_, &ShowStatusRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ShowStatusResponse_descriptor_, &ShowStatusResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ScanRequest_descriptor_, &ScanRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ScanItem_descriptor_, &ScanItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ScanResponse_descriptor_, &ScanResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LockRequest_descriptor_, &LockRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LockResponse_descriptor_, &LockResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      KeepAliveRequest_descriptor_, &KeepAliveRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      KeepAliveResponse_descriptor_, &KeepAliveResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LoginRequest_descriptor_, &LoginRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Status_descriptor_, &Status::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LoginResponse_descriptor_, &LoginResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LogoutRequest_descriptor_, &LogoutRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LogoutResponse_descriptor_, &LogoutResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RegisterRequest_descriptor_, &RegisterRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RegisterResponse_descriptor_, &RegisterResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CleanBinlogRequest_descriptor_, &CleanBinlogRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CleanBinlogResponse_descriptor_, &CleanBinlogResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RpcStatRequest_descriptor_, &RpcStatRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RpcStatResponse_descriptor_, &RpcStatResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_service_2eproto() {
  delete UserInfo::default_instance_;
  delete UserInfo_reflection_;
  delete Entry::default_instance_;
  delete Entry_reflection_;
  delete StatInfo::default_instance_;
  delete StatInfo_reflection_;
  delete AppendEntriesRequest::default_instance_;
  delete AppendEntriesRequest_reflection_;
  delete AppendEntriesResponse::default_instance_;
  delete AppendEntriesResponse_reflection_;
  delete VoteRequest::default_instance_;
  delete VoteRequest_reflection_;
  delete VoteResponse::default_instance_;
  delete VoteResponse_reflection_;
  delete PutRequest::default_instance_;
  delete PutRequest_reflection_;
  delete PutResponse::default_instance_;
  delete PutResponse_reflection_;
  delete GetRequest::default_instance_;
  delete GetRequest_reflection_;
  delete GetResponse::default_instance_;
  delete GetResponse_reflection_;
  delete DelRequest::default_instance_;
  delete DelRequest_reflection_;
  delete DelResponse::default_instance_;
  delete DelResponse_reflection_;
  delete UnLockRequest::default_instance_;
  delete UnLockRequest_reflection_;
  delete UnLockResponse::default_instance_;
  delete UnLockResponse_reflection_;
  delete ShowStatusRequest::default_instance_;
  delete ShowStatusRequest_reflection_;
  delete ShowStatusResponse::default_instance_;
  delete ShowStatusResponse_reflection_;
  delete ScanRequest::default_instance_;
  delete ScanRequest_reflection_;
  delete ScanItem::default_instance_;
  delete ScanItem_reflection_;
  delete ScanResponse::default_instance_;
  delete ScanResponse_reflection_;
  delete LockRequest::default_instance_;
  delete LockRequest_reflection_;
  delete LockResponse::default_instance_;
  delete LockResponse_reflection_;
  delete KeepAliveRequest::default_instance_;
  delete KeepAliveRequest_reflection_;
  delete KeepAliveResponse::default_instance_;
  delete KeepAliveResponse_reflection_;
  delete LoginRequest::default_instance_;
  delete LoginRequest_reflection_;
  delete Status::default_instance_;
  delete Status_reflection_;
  delete LoginResponse::default_instance_;
  delete LoginResponse_reflection_;
  delete LogoutRequest::default_instance_;
  delete LogoutRequest_reflection_;
  delete LogoutResponse::default_instance_;
  delete LogoutResponse_reflection_;
  delete RegisterRequest::default_instance_;
  delete RegisterRequest_reflection_;
  delete RegisterResponse::default_instance_;
  delete RegisterResponse_reflection_;
  delete CleanBinlogRequest::default_instance_;
  delete CleanBinlogRequest_reflection_;
  delete CleanBinlogResponse::default_instance_;
  delete CleanBinlogResponse_reflection_;
  delete RpcStatRequest::default_instance_;
  delete RpcStatRequest_reflection_;
  delete RpcStatResponse::default_instance_;
  delete RpcStatResponse_reflection_;
}

void protobuf_AddDesc_service_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_service_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rservice.proto\022\nmpr.chubby\".\n\010UserInfo\022"
    "\020\n\010username\030\001 \001(\t\022\020\n\010password\030\002 \001(\t\"e\n\005E"
    "ntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\014\022\014\n\004term"
    "\030\003 \001(\003\022$\n\002op\030\004 \001(\0162\030.mpr.chubby.LogOpera"
    "tion\022\014\n\004user\030\005 \001(\t\"6\n\010StatInfo\022\024\n\014curren"
    "t_stat\030\001 \001(\003\022\024\n\014average_stat\030\002 \001(\003\"\247\001\n\024A"
    "ppendEntriesRequest\022\014\n\004term\030\001 \001(\003\022\021\n\tlea"
    "der_id\030\002 \001(\t\022\026\n\016prev_log_index\030\003 \001(\003\022\025\n\r"
    "prev_log_term\030\004 \001(\003\022\033\n\023leader_commit_ind"
    "ex\030\005 \001(\003\022\"\n\007entries\030\006 \003(\0132\021.mpr.chubby.E"
    "ntry\"c\n\025AppendEntriesResponse\022\024\n\014current"
    "_term\030\001 \001(\003\022\017\n\007success\030\002 \001(\010\022\022\n\nlog_leng"
    "th\030\003 \001(\003\022\017\n\007is_busy\030\004 \001(\010\"`\n\013VoteRequest"
    "\022\014\n\004term\030\001 \001(\003\022\024\n\014candidate_id\030\002 \001(\t\022\026\n\016"
    "last_log_index\030\003 \001(\003\022\025\n\rlast_log_term\030\004 "
    "\001(\003\"2\n\014VoteResponse\022\014\n\004term\030\001 \001(\003\022\024\n\014vot"
    "e_granted\030\002 \001(\010\"6\n\nPutRequest\022\013\n\003key\030\001 \001"
    "(\t\022\r\n\005value\030\002 \001(\014\022\014\n\004uuid\030\003 \001(\t\"G\n\013PutRe"
    "sponse\022\017\n\007success\030\001 \001(\010\022\021\n\tleader_id\030\002 \001"
    "(\t\022\024\n\014uuid_expired\030\003 \001(\010\"\'\n\nGetRequest\022\013"
    "\n\003key\030\001 \001(\t\022\014\n\004uuid\030\002 \001(\t\"c\n\013GetResponse"
    "\022\013\n\003hit\030\001 \001(\010\022\r\n\005value\030\002 \001(\014\022\021\n\tleader_i"
    "d\030\003 \001(\t\022\017\n\007success\030\004 \001(\010\022\024\n\014uuid_expired"
    "\030\005 \001(\010\"\'\n\nDelRequest\022\013\n\003key\030\001 \001(\t\022\014\n\004uui"
    "d\030\002 \001(\t\"G\n\013DelResponse\022\017\n\007success\030\001 \001(\010\022"
    "\021\n\tleader_id\030\002 \001(\t\022\024\n\014uuid_expired\030\003 \001(\010"
    "\">\n\rUnLockRequest\022\013\n\003key\030\001 \001(\t\022\022\n\nsessio"
    "n_id\030\002 \001(\t\022\014\n\004uuid\030\003 \001(\t\"J\n\016UnLockRespon"
    "se\022\017\n\007success\030\001 \001(\010\022\021\n\tleader_id\030\002 \001(\t\022\024"
    "\n\014uuid_expired\030\003 \001(\010\"\023\n\021ShowStatusReques"
    "t\"\245\001\n\022ShowStatusResponse\022&\n\006status\030\001 \001(\016"
    "2\026.mpr.chubby.NodeStatus\022\014\n\004term\030\002 \001(\003\022\026"
    "\n\016last_log_index\030\003 \001(\003\022\025\n\rlast_log_term\030"
    "\004 \001(\003\022\024\n\014commit_index\030\005 \001(\003\022\024\n\014last_appl"
    "ied\030\006 \001(\003\"S\n\013ScanRequest\022\021\n\tstart_key\030\001 "
    "\001(\t\022\017\n\007end_key\030\002 \001(\014\022\022\n\nsize_limit\030\003 \001(\005"
    "\022\014\n\004uuid\030\004 \001(\t\"&\n\010ScanItem\022\013\n\003key\030\001 \001(\t\022"
    "\r\n\005value\030\002 \001(\014\"\177\n\014ScanResponse\022\020\n\010has_mo"
    "re\030\001 \001(\010\022#\n\005items\030\002 \003(\0132\024.mpr.chubby.Sca"
    "nItem\022\021\n\tleader_id\030\003 \001(\t\022\017\n\007success\030\004 \001("
    "\010\022\024\n\014uuid_expired\030\005 \001(\010\"N\n\013LockRequest\022\013"
    "\n\003key\030\001 \001(\t\022\022\n\nsession_id\030\002 \001(\t\022\020\n\010hostn"
    "ame\030\003 \001(\t\022\014\n\004uuid\030\004 \001(\t\"H\n\014LockResponse\022"
    "\017\n\007success\030\001 \001(\010\022\021\n\tleader_id\030\002 \001(\t\022\024\n\014u"
    "uid_expired\030\003 \001(\010\"`\n\020KeepAliveRequest\022\022\n"
    "\nsession_id\030\001 \001(\t\022\014\n\004uuid\030\002 \001(\t\022\r\n\005locks"
    "\030\003 \003(\t\022\033\n\023forward_from_leader\030\004 \001(\010\"7\n\021K"
    "eepAliveResponse\022\017\n\007success\030\001 \001(\010\022\021\n\tlea"
    "der_id\030\002 \001(\t\"0\n\014LoginRequest\022\020\n\010username"
    "\030\001 \001(\t\022\016\n\006passwd\030\002 \001(\t\"\'\n\006Status\022\014\n\004code"
    "\030\001 \001(\003\022\017\n\007message\030\002 \001(\t\"T\n\rLoginResponse"
    "\022\"\n\006status\030\001 \001(\0132\022.mpr.chubby.Status\022\014\n\004"
    "uuid\030\002 \001(\t\022\021\n\tleader_id\030\003 \001(\t\"\035\n\rLogoutR"
    "equest\022\014\n\004uuid\030\001 \001(\t\"G\n\016LogoutResponse\022\""
    "\n\006status\030\001 \001(\0132\022.mpr.chubby.Status\022\021\n\tle"
    "ader_id\030\002 \001(\t\"3\n\017RegisterRequest\022\020\n\010user"
    "name\030\001 \001(\t\022\016\n\006passwd\030\002 \001(\t\"I\n\020RegisterRe"
    "sponse\022\"\n\006status\030\001 \001(\0132\022.mpr.chubby.Stat"
    "us\022\021\n\tleader_id\030\002 \001(\t\"\'\n\022CleanBinlogRequ"
    "est\022\021\n\tend_index\030\001 \001(\003\"&\n\023CleanBinlogRes"
    "ponse\022\017\n\007success\030\001 \001(\010\"7\n\016RpcStatRequest"
    "\022%\n\002op\030\001 \003(\0162\031.mpr.chubby.StatOperation\""
    "^\n\017RpcStatResponse\022&\n\006status\030\001 \001(\0162\026.mpr"
    ".chubby.NodeStatus\022#\n\005stats\030\002 \003(\0132\024.mpr."
    "chubby.StatInfo*E\n\nNodeStatus\022\013\n\007kLeader"
    "\020\000\022\r\n\tkCandiate\020\001\022\r\n\tkFollower\020\002\022\014\n\010kOff"
    "line\020\003*\206\001\n\014LogOperation\022\030\n\024kLogOperation"
    "Unknown\020\000\022\010\n\004kPut\020\001\022\010\n\004kDel\020\002\022\t\n\005kLock\020\003"
    "\022\013\n\007kUnLock\020\004\022\n\n\006kLogin\020\005\022\013\n\007kLogout\020\006\022\r"
    "\n\tkRegister\020\007\022\010\n\004kNop\020\n*\214\001\n\rStatOperatio"
    "n\022\031\n\025kStatOperationUnknown\020\000\022\n\n\006kPutOp\020\001"
    "\022\n\n\006kGetOp\020\002\022\r\n\tkDeleteOp\020\003\022\013\n\007kScanOp\020\004"
    "\022\020\n\014kKeepAliveOp\020\005\022\013\n\007kLockOp\020\006\022\r\n\tkUnlo"
    "ckOp\020\0072\360\007\n\nChubbyNode\022T\n\rAppendEntries\022 "
    ".mpr.chubby.AppendEntriesRequest\032!.mpr.c"
    "hubby.AppendEntriesResponse\0229\n\004Vote\022\027.mp"
    "r.chubby.VoteRequest\032\030.mpr.chubby.VoteRe"
    "sponse\0226\n\003Put\022\026.mpr.chubby.PutRequest\032\027."
    "mpr.chubby.PutResponse\0226\n\003Get\022\026.mpr.chub"
    "by.GetRequest\032\027.mpr.chubby.GetResponse\0229"
    "\n\006Delete\022\026.mpr.chubby.DelRequest\032\027.mpr.c"
    "hubby.DelResponse\0229\n\004Scan\022\027.mpr.chubby.S"
    "canRequest\032\030.mpr.chubby.ScanResponse\0229\n\004"
    "Lock\022\027.mpr.chubby.LockRequest\032\030.mpr.chub"
    "by.LockResponse\022\?\n\006UnLock\022\031.mpr.chubby.U"
    "nLockRequest\032\032.mpr.chubby.UnLockResponse"
    "\022<\n\005Login\022\030.mpr.chubby.LoginRequest\032\031.mp"
    "r.chubby.LoginResponse\022\?\n\006Logout\022\031.mpr.c"
    "hubby.LogoutRequest\032\032.mpr.chubby.LogoutR"
    "esponse\022E\n\010Register\022\033.mpr.chubby.Registe"
    "rRequest\032\034.mpr.chubby.RegisterResponse\022H"
    "\n\tKeepAlive\022\034.mpr.chubby.KeepAliveReques"
    "t\032\035.mpr.chubby.KeepAliveResponse\022K\n\nShow"
    "Status\022\035.mpr.chubby.ShowStatusRequest\032\036."
    "mpr.chubby.ShowStatusResponse\022N\n\013CleanBi"
    "nlog\022\036.mpr.chubby.CleanBinlogRequest\032\037.m"
    "pr.chubby.CleanBinlogResponse\022B\n\007RpcStat"
    "\022\032.mpr.chubby.RpcStatRequest\032\033.mpr.chubb"
    "y.RpcStatResponseb\006proto3", 3945);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "service.proto", &protobuf_RegisterTypes);
  UserInfo::default_instance_ = new UserInfo();
  Entry::default_instance_ = new Entry();
  StatInfo::default_instance_ = new StatInfo();
  AppendEntriesRequest::default_instance_ = new AppendEntriesRequest();
  AppendEntriesResponse::default_instance_ = new AppendEntriesResponse();
  VoteRequest::default_instance_ = new VoteRequest();
  VoteResponse::default_instance_ = new VoteResponse();
  PutRequest::default_instance_ = new PutRequest();
  PutResponse::default_instance_ = new PutResponse();
  GetRequest::default_instance_ = new GetRequest();
  GetResponse::default_instance_ = new GetResponse();
  DelRequest::default_instance_ = new DelRequest();
  DelResponse::default_instance_ = new DelResponse();
  UnLockRequest::default_instance_ = new UnLockRequest();
  UnLockResponse::default_instance_ = new UnLockResponse();
  ShowStatusRequest::default_instance_ = new ShowStatusRequest();
  ShowStatusResponse::default_instance_ = new ShowStatusResponse();
  ScanRequest::default_instance_ = new ScanRequest();
  ScanItem::default_instance_ = new ScanItem();
  ScanResponse::default_instance_ = new ScanResponse();
  LockRequest::default_instance_ = new LockRequest();
  LockResponse::default_instance_ = new LockResponse();
  KeepAliveRequest::default_instance_ = new KeepAliveRequest();
  KeepAliveResponse::default_instance_ = new KeepAliveResponse();
  LoginRequest::default_instance_ = new LoginRequest();
  Status::default_instance_ = new Status();
  LoginResponse::default_instance_ = new LoginResponse();
  LogoutRequest::default_instance_ = new LogoutRequest();
  LogoutResponse::default_instance_ = new LogoutResponse();
  RegisterRequest::default_instance_ = new RegisterRequest();
  RegisterResponse::default_instance_ = new RegisterResponse();
  CleanBinlogRequest::default_instance_ = new CleanBinlogRequest();
  CleanBinlogResponse::default_instance_ = new CleanBinlogResponse();
  RpcStatRequest::default_instance_ = new RpcStatRequest();
  RpcStatResponse::default_instance_ = new RpcStatResponse();
  UserInfo::default_instance_->InitAsDefaultInstance();
  Entry::default_instance_->InitAsDefaultInstance();
  StatInfo::default_instance_->InitAsDefaultInstance();
  AppendEntriesRequest::default_instance_->InitAsDefaultInstance();
  AppendEntriesResponse::default_instance_->InitAsDefaultInstance();
  VoteRequest::default_instance_->InitAsDefaultInstance();
  VoteResponse::default_instance_->InitAsDefaultInstance();
  PutRequest::default_instance_->InitAsDefaultInstance();
  PutResponse::default_instance_->InitAsDefaultInstance();
  GetRequest::default_instance_->InitAsDefaultInstance();
  GetResponse::default_instance_->InitAsDefaultInstance();
  DelRequest::default_instance_->InitAsDefaultInstance();
  DelResponse::default_instance_->InitAsDefaultInstance();
  UnLockRequest::default_instance_->InitAsDefaultInstance();
  UnLockResponse::default_instance_->InitAsDefaultInstance();
  ShowStatusRequest::default_instance_->InitAsDefaultInstance();
  ShowStatusResponse::default_instance_->InitAsDefaultInstance();
  ScanRequest::default_instance_->InitAsDefaultInstance();
  ScanItem::default_instance_->InitAsDefaultInstance();
  ScanResponse::default_instance_->InitAsDefaultInstance();
  LockRequest::default_instance_->InitAsDefaultInstance();
  LockResponse::default_instance_->InitAsDefaultInstance();
  KeepAliveRequest::default_instance_->InitAsDefaultInstance();
  KeepAliveResponse::default_instance_->InitAsDefaultInstance();
  LoginRequest::default_instance_->InitAsDefaultInstance();
  Status::default_instance_->InitAsDefaultInstance();
  LoginResponse::default_instance_->InitAsDefaultInstance();
  LogoutRequest::default_instance_->InitAsDefaultInstance();
  LogoutResponse::default_instance_->InitAsDefaultInstance();
  RegisterRequest::default_instance_->InitAsDefaultInstance();
  RegisterResponse::default_instance_->InitAsDefaultInstance();
  CleanBinlogRequest::default_instance_->InitAsDefaultInstance();
  CleanBinlogResponse::default_instance_->InitAsDefaultInstance();
  RpcStatRequest::default_instance_->InitAsDefaultInstance();
  RpcStatResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_service_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_service_2eproto {
  StaticDescriptorInitializer_service_2eproto() {
    protobuf_AddDesc_service_2eproto();
  }
} static_descriptor_initializer_service_2eproto_;
const ::google::protobuf::EnumDescriptor* NodeStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NodeStatus_descriptor_;
}
bool NodeStatus_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* LogOperation_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogOperation_descriptor_;
}
bool LogOperation_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 10:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* StatOperation_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StatOperation_descriptor_;
}
bool StatOperation_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserInfo::kUsernameFieldNumber;
const int UserInfo::kPasswordFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserInfo::UserInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpr.chubby.UserInfo)
}

void UserInfo::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

UserInfo::UserInfo(const UserInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mpr.chubby.UserInfo)
}

void UserInfo::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

UserInfo::~UserInfo() {
  // @@protoc_insertion_point(destructor:mpr.chubby.UserInfo)
  SharedDtor();
}

void UserInfo::SharedDtor() {
  username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void UserInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserInfo_descriptor_;
}

const UserInfo& UserInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2eproto();
  return *default_instance_;
}

UserInfo* UserInfo::default_instance_ = NULL;

UserInfo* UserInfo::New(::google::protobuf::Arena* arena) const {
  UserInfo* n = new UserInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UserInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:mpr.chubby.UserInfo)
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool UserInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpr.chubby.UserInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string username = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "mpr.chubby.UserInfo.username"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_password;
        break;
      }

      // optional string password = 2;
      case 2: {
        if (tag == 18) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "mpr.chubby.UserInfo.password"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpr.chubby.UserInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpr.chubby.UserInfo)
  return false;
#undef DO_
}

void UserInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpr.chubby.UserInfo)
  // optional string username = 1;
  if (this->username().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mpr.chubby.UserInfo.username");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->username(), output);
  }

  // optional string password = 2;
  if (this->password().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mpr.chubby.UserInfo.password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->password(), output);
  }

  // @@protoc_insertion_point(serialize_end:mpr.chubby.UserInfo)
}

::google::protobuf::uint8* UserInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mpr.chubby.UserInfo)
  // optional string username = 1;
  if (this->username().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mpr.chubby.UserInfo.username");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->username(), target);
  }

  // optional string password = 2;
  if (this->password().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mpr.chubby.UserInfo.password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->password(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:mpr.chubby.UserInfo)
  return target;
}

int UserInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:mpr.chubby.UserInfo)
  int total_size = 0;

  // optional string username = 1;
  if (this->username().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->username());
  }

  // optional string password = 2;
  if (this->password().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->password());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mpr.chubby.UserInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const UserInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const UserInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mpr.chubby.UserInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mpr.chubby.UserInfo)
    MergeFrom(*source);
  }
}

void UserInfo::MergeFrom(const UserInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mpr.chubby.UserInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.username().size() > 0) {

    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  if (from.password().size() > 0) {

    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
}

void UserInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mpr.chubby.UserInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserInfo::CopyFrom(const UserInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mpr.chubby.UserInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserInfo::IsInitialized() const {

  return true;
}

void UserInfo::Swap(UserInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserInfo::InternalSwap(UserInfo* other) {
  username_.Swap(&other->username_);
  password_.Swap(&other->password_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserInfo_descriptor_;
  metadata.reflection = UserInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserInfo

// optional string username = 1;
void UserInfo::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& UserInfo::username() const {
  // @@protoc_insertion_point(field_get:mpr.chubby.UserInfo.username)
  return username_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UserInfo::set_username(const ::std::string& value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mpr.chubby.UserInfo.username)
}
 void UserInfo::set_username(const char* value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mpr.chubby.UserInfo.username)
}
 void UserInfo::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mpr.chubby.UserInfo.username)
}
 ::std::string* UserInfo::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:mpr.chubby.UserInfo.username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* UserInfo::release_username() {
  // @@protoc_insertion_point(field_release:mpr.chubby.UserInfo.username)
  
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UserInfo::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:mpr.chubby.UserInfo.username)
}

// optional string password = 2;
void UserInfo::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& UserInfo::password() const {
  // @@protoc_insertion_point(field_get:mpr.chubby.UserInfo.password)
  return password_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UserInfo::set_password(const ::std::string& value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mpr.chubby.UserInfo.password)
}
 void UserInfo::set_password(const char* value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mpr.chubby.UserInfo.password)
}
 void UserInfo::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mpr.chubby.UserInfo.password)
}
 ::std::string* UserInfo::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:mpr.chubby.UserInfo.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* UserInfo::release_password() {
  // @@protoc_insertion_point(field_release:mpr.chubby.UserInfo.password)
  
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UserInfo::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:mpr.chubby.UserInfo.password)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Entry::kKeyFieldNumber;
const int Entry::kValueFieldNumber;
const int Entry::kTermFieldNumber;
const int Entry::kOpFieldNumber;
const int Entry::kUserFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Entry::Entry()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpr.chubby.Entry)
}

void Entry::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Entry::Entry(const Entry& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mpr.chubby.Entry)
}

void Entry::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  term_ = GOOGLE_LONGLONG(0);
  op_ = 0;
  user_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Entry::~Entry() {
  // @@protoc_insertion_point(destructor:mpr.chubby.Entry)
  SharedDtor();
}

void Entry::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Entry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Entry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Entry_descriptor_;
}

const Entry& Entry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2eproto();
  return *default_instance_;
}

Entry* Entry::default_instance_ = NULL;

Entry* Entry::New(::google::protobuf::Arena* arena) const {
  Entry* n = new Entry;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Entry::Clear() {
// @@protoc_insertion_point(message_clear_start:mpr.chubby.Entry)
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  term_ = GOOGLE_LONGLONG(0);
  op_ = 0;
  user_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool Entry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpr.chubby.Entry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "mpr.chubby.Entry.key"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // optional bytes value = 2;
      case 2: {
        if (tag == 18) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_term;
        break;
      }

      // optional int64 term = 3;
      case 3: {
        if (tag == 24) {
         parse_term:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &term_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_op;
        break;
      }

      // optional .mpr.chubby.LogOperation op = 4;
      case 4: {
        if (tag == 32) {
         parse_op:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_op(static_cast< ::mpr::chubby::LogOperation >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_user;
        break;
      }

      // optional string user = 5;
      case 5: {
        if (tag == 42) {
         parse_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->user().data(), this->user().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "mpr.chubby.Entry.user"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpr.chubby.Entry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpr.chubby.Entry)
  return false;
#undef DO_
}

void Entry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpr.chubby.Entry)
  // optional string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mpr.chubby.Entry.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // optional bytes value = 2;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->value(), output);
  }

  // optional int64 term = 3;
  if (this->term() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->term(), output);
  }

  // optional .mpr.chubby.LogOperation op = 4;
  if (this->op() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->op(), output);
  }

  // optional string user = 5;
  if (this->user().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mpr.chubby.Entry.user");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->user(), output);
  }

  // @@protoc_insertion_point(serialize_end:mpr.chubby.Entry)
}

::google::protobuf::uint8* Entry::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mpr.chubby.Entry)
  // optional string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mpr.chubby.Entry.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // optional bytes value = 2;
  if (this->value().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->value(), target);
  }

  // optional int64 term = 3;
  if (this->term() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->term(), target);
  }

  // optional .mpr.chubby.LogOperation op = 4;
  if (this->op() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->op(), target);
  }

  // optional string user = 5;
  if (this->user().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mpr.chubby.Entry.user");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->user(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:mpr.chubby.Entry)
  return target;
}

int Entry::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:mpr.chubby.Entry)
  int total_size = 0;

  // optional string key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());
  }

  // optional bytes value = 2;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->value());
  }

  // optional int64 term = 3;
  if (this->term() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->term());
  }

  // optional .mpr.chubby.LogOperation op = 4;
  if (this->op() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->op());
  }

  // optional string user = 5;
  if (this->user().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Entry::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mpr.chubby.Entry)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Entry* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Entry>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mpr.chubby.Entry)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mpr.chubby.Entry)
    MergeFrom(*source);
  }
}

void Entry::MergeFrom(const Entry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mpr.chubby.Entry)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  if (from.term() != 0) {
    set_term(from.term());
  }
  if (from.op() != 0) {
    set_op(from.op());
  }
  if (from.user().size() > 0) {

    user_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_);
  }
}

void Entry::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mpr.chubby.Entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Entry::CopyFrom(const Entry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mpr.chubby.Entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Entry::IsInitialized() const {

  return true;
}

void Entry::Swap(Entry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Entry::InternalSwap(Entry* other) {
  key_.Swap(&other->key_);
  value_.Swap(&other->value_);
  std::swap(term_, other->term_);
  std::swap(op_, other->op_);
  user_.Swap(&other->user_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Entry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Entry_descriptor_;
  metadata.reflection = Entry_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Entry

// optional string key = 1;
void Entry::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Entry::key() const {
  // @@protoc_insertion_point(field_get:mpr.chubby.Entry.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Entry::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mpr.chubby.Entry.key)
}
 void Entry::set_key(const char* value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mpr.chubby.Entry.key)
}
 void Entry::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mpr.chubby.Entry.key)
}
 ::std::string* Entry::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:mpr.chubby.Entry.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Entry::release_key() {
  // @@protoc_insertion_point(field_release:mpr.chubby.Entry.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Entry::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:mpr.chubby.Entry.key)
}

// optional bytes value = 2;
void Entry::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Entry::value() const {
  // @@protoc_insertion_point(field_get:mpr.chubby.Entry.value)
  return value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Entry::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mpr.chubby.Entry.value)
}
 void Entry::set_value(const char* value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mpr.chubby.Entry.value)
}
 void Entry::set_value(const void* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mpr.chubby.Entry.value)
}
 ::std::string* Entry::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:mpr.chubby.Entry.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Entry::release_value() {
  // @@protoc_insertion_point(field_release:mpr.chubby.Entry.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Entry::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:mpr.chubby.Entry.value)
}

// optional int64 term = 3;
void Entry::clear_term() {
  term_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 Entry::term() const {
  // @@protoc_insertion_point(field_get:mpr.chubby.Entry.term)
  return term_;
}
 void Entry::set_term(::google::protobuf::int64 value) {
  
  term_ = value;
  // @@protoc_insertion_point(field_set:mpr.chubby.Entry.term)
}

// optional .mpr.chubby.LogOperation op = 4;
void Entry::clear_op() {
  op_ = 0;
}
 ::mpr::chubby::LogOperation Entry::op() const {
  // @@protoc_insertion_point(field_get:mpr.chubby.Entry.op)
  return static_cast< ::mpr::chubby::LogOperation >(op_);
}
 void Entry::set_op(::mpr::chubby::LogOperation value) {
  
  op_ = value;
  // @@protoc_insertion_point(field_set:mpr.chubby.Entry.op)
}

// optional string user = 5;
void Entry::clear_user() {
  user_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Entry::user() const {
  // @@protoc_insertion_point(field_get:mpr.chubby.Entry.user)
  return user_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Entry::set_user(const ::std::string& value) {
  
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mpr.chubby.Entry.user)
}
 void Entry::set_user(const char* value) {
  
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mpr.chubby.Entry.user)
}
 void Entry::set_user(const char* value, size_t size) {
  
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mpr.chubby.Entry.user)
}
 ::std::string* Entry::mutable_user() {
  
  // @@protoc_insertion_point(field_mutable:mpr.chubby.Entry.user)
  return user_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Entry::release_user() {
  // @@protoc_insertion_point(field_release:mpr.chubby.Entry.user)
  
  return user_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Entry::set_allocated_user(::std::string* user) {
  if (user != NULL) {
    
  } else {
    
  }
  user_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user);
  // @@protoc_insertion_point(field_set_allocated:mpr.chubby.Entry.user)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StatInfo::kCurrentStatFieldNumber;
const int StatInfo::kAverageStatFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StatInfo::StatInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpr.chubby.StatInfo)
}

void StatInfo::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

StatInfo::StatInfo(const StatInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mpr.chubby.StatInfo)
}

void StatInfo::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  current_stat_ = GOOGLE_LONGLONG(0);
  average_stat_ = GOOGLE_LONGLONG(0);
}

StatInfo::~StatInfo() {
  // @@protoc_insertion_point(destructor:mpr.chubby.StatInfo)
  SharedDtor();
}

void StatInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StatInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StatInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StatInfo_descriptor_;
}

const StatInfo& StatInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2eproto();
  return *default_instance_;
}

StatInfo* StatInfo::default_instance_ = NULL;

StatInfo* StatInfo::New(::google::protobuf::Arena* arena) const {
  StatInfo* n = new StatInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StatInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:mpr.chubby.StatInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(StatInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<StatInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(current_stat_, average_stat_);

#undef ZR_HELPER_
#undef ZR_

}

bool StatInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpr.chubby.StatInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 current_stat = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &current_stat_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_average_stat;
        break;
      }

      // optional int64 average_stat = 2;
      case 2: {
        if (tag == 16) {
         parse_average_stat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &average_stat_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpr.chubby.StatInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpr.chubby.StatInfo)
  return false;
#undef DO_
}

void StatInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpr.chubby.StatInfo)
  // optional int64 current_stat = 1;
  if (this->current_stat() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->current_stat(), output);
  }

  // optional int64 average_stat = 2;
  if (this->average_stat() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->average_stat(), output);
  }

  // @@protoc_insertion_point(serialize_end:mpr.chubby.StatInfo)
}

::google::protobuf::uint8* StatInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mpr.chubby.StatInfo)
  // optional int64 current_stat = 1;
  if (this->current_stat() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->current_stat(), target);
  }

  // optional int64 average_stat = 2;
  if (this->average_stat() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->average_stat(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:mpr.chubby.StatInfo)
  return target;
}

int StatInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:mpr.chubby.StatInfo)
  int total_size = 0;

  // optional int64 current_stat = 1;
  if (this->current_stat() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->current_stat());
  }

  // optional int64 average_stat = 2;
  if (this->average_stat() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->average_stat());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StatInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mpr.chubby.StatInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const StatInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const StatInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mpr.chubby.StatInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mpr.chubby.StatInfo)
    MergeFrom(*source);
  }
}

void StatInfo::MergeFrom(const StatInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mpr.chubby.StatInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.current_stat() != 0) {
    set_current_stat(from.current_stat());
  }
  if (from.average_stat() != 0) {
    set_average_stat(from.average_stat());
  }
}

void StatInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mpr.chubby.StatInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StatInfo::CopyFrom(const StatInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mpr.chubby.StatInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatInfo::IsInitialized() const {

  return true;
}

void StatInfo::Swap(StatInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StatInfo::InternalSwap(StatInfo* other) {
  std::swap(current_stat_, other->current_stat_);
  std::swap(average_stat_, other->average_stat_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StatInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StatInfo_descriptor_;
  metadata.reflection = StatInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StatInfo

// optional int64 current_stat = 1;
void StatInfo::clear_current_stat() {
  current_stat_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 StatInfo::current_stat() const {
  // @@protoc_insertion_point(field_get:mpr.chubby.StatInfo.current_stat)
  return current_stat_;
}
 void StatInfo::set_current_stat(::google::protobuf::int64 value) {
  
  current_stat_ = value;
  // @@protoc_insertion_point(field_set:mpr.chubby.StatInfo.current_stat)
}

// optional int64 average_stat = 2;
void StatInfo::clear_average_stat() {
  average_stat_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 StatInfo::average_stat() const {
  // @@protoc_insertion_point(field_get:mpr.chubby.StatInfo.average_stat)
  return average_stat_;
}
 void StatInfo::set_average_stat(::google::protobuf::int64 value) {
  
  average_stat_ = value;
  // @@protoc_insertion_point(field_set:mpr.chubby.StatInfo.average_stat)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AppendEntriesRequest::kTermFieldNumber;
const int AppendEntriesRequest::kLeaderIdFieldNumber;
const int AppendEntriesRequest::kPrevLogIndexFieldNumber;
const int AppendEntriesRequest::kPrevLogTermFieldNumber;
const int AppendEntriesRequest::kLeaderCommitIndexFieldNumber;
const int AppendEntriesRequest::kEntriesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AppendEntriesRequest::AppendEntriesRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpr.chubby.AppendEntriesRequest)
}

void AppendEntriesRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

AppendEntriesRequest::AppendEntriesRequest(const AppendEntriesRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mpr.chubby.AppendEntriesRequest)
}

void AppendEntriesRequest::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  term_ = GOOGLE_LONGLONG(0);
  leader_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  prev_log_index_ = GOOGLE_LONGLONG(0);
  prev_log_term_ = GOOGLE_LONGLONG(0);
  leader_commit_index_ = GOOGLE_LONGLONG(0);
}

AppendEntriesRequest::~AppendEntriesRequest() {
  // @@protoc_insertion_point(destructor:mpr.chubby.AppendEntriesRequest)
  SharedDtor();
}

void AppendEntriesRequest::SharedDtor() {
  leader_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void AppendEntriesRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AppendEntriesRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AppendEntriesRequest_descriptor_;
}

const AppendEntriesRequest& AppendEntriesRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2eproto();
  return *default_instance_;
}

AppendEntriesRequest* AppendEntriesRequest::default_instance_ = NULL;

AppendEntriesRequest* AppendEntriesRequest::New(::google::protobuf::Arena* arena) const {
  AppendEntriesRequest* n = new AppendEntriesRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AppendEntriesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mpr.chubby.AppendEntriesRequest)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(AppendEntriesRequest, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<AppendEntriesRequest*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(prev_log_index_, leader_commit_index_);
  term_ = GOOGLE_LONGLONG(0);
  leader_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

  entries_.Clear();
}

bool AppendEntriesRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpr.chubby.AppendEntriesRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 term = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &term_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_leader_id;
        break;
      }

      // optional string leader_id = 2;
      case 2: {
        if (tag == 18) {
         parse_leader_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_leader_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->leader_id().data(), this->leader_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "mpr.chubby.AppendEntriesRequest.leader_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_prev_log_index;
        break;
      }

      // optional int64 prev_log_index = 3;
      case 3: {
        if (tag == 24) {
         parse_prev_log_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &prev_log_index_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_prev_log_term;
        break;
      }

      // optional int64 prev_log_term = 4;
      case 4: {
        if (tag == 32) {
         parse_prev_log_term:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &prev_log_term_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_leader_commit_index;
        break;
      }

      // optional int64 leader_commit_index = 5;
      case 5: {
        if (tag == 40) {
         parse_leader_commit_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &leader_commit_index_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_entries;
        break;
      }

      // repeated .mpr.chubby.Entry entries = 6;
      case 6: {
        if (tag == 50) {
         parse_entries:
          DO_(input->IncrementRecursionDepth());
         parse_loop_entries:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_entries()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_loop_entries;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpr.chubby.AppendEntriesRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpr.chubby.AppendEntriesRequest)
  return false;
#undef DO_
}

void AppendEntriesRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpr.chubby.AppendEntriesRequest)
  // optional int64 term = 1;
  if (this->term() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->term(), output);
  }

  // optional string leader_id = 2;
  if (this->leader_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->leader_id().data(), this->leader_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mpr.chubby.AppendEntriesRequest.leader_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->leader_id(), output);
  }

  // optional int64 prev_log_index = 3;
  if (this->prev_log_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->prev_log_index(), output);
  }

  // optional int64 prev_log_term = 4;
  if (this->prev_log_term() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->prev_log_term(), output);
  }

  // optional int64 leader_commit_index = 5;
  if (this->leader_commit_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->leader_commit_index(), output);
  }

  // repeated .mpr.chubby.Entry entries = 6;
  for (unsigned int i = 0, n = this->entries_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->entries(i), output);
  }

  // @@protoc_insertion_point(serialize_end:mpr.chubby.AppendEntriesRequest)
}

::google::protobuf::uint8* AppendEntriesRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mpr.chubby.AppendEntriesRequest)
  // optional int64 term = 1;
  if (this->term() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->term(), target);
  }

  // optional string leader_id = 2;
  if (this->leader_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->leader_id().data(), this->leader_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mpr.chubby.AppendEntriesRequest.leader_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->leader_id(), target);
  }

  // optional int64 prev_log_index = 3;
  if (this->prev_log_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->prev_log_index(), target);
  }

  // optional int64 prev_log_term = 4;
  if (this->prev_log_term() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->prev_log_term(), target);
  }

  // optional int64 leader_commit_index = 5;
  if (this->leader_commit_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->leader_commit_index(), target);
  }

  // repeated .mpr.chubby.Entry entries = 6;
  for (unsigned int i = 0, n = this->entries_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, this->entries(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:mpr.chubby.AppendEntriesRequest)
  return target;
}

int AppendEntriesRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:mpr.chubby.AppendEntriesRequest)
  int total_size = 0;

  // optional int64 term = 1;
  if (this->term() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->term());
  }

  // optional string leader_id = 2;
  if (this->leader_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->leader_id());
  }

  // optional int64 prev_log_index = 3;
  if (this->prev_log_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->prev_log_index());
  }

  // optional int64 prev_log_term = 4;
  if (this->prev_log_term() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->prev_log_term());
  }

  // optional int64 leader_commit_index = 5;
  if (this->leader_commit_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->leader_commit_index());
  }

  // repeated .mpr.chubby.Entry entries = 6;
  total_size += 1 * this->entries_size();
  for (int i = 0; i < this->entries_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->entries(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AppendEntriesRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mpr.chubby.AppendEntriesRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const AppendEntriesRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const AppendEntriesRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mpr.chubby.AppendEntriesRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mpr.chubby.AppendEntriesRequest)
    MergeFrom(*source);
  }
}

void AppendEntriesRequest::MergeFrom(const AppendEntriesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mpr.chubby.AppendEntriesRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  entries_.MergeFrom(from.entries_);
  if (from.term() != 0) {
    set_term(from.term());
  }
  if (from.leader_id().size() > 0) {

    leader_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.leader_id_);
  }
  if (from.prev_log_index() != 0) {
    set_prev_log_index(from.prev_log_index());
  }
  if (from.prev_log_term() != 0) {
    set_prev_log_term(from.prev_log_term());
  }
  if (from.leader_commit_index() != 0) {
    set_leader_commit_index(from.leader_commit_index());
  }
}

void AppendEntriesRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mpr.chubby.AppendEntriesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppendEntriesRequest::CopyFrom(const AppendEntriesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mpr.chubby.AppendEntriesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppendEntriesRequest::IsInitialized() const {

  return true;
}

void AppendEntriesRequest::Swap(AppendEntriesRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AppendEntriesRequest::InternalSwap(AppendEntriesRequest* other) {
  std::swap(term_, other->term_);
  leader_id_.Swap(&other->leader_id_);
  std::swap(prev_log_index_, other->prev_log_index_);
  std::swap(prev_log_term_, other->prev_log_term_);
  std::swap(leader_commit_index_, other->leader_commit_index_);
  entries_.UnsafeArenaSwap(&other->entries_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AppendEntriesRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AppendEntriesRequest_descriptor_;
  metadata.reflection = AppendEntriesRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AppendEntriesRequest

// optional int64 term = 1;
void AppendEntriesRequest::clear_term() {
  term_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 AppendEntriesRequest::term() const {
  // @@protoc_insertion_point(field_get:mpr.chubby.AppendEntriesRequest.term)
  return term_;
}
 void AppendEntriesRequest::set_term(::google::protobuf::int64 value) {
  
  term_ = value;
  // @@protoc_insertion_point(field_set:mpr.chubby.AppendEntriesRequest.term)
}

// optional string leader_id = 2;
void AppendEntriesRequest::clear_leader_id() {
  leader_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& AppendEntriesRequest::leader_id() const {
  // @@protoc_insertion_point(field_get:mpr.chubby.AppendEntriesRequest.leader_id)
  return leader_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AppendEntriesRequest::set_leader_id(const ::std::string& value) {
  
  leader_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mpr.chubby.AppendEntriesRequest.leader_id)
}
 void AppendEntriesRequest::set_leader_id(const char* value) {
  
  leader_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mpr.chubby.AppendEntriesRequest.leader_id)
}
 void AppendEntriesRequest::set_leader_id(const char* value, size_t size) {
  
  leader_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mpr.chubby.AppendEntriesRequest.leader_id)
}
 ::std::string* AppendEntriesRequest::mutable_leader_id() {
  
  // @@protoc_insertion_point(field_mutable:mpr.chubby.AppendEntriesRequest.leader_id)
  return leader_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* AppendEntriesRequest::release_leader_id() {
  // @@protoc_insertion_point(field_release:mpr.chubby.AppendEntriesRequest.leader_id)
  
  return leader_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AppendEntriesRequest::set_allocated_leader_id(::std::string* leader_id) {
  if (leader_id != NULL) {
    
  } else {
    
  }
  leader_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), leader_id);
  // @@protoc_insertion_point(field_set_allocated:mpr.chubby.AppendEntriesRequest.leader_id)
}

// optional int64 prev_log_index = 3;
void AppendEntriesRequest::clear_prev_log_index() {
  prev_log_index_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 AppendEntriesRequest::prev_log_index() const {
  // @@protoc_insertion_point(field_get:mpr.chubby.AppendEntriesRequest.prev_log_index)
  return prev_log_index_;
}
 void AppendEntriesRequest::set_prev_log_index(::google::protobuf::int64 value) {
  
  prev_log_index_ = value;
  // @@protoc_insertion_point(field_set:mpr.chubby.AppendEntriesRequest.prev_log_index)
}

// optional int64 prev_log_term = 4;
void AppendEntriesRequest::clear_prev_log_term() {
  prev_log_term_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 AppendEntriesRequest::prev_log_term() const {
  // @@protoc_insertion_point(field_get:mpr.chubby.AppendEntriesRequest.prev_log_term)
  return prev_log_term_;
}
 void AppendEntriesRequest::set_prev_log_term(::google::protobuf::int64 value) {
  
  prev_log_term_ = value;
  // @@protoc_insertion_point(field_set:mpr.chubby.AppendEntriesRequest.prev_log_term)
}

// optional int64 leader_commit_index = 5;
void AppendEntriesRequest::clear_leader_commit_index() {
  leader_commit_index_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 AppendEntriesRequest::leader_commit_index() const {
  // @@protoc_insertion_point(field_get:mpr.chubby.AppendEntriesRequest.leader_commit_index)
  return leader_commit_index_;
}
 void AppendEntriesRequest::set_leader_commit_index(::google::protobuf::int64 value) {
  
  leader_commit_index_ = value;
  // @@protoc_insertion_point(field_set:mpr.chubby.AppendEntriesRequest.leader_commit_index)
}

// repeated .mpr.chubby.Entry entries = 6;
int AppendEntriesRequest::entries_size() const {
  return entries_.size();
}
void AppendEntriesRequest::clear_entries() {
  entries_.Clear();
}
const ::mpr::chubby::Entry& AppendEntriesRequest::entries(int index) const {
  // @@protoc_insertion_point(field_get:mpr.chubby.AppendEntriesRequest.entries)
  return entries_.Get(index);
}
::mpr::chubby::Entry* AppendEntriesRequest::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:mpr.chubby.AppendEntriesRequest.entries)
  return entries_.Mutable(index);
}
::mpr::chubby::Entry* AppendEntriesRequest::add_entries() {
  // @@protoc_insertion_point(field_add:mpr.chubby.AppendEntriesRequest.entries)
  return entries_.Add();
}
::google::protobuf::RepeatedPtrField< ::mpr::chubby::Entry >*
AppendEntriesRequest::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:mpr.chubby.AppendEntriesRequest.entries)
  return &entries_;
}
const ::google::protobuf::RepeatedPtrField< ::mpr::chubby::Entry >&
AppendEntriesRequest::entries() const {
  // @@protoc_insertion_point(field_list:mpr.chubby.AppendEntriesRequest.entries)
  return entries_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AppendEntriesResponse::kCurrentTermFieldNumber;
const int AppendEntriesResponse::kSuccessFieldNumber;
const int AppendEntriesResponse::kLogLengthFieldNumber;
const int AppendEntriesResponse::kIsBusyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AppendEntriesResponse::AppendEntriesResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpr.chubby.AppendEntriesResponse)
}

void AppendEntriesResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

AppendEntriesResponse::AppendEntriesResponse(const AppendEntriesResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mpr.chubby.AppendEntriesResponse)
}

void AppendEntriesResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  current_term_ = GOOGLE_LONGLONG(0);
  success_ = false;
  log_length_ = GOOGLE_LONGLONG(0);
  is_busy_ = false;
}

AppendEntriesResponse::~AppendEntriesResponse() {
  // @@protoc_insertion_point(destructor:mpr.chubby.AppendEntriesResponse)
  SharedDtor();
}

void AppendEntriesResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AppendEntriesResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AppendEntriesResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AppendEntriesResponse_descriptor_;
}

const AppendEntriesResponse& AppendEntriesResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2eproto();
  return *default_instance_;
}

AppendEntriesResponse* AppendEntriesResponse::default_instance_ = NULL;

AppendEntriesResponse* AppendEntriesResponse::New(::google::protobuf::Arena* arena) const {
  AppendEntriesResponse* n = new AppendEntriesResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AppendEntriesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mpr.chubby.AppendEntriesResponse)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(AppendEntriesResponse, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<AppendEntriesResponse*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(current_term_, is_busy_);

#undef ZR_HELPER_
#undef ZR_

}

bool AppendEntriesResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpr.chubby.AppendEntriesResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 current_term = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &current_term_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_success;
        break;
      }

      // optional bool success = 2;
      case 2: {
        if (tag == 16) {
         parse_success:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_log_length;
        break;
      }

      // optional int64 log_length = 3;
      case 3: {
        if (tag == 24) {
         parse_log_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &log_length_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_is_busy;
        break;
      }

      // optional bool is_busy = 4;
      case 4: {
        if (tag == 32) {
         parse_is_busy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_busy_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpr.chubby.AppendEntriesResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpr.chubby.AppendEntriesResponse)
  return false;
#undef DO_
}

void AppendEntriesResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpr.chubby.AppendEntriesResponse)
  // optional int64 current_term = 1;
  if (this->current_term() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->current_term(), output);
  }

  // optional bool success = 2;
  if (this->success() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->success(), output);
  }

  // optional int64 log_length = 3;
  if (this->log_length() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->log_length(), output);
  }

  // optional bool is_busy = 4;
  if (this->is_busy() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_busy(), output);
  }

  // @@protoc_insertion_point(serialize_end:mpr.chubby.AppendEntriesResponse)
}

::google::protobuf::uint8* AppendEntriesResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mpr.chubby.AppendEntriesResponse)
  // optional int64 current_term = 1;
  if (this->current_term() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->current_term(), target);
  }

  // optional bool success = 2;
  if (this->success() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->success(), target);
  }

  // optional int64 log_length = 3;
  if (this->log_length() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->log_length(), target);
  }

  // optional bool is_busy = 4;
  if (this->is_busy() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_busy(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:mpr.chubby.AppendEntriesResponse)
  return target;
}

int AppendEntriesResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:mpr.chubby.AppendEntriesResponse)
  int total_size = 0;

  // optional int64 current_term = 1;
  if (this->current_term() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->current_term());
  }

  // optional bool success = 2;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  // optional int64 log_length = 3;
  if (this->log_length() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->log_length());
  }

  // optional bool is_busy = 4;
  if (this->is_busy() != 0) {
    total_size += 1 + 1;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AppendEntriesResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mpr.chubby.AppendEntriesResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const AppendEntriesResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const AppendEntriesResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mpr.chubby.AppendEntriesResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mpr.chubby.AppendEntriesResponse)
    MergeFrom(*source);
  }
}

void AppendEntriesResponse::MergeFrom(const AppendEntriesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mpr.chubby.AppendEntriesResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.current_term() != 0) {
    set_current_term(from.current_term());
  }
  if (from.success() != 0) {
    set_success(from.success());
  }
  if (from.log_length() != 0) {
    set_log_length(from.log_length());
  }
  if (from.is_busy() != 0) {
    set_is_busy(from.is_busy());
  }
}

void AppendEntriesResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mpr.chubby.AppendEntriesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppendEntriesResponse::CopyFrom(const AppendEntriesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mpr.chubby.AppendEntriesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppendEntriesResponse::IsInitialized() const {

  return true;
}

void AppendEntriesResponse::Swap(AppendEntriesResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AppendEntriesResponse::InternalSwap(AppendEntriesResponse* other) {
  std::swap(current_term_, other->current_term_);
  std::swap(success_, other->success_);
  std::swap(log_length_, other->log_length_);
  std::swap(is_busy_, other->is_busy_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AppendEntriesResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AppendEntriesResponse_descriptor_;
  metadata.reflection = AppendEntriesResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AppendEntriesResponse

// optional int64 current_term = 1;
void AppendEntriesResponse::clear_current_term() {
  current_term_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 AppendEntriesResponse::current_term() const {
  // @@protoc_insertion_point(field_get:mpr.chubby.AppendEntriesResponse.current_term)
  return current_term_;
}
 void AppendEntriesResponse::set_current_term(::google::protobuf::int64 value) {
  
  current_term_ = value;
  // @@protoc_insertion_point(field_set:mpr.chubby.AppendEntriesResponse.current_term)
}

// optional bool success = 2;
void AppendEntriesResponse::clear_success() {
  success_ = false;
}
 bool AppendEntriesResponse::success() const {
  // @@protoc_insertion_point(field_get:mpr.chubby.AppendEntriesResponse.success)
  return success_;
}
 void AppendEntriesResponse::set_success(bool value) {
  
  success_ = value;
  // @@protoc_insertion_point(field_set:mpr.chubby.AppendEntriesResponse.success)
}

// optional int64 log_length = 3;
void AppendEntriesResponse::clear_log_length() {
  log_length_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 AppendEntriesResponse::log_length() const {
  // @@protoc_insertion_point(field_get:mpr.chubby.AppendEntriesResponse.log_length)
  return log_length_;
}
 void AppendEntriesResponse::set_log_length(::google::protobuf::int64 value) {
  
  log_length_ = value;
  // @@protoc_insertion_point(field_set:mpr.chubby.AppendEntriesResponse.log_length)
}

// optional bool is_busy = 4;
void AppendEntriesResponse::clear_is_busy() {
  is_busy_ = false;
}
 bool AppendEntriesResponse::is_busy() const {
  // @@protoc_insertion_point(field_get:mpr.chubby.AppendEntriesResponse.is_busy)
  return is_busy_;
}
 void AppendEntriesResponse::set_is_busy(bool value) {
  
  is_busy_ = value;
  // @@protoc_insertion_point(field_set:mpr.chubby.AppendEntriesResponse.is_busy)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VoteRequest::kTermFieldNumber;
const int VoteRequest::kCandidateIdFieldNumber;
const int VoteRequest::kLastLogIndexFieldNumber;
const int VoteRequest::kLastLogTermFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VoteRequest::VoteRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpr.chubby.VoteRequest)
}

void VoteRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

VoteRequest::VoteRequest(const VoteRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mpr.chubby.VoteRequest)
}

void VoteRequest::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  term_ = GOOGLE_LONGLONG(0);
  candidate_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  last_log_index_ = GOOGLE_LONGLONG(0);
  last_log_term_ = GOOGLE_LONGLONG(0);
}

VoteRequest::~VoteRequest() {
  // @@protoc_insertion_point(destructor:mpr.chubby.VoteRequest)
  SharedDtor();
}

void VoteRequest::SharedDtor() {
  candidate_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void VoteRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VoteRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VoteRequest_descriptor_;
}

const VoteRequest& VoteRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2eproto();
  return *default_instance_;
}

VoteRequest* VoteRequest::default_instance_ = NULL;

VoteRequest* VoteRequest::New(::google::protobuf::Arena* arena) const {
  VoteRequest* n = new VoteRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VoteRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mpr.chubby.VoteRequest)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(VoteRequest, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<VoteRequest*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(last_log_index_, last_log_term_);
  term_ = GOOGLE_LONGLONG(0);
  candidate_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool VoteRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpr.chubby.VoteRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 term = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &term_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_candidate_id;
        break;
      }

      // optional string candidate_id = 2;
      case 2: {
        if (tag == 18) {
         parse_candidate_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_candidate_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->candidate_id().data(), this->candidate_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "mpr.chubby.VoteRequest.candidate_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_last_log_index;
        break;
      }

      // optional int64 last_log_index = 3;
      case 3: {
        if (tag == 24) {
         parse_last_log_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_log_index_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_last_log_term;
        break;
      }

      // optional int64 last_log_term = 4;
      case 4: {
        if (tag == 32) {
         parse_last_log_term:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_log_term_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpr.chubby.VoteRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpr.chubby.VoteRequest)
  return false;
#undef DO_
}

void VoteRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpr.chubby.VoteRequest)
  // optional int64 term = 1;
  if (this->term() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->term(), output);
  }

  // optional string candidate_id = 2;
  if (this->candidate_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->candidate_id().data(), this->candidate_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mpr.chubby.VoteRequest.candidate_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->candidate_id(), output);
  }

  // optional int64 last_log_index = 3;
  if (this->last_log_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->last_log_index(), output);
  }

  // optional int64 last_log_term = 4;
  if (this->last_log_term() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->last_log_term(), output);
  }

  // @@protoc_insertion_point(serialize_end:mpr.chubby.VoteRequest)
}

::google::protobuf::uint8* VoteRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mpr.chubby.VoteRequest)
  // optional int64 term = 1;
  if (this->term() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->term(), target);
  }

  // optional string candidate_id = 2;
  if (this->candidate_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->candidate_id().data(), this->candidate_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mpr.chubby.VoteRequest.candidate_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->candidate_id(), target);
  }

  // optional int64 last_log_index = 3;
  if (this->last_log_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->last_log_index(), target);
  }

  // optional int64 last_log_term = 4;
  if (this->last_log_term() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->last_log_term(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:mpr.chubby.VoteRequest)
  return target;
}

int VoteRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:mpr.chubby.VoteRequest)
  int total_size = 0;

  // optional int64 term = 1;
  if (this->term() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->term());
  }

  // optional string candidate_id = 2;
  if (this->candidate_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->candidate_id());
  }

  // optional int64 last_log_index = 3;
  if (this->last_log_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->last_log_index());
  }

  // optional int64 last_log_term = 4;
  if (this->last_log_term() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->last_log_term());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VoteRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mpr.chubby.VoteRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const VoteRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const VoteRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mpr.chubby.VoteRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mpr.chubby.VoteRequest)
    MergeFrom(*source);
  }
}

void VoteRequest::MergeFrom(const VoteRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mpr.chubby.VoteRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.term() != 0) {
    set_term(from.term());
  }
  if (from.candidate_id().size() > 0) {

    candidate_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.candidate_id_);
  }
  if (from.last_log_index() != 0) {
    set_last_log_index(from.last_log_index());
  }
  if (from.last_log_term() != 0) {
    set_last_log_term(from.last_log_term());
  }
}

void VoteRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mpr.chubby.VoteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VoteRequest::CopyFrom(const VoteRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mpr.chubby.VoteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VoteRequest::IsInitialized() const {

  return true;
}

void VoteRequest::Swap(VoteRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VoteRequest::InternalSwap(VoteRequest* other) {
  std::swap(term_, other->term_);
  candidate_id_.Swap(&other->candidate_id_);
  std::swap(last_log_index_, other->last_log_index_);
  std::swap(last_log_term_, other->last_log_term_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VoteRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VoteRequest_descriptor_;
  metadata.reflection = VoteRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VoteRequest

// optional int64 term = 1;
void VoteRequest::clear_term() {
  term_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 VoteRequest::term() const {
  // @@protoc_insertion_point(field_get:mpr.chubby.VoteRequest.term)
  return term_;
}
 void VoteRequest::set_term(::google::protobuf::int64 value) {
  
  term_ = value;
  // @@protoc_insertion_point(field_set:mpr.chubby.VoteRequest.term)
}

// optional string candidate_id = 2;
void VoteRequest::clear_candidate_id() {
  candidate_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& VoteRequest::candidate_id() const {
  // @@protoc_insertion_point(field_get:mpr.chubby.VoteRequest.candidate_id)
  return candidate_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void VoteRequest::set_candidate_id(const ::std::string& value) {
  
  candidate_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mpr.chubby.VoteRequest.candidate_id)
}
 void VoteRequest::set_candidate_id(const char* value) {
  
  candidate_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mpr.chubby.VoteRequest.candidate_id)
}
 void VoteRequest::set_candidate_id(const char* value, size_t size) {
  
  candidate_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mpr.chubby.VoteRequest.candidate_id)
}
 ::std::string* VoteRequest::mutable_candidate_id() {
  
  // @@protoc_insertion_point(field_mutable:mpr.chubby.VoteRequest.candidate_id)
  return candidate_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* VoteRequest::release_candidate_id() {
  // @@protoc_insertion_point(field_release:mpr.chubby.VoteRequest.candidate_id)
  
  return candidate_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void VoteRequest::set_allocated_candidate_id(::std::string* candidate_id) {
  if (candidate_id != NULL) {
    
  } else {
    
  }
  candidate_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), candidate_id);
  // @@protoc_insertion_point(field_set_allocated:mpr.chubby.VoteRequest.candidate_id)
}

// optional int64 last_log_index = 3;
void VoteRequest::clear_last_log_index() {
  last_log_index_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 VoteRequest::last_log_index() const {
  // @@protoc_insertion_point(field_get:mpr.chubby.VoteRequest.last_log_index)
  return last_log_index_;
}
 void VoteRequest::set_last_log_index(::google::protobuf::int64 value) {
  
  last_log_index_ = value;
  // @@protoc_insertion_point(field_set:mpr.chubby.VoteRequest.last_log_index)
}

// optional int64 last_log_term = 4;
void VoteRequest::clear_last_log_term() {
  last_log_term_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 VoteRequest::last_log_term() const {
  // @@protoc_insertion_point(field_get:mpr.chubby.VoteRequest.last_log_term)
  return last_log_term_;
}
 void VoteRequest::set_last_log_term(::google::protobuf::int64 value) {
  
  last_log_term_ = value;
  // @@protoc_insertion_point(field_set:mpr.chubby.VoteRequest.last_log_term)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VoteResponse::kTermFieldNumber;
const int VoteResponse::kVoteGrantedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VoteResponse::VoteResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpr.chubby.VoteResponse)
}

void VoteResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

VoteResponse::VoteResponse(const VoteResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mpr.chubby.VoteResponse)
}

void VoteResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  term_ = GOOGLE_LONGLONG(0);
  vote_granted_ = false;
}

VoteResponse::~VoteResponse() {
  // @@protoc_insertion_point(destructor:mpr.chubby.VoteResponse)
  SharedDtor();
}

void VoteResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void VoteResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VoteResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VoteResponse_descriptor_;
}

const VoteResponse& VoteResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2eproto();
  return *default_instance_;
}

VoteResponse* VoteResponse::default_instance_ = NULL;

VoteResponse* VoteResponse::New(::google::protobuf::Arena* arena) const {
  VoteResponse* n = new VoteResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VoteResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mpr.chubby.VoteResponse)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(VoteResponse, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<VoteResponse*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(term_, vote_granted_);

#undef ZR_HELPER_
#undef ZR_

}

bool VoteResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpr.chubby.VoteResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 term = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &term_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_vote_granted;
        break;
      }

      // optional bool vote_granted = 2;
      case 2: {
        if (tag == 16) {
         parse_vote_granted:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &vote_granted_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpr.chubby.VoteResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpr.chubby.VoteResponse)
  return false;
#undef DO_
}

void VoteResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpr.chubby.VoteResponse)
  // optional int64 term = 1;
  if (this->term() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->term(), output);
  }

  // optional bool vote_granted = 2;
  if (this->vote_granted() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->vote_granted(), output);
  }

  // @@protoc_insertion_point(serialize_end:mpr.chubby.VoteResponse)
}

::google::protobuf::uint8* VoteResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mpr.chubby.VoteResponse)
  // optional int64 term = 1;
  if (this->term() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->term(), target);
  }

  // optional bool vote_granted = 2;
  if (this->vote_granted() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->vote_granted(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:mpr.chubby.VoteResponse)
  return target;
}

int VoteResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:mpr.chubby.VoteResponse)
  int total_size = 0;

  // optional int64 term = 1;
  if (this->term() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->term());
  }

  // optional bool vote_granted = 2;
  if (this->vote_granted() != 0) {
    total_size += 1 + 1;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VoteResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mpr.chubby.VoteResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const VoteResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const VoteResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mpr.chubby.VoteResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mpr.chubby.VoteResponse)
    MergeFrom(*source);
  }
}

void VoteResponse::MergeFrom(const VoteResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mpr.chubby.VoteResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.term() != 0) {
    set_term(from.term());
  }
  if (from.vote_granted() != 0) {
    set_vote_granted(from.vote_granted());
  }
}

void VoteResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mpr.chubby.VoteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VoteResponse::CopyFrom(const VoteResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mpr.chubby.VoteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VoteResponse::IsInitialized() const {

  return true;
}

void VoteResponse::Swap(VoteResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VoteResponse::InternalSwap(VoteResponse* other) {
  std::swap(term_, other->term_);
  std::swap(vote_granted_, other->vote_granted_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VoteResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VoteResponse_descriptor_;
  metadata.reflection = VoteResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VoteResponse

// optional int64 term = 1;
void VoteResponse::clear_term() {
  term_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 VoteResponse::term() const {
  // @@protoc_insertion_point(field_get:mpr.chubby.VoteResponse.term)
  return term_;
}
 void VoteResponse::set_term(::google::protobuf::int64 value) {
  
  term_ = value;
  // @@protoc_insertion_point(field_set:mpr.chubby.VoteResponse.term)
}

// optional bool vote_granted = 2;
void VoteResponse::clear_vote_granted() {
  vote_granted_ = false;
}
 bool VoteResponse::vote_granted() const {
  // @@protoc_insertion_point(field_get:mpr.chubby.VoteResponse.vote_granted)
  return vote_granted_;
}
 void VoteResponse::set_vote_granted(bool value) {
  
  vote_granted_ = value;
  // @@protoc_insertion_point(field_set:mpr.chubby.VoteResponse.vote_granted)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PutRequest::kKeyFieldNumber;
const int PutRequest::kValueFieldNumber;
const int PutRequest::kUuidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PutRequest::PutRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpr.chubby.PutRequest)
}

void PutRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

PutRequest::PutRequest(const PutRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mpr.chubby.PutRequest)
}

void PutRequest::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

PutRequest::~PutRequest() {
  // @@protoc_insertion_point(destructor:mpr.chubby.PutRequest)
  SharedDtor();
}

void PutRequest::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uuid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void PutRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PutRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PutRequest_descriptor_;
}

const PutRequest& PutRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2eproto();
  return *default_instance_;
}

PutRequest* PutRequest::default_instance_ = NULL;

PutRequest* PutRequest::New(::google::protobuf::Arena* arena) const {
  PutRequest* n = new PutRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PutRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mpr.chubby.PutRequest)
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool PutRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpr.chubby.PutRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "mpr.chubby.PutRequest.key"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // optional bytes value = 2;
      case 2: {
        if (tag == 18) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_uuid;
        break;
      }

      // optional string uuid = 3;
      case 3: {
        if (tag == 26) {
         parse_uuid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uuid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->uuid().data(), this->uuid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "mpr.chubby.PutRequest.uuid"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpr.chubby.PutRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpr.chubby.PutRequest)
  return false;
#undef DO_
}

void PutRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpr.chubby.PutRequest)
  // optional string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mpr.chubby.PutRequest.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // optional bytes value = 2;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->value(), output);
  }

  // optional string uuid = 3;
  if (this->uuid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mpr.chubby.PutRequest.uuid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->uuid(), output);
  }

  // @@protoc_insertion_point(serialize_end:mpr.chubby.PutRequest)
}

::google::protobuf::uint8* PutRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mpr.chubby.PutRequest)
  // optional string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mpr.chubby.PutRequest.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // optional bytes value = 2;
  if (this->value().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->value(), target);
  }

  // optional string uuid = 3;
  if (this->uuid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mpr.chubby.PutRequest.uuid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->uuid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:mpr.chubby.PutRequest)
  return target;
}

int PutRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:mpr.chubby.PutRequest)
  int total_size = 0;

  // optional string key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());
  }

  // optional bytes value = 2;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->value());
  }

  // optional string uuid = 3;
  if (this->uuid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->uuid());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PutRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mpr.chubby.PutRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const PutRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PutRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mpr.chubby.PutRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mpr.chubby.PutRequest)
    MergeFrom(*source);
  }
}

void PutRequest::MergeFrom(const PutRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mpr.chubby.PutRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  if (from.uuid().size() > 0) {

    uuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uuid_);
  }
}

void PutRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mpr.chubby.PutRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PutRequest::CopyFrom(const PutRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mpr.chubby.PutRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PutRequest::IsInitialized() const {

  return true;
}

void PutRequest::Swap(PutRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PutRequest::InternalSwap(PutRequest* other) {
  key_.Swap(&other->key_);
  value_.Swap(&other->value_);
  uuid_.Swap(&other->uuid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PutRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PutRequest_descriptor_;
  metadata.reflection = PutRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PutRequest

// optional string key = 1;
void PutRequest::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PutRequest::key() const {
  // @@protoc_insertion_point(field_get:mpr.chubby.PutRequest.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PutRequest::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mpr.chubby.PutRequest.key)
}
 void PutRequest::set_key(const char* value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mpr.chubby.PutRequest.key)
}
 void PutRequest::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mpr.chubby.PutRequest.key)
}
 ::std::string* PutRequest::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:mpr.chubby.PutRequest.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PutRequest::release_key() {
  // @@protoc_insertion_point(field_release:mpr.chubby.PutRequest.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PutRequest::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:mpr.chubby.PutRequest.key)
}

// optional bytes value = 2;
void PutRequest::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PutRequest::value() const {
  // @@protoc_insertion_point(field_get:mpr.chubby.PutRequest.value)
  return value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PutRequest::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mpr.chubby.PutRequest.value)
}
 void PutRequest::set_value(const char* value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mpr.chubby.PutRequest.value)
}
 void PutRequest::set_value(const void* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mpr.chubby.PutRequest.value)
}
 ::std::string* PutRequest::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:mpr.chubby.PutRequest.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PutRequest::release_value() {
  // @@protoc_insertion_point(field_release:mpr.chubby.PutRequest.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PutRequest::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:mpr.chubby.PutRequest.value)
}

// optional string uuid = 3;
void PutRequest::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PutRequest::uuid() const {
  // @@protoc_insertion_point(field_get:mpr.chubby.PutRequest.uuid)
  return uuid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PutRequest::set_uuid(const ::std::string& value) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mpr.chubby.PutRequest.uuid)
}
 void PutRequest::set_uuid(const char* value) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mpr.chubby.PutRequest.uuid)
}
 void PutRequest::set_uuid(const char* value, size_t size) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mpr.chubby.PutRequest.uuid)
}
 ::std::string* PutRequest::mutable_uuid() {
  
  // @@protoc_insertion_point(field_mutable:mpr.chubby.PutRequest.uuid)
  return uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PutRequest::release_uuid() {
  // @@protoc_insertion_point(field_release:mpr.chubby.PutRequest.uuid)
  
  return uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PutRequest::set_allocated_uuid(::std::string* uuid) {
  if (uuid != NULL) {
    
  } else {
    
  }
  uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:mpr.chubby.PutRequest.uuid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PutResponse::kSuccessFieldNumber;
const int PutResponse::kLeaderIdFieldNumber;
const int PutResponse::kUuidExpiredFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PutResponse::PutResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpr.chubby.PutResponse)
}

void PutResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

PutResponse::PutResponse(const PutResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mpr.chubby.PutResponse)
}

void PutResponse::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  success_ = false;
  leader_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uuid_expired_ = false;
}

PutResponse::~PutResponse() {
  // @@protoc_insertion_point(destructor:mpr.chubby.PutResponse)
  SharedDtor();
}

void PutResponse::SharedDtor() {
  leader_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void PutResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PutResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PutResponse_descriptor_;
}

const PutResponse& PutResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2eproto();
  return *default_instance_;
}

PutResponse* PutResponse::default_instance_ = NULL;

PutResponse* PutResponse::New(::google::protobuf::Arena* arena) const {
  PutResponse* n = new PutResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PutResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mpr.chubby.PutResponse)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(PutResponse, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<PutResponse*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(success_, uuid_expired_);
  leader_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool PutResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpr.chubby.PutResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool success = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_leader_id;
        break;
      }

      // optional string leader_id = 2;
      case 2: {
        if (tag == 18) {
         parse_leader_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_leader_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->leader_id().data(), this->leader_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "mpr.chubby.PutResponse.leader_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_uuid_expired;
        break;
      }

      // optional bool uuid_expired = 3;
      case 3: {
        if (tag == 24) {
         parse_uuid_expired:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &uuid_expired_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpr.chubby.PutResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpr.chubby.PutResponse)
  return false;
#undef DO_
}

void PutResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpr.chubby.PutResponse)
  // optional bool success = 1;
  if (this->success() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->success(), output);
  }

  // optional string leader_id = 2;
  if (this->leader_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->leader_id().data(), this->leader_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mpr.chubby.PutResponse.leader_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->leader_id(), output);
  }

  // optional bool uuid_expired = 3;
  if (this->uuid_expired() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->uuid_expired(), output);
  }

  // @@protoc_insertion_point(serialize_end:mpr.chubby.PutResponse)
}

::google::protobuf::uint8* PutResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mpr.chubby.PutResponse)
  // optional bool success = 1;
  if (this->success() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->success(), target);
  }

  // optional string leader_id = 2;
  if (this->leader_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->leader_id().data(), this->leader_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mpr.chubby.PutResponse.leader_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->leader_id(), target);
  }

  // optional bool uuid_expired = 3;
  if (this->uuid_expired() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->uuid_expired(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:mpr.chubby.PutResponse)
  return target;
}

int PutResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:mpr.chubby.PutResponse)
  int total_size = 0;

  // optional bool success = 1;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  // optional string leader_id = 2;
  if (this->leader_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->leader_id());
  }

  // optional bool uuid_expired = 3;
  if (this->uuid_expired() != 0) {
    total_size += 1 + 1;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PutResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mpr.chubby.PutResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const PutResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PutResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mpr.chubby.PutResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mpr.chubby.PutResponse)
    MergeFrom(*source);
  }
}

void PutResponse::MergeFrom(const PutResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mpr.chubby.PutResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.success() != 0) {
    set_success(from.success());
  }
  if (from.leader_id().size() > 0) {

    leader_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.leader_id_);
  }
  if (from.uuid_expired() != 0) {
    set_uuid_expired(from.uuid_expired());
  }
}

void PutResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mpr.chubby.PutResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PutResponse::CopyFrom(const PutResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mpr.chubby.PutResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PutResponse::IsInitialized() const {

  return true;
}

void PutResponse::Swap(PutResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PutResponse::InternalSwap(PutResponse* other) {
  std::swap(success_, other->success_);
  leader_id_.Swap(&other->leader_id_);
  std::swap(uuid_expired_, other->uuid_expired_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PutResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PutResponse_descriptor_;
  metadata.reflection = PutResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PutResponse

// optional bool success = 1;
void PutResponse::clear_success() {
  success_ = false;
}
 bool PutResponse::success() const {
  // @@protoc_insertion_point(field_get:mpr.chubby.PutResponse.success)
  return success_;
}
 void PutResponse::set_success(bool value) {
  
  success_ = value;
  // @@protoc_insertion_point(field_set:mpr.chubby.PutResponse.success)
}

// optional string leader_id = 2;
void PutResponse::clear_leader_id() {
  leader_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PutResponse::leader_id() const {
  // @@protoc_insertion_point(field_get:mpr.chubby.PutResponse.leader_id)
  return leader_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PutResponse::set_leader_id(const ::std::string& value) {
  
  leader_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mpr.chubby.PutResponse.leader_id)
}
 void PutResponse::set_leader_id(const char* value) {
  
  leader_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mpr.chubby.PutResponse.leader_id)
}
 void PutResponse::set_leader_id(const char* value, size_t size) {
  
  leader_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mpr.chubby.PutResponse.leader_id)
}
 ::std::string* PutResponse::mutable_leader_id() {
  
  // @@protoc_insertion_point(field_mutable:mpr.chubby.PutResponse.leader_id)
  return leader_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PutResponse::release_leader_id() {
  // @@protoc_insertion_point(field_release:mpr.chubby.PutResponse.leader_id)
  
  return leader_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PutResponse::set_allocated_leader_id(::std::string* leader_id) {
  if (leader_id != NULL) {
    
  } else {
    
  }
  leader_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), leader_id);
  // @@protoc_insertion_point(field_set_allocated:mpr.chubby.PutResponse.leader_id)
}

// optional bool uuid_expired = 3;
void PutResponse::clear_uuid_expired() {
  uuid_expired_ = false;
}
 bool PutResponse::uuid_expired() const {
  // @@protoc_insertion_point(field_get:mpr.chubby.PutResponse.uuid_expired)
  return uuid_expired_;
}
 void PutResponse::set_uuid_expired(bool value) {
  
  uuid_expired_ = value;
  // @@protoc_insertion_point(field_set:mpr.chubby.PutResponse.uuid_expired)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetRequest::kKeyFieldNumber;
const int GetRequest::kUuidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetRequest::GetRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpr.chubby.GetRequest)
}

void GetRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

GetRequest::GetRequest(const GetRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mpr.chubby.GetRequest)
}

void GetRequest::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

GetRequest::~GetRequest() {
  // @@protoc_insertion_point(destructor:mpr.chubby.GetRequest)
  SharedDtor();
}

void GetRequest::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uuid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void GetRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetRequest_descriptor_;
}

const GetRequest& GetRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2eproto();
  return *default_instance_;
}

GetRequest* GetRequest::default_instance_ = NULL;

GetRequest* GetRequest::New(::google::protobuf::Arena* arena) const {
  GetRequest* n = new GetRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mpr.chubby.GetRequest)
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool GetRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpr.chubby.GetRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "mpr.chubby.GetRequest.key"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_uuid;
        break;
      }

      // optional string uuid = 2;
      case 2: {
        if (tag == 18) {
         parse_uuid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uuid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->uuid().data(), this->uuid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "mpr.chubby.GetRequest.uuid"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpr.chubby.GetRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpr.chubby.GetRequest)
  return false;
#undef DO_
}

void GetRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpr.chubby.GetRequest)
  // optional string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mpr.chubby.GetRequest.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // optional string uuid = 2;
  if (this->uuid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mpr.chubby.GetRequest.uuid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->uuid(), output);
  }

  // @@protoc_insertion_point(serialize_end:mpr.chubby.GetRequest)
}

::google::protobuf::uint8* GetRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mpr.chubby.GetRequest)
  // optional string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mpr.chubby.GetRequest.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // optional string uuid = 2;
  if (this->uuid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mpr.chubby.GetRequest.uuid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->uuid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:mpr.chubby.GetRequest)
  return target;
}

int GetRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:mpr.chubby.GetRequest)
  int total_size = 0;

  // optional string key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());
  }

  // optional string uuid = 2;
  if (this->uuid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->uuid());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mpr.chubby.GetRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const GetRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GetRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mpr.chubby.GetRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mpr.chubby.GetRequest)
    MergeFrom(*source);
  }
}

void GetRequest::MergeFrom(const GetRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mpr.chubby.GetRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.uuid().size() > 0) {

    uuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uuid_);
  }
}

void GetRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mpr.chubby.GetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetRequest::CopyFrom(const GetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mpr.chubby.GetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRequest::IsInitialized() const {

  return true;
}

void GetRequest::Swap(GetRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetRequest::InternalSwap(GetRequest* other) {
  key_.Swap(&other->key_);
  uuid_.Swap(&other->uuid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetRequest_descriptor_;
  metadata.reflection = GetRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetRequest

// optional string key = 1;
void GetRequest::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& GetRequest::key() const {
  // @@protoc_insertion_point(field_get:mpr.chubby.GetRequest.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GetRequest::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mpr.chubby.GetRequest.key)
}
 void GetRequest::set_key(const char* value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mpr.chubby.GetRequest.key)
}
 void GetRequest::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mpr.chubby.GetRequest.key)
}
 ::std::string* GetRequest::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:mpr.chubby.GetRequest.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GetRequest::release_key() {
  // @@protoc_insertion_point(field_release:mpr.chubby.GetRequest.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GetRequest::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:mpr.chubby.GetRequest.key)
}

// optional string uuid = 2;
void GetRequest::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& GetRequest::uuid() const {
  // @@protoc_insertion_point(field_get:mpr.chubby.GetRequest.uuid)
  return uuid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GetRequest::set_uuid(const ::std::string& value) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mpr.chubby.GetRequest.uuid)
}
 void GetRequest::set_uuid(const char* value) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mpr.chubby.GetRequest.uuid)
}
 void GetRequest::set_uuid(const char* value, size_t size) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mpr.chubby.GetRequest.uuid)
}
 ::std::string* GetRequest::mutable_uuid() {
  
  // @@protoc_insertion_point(field_mutable:mpr.chubby.GetRequest.uuid)
  return uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GetRequest::release_uuid() {
  // @@protoc_insertion_point(field_release:mpr.chubby.GetRequest.uuid)
  
  return uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GetRequest::set_allocated_uuid(::std::string* uuid) {
  if (uuid != NULL) {
    
  } else {
    
  }
  uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:mpr.chubby.GetRequest.uuid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetResponse::kHitFieldNumber;
const int GetResponse::kValueFieldNumber;
const int GetResponse::kLeaderIdFieldNumber;
const int GetResponse::kSuccessFieldNumber;
const int GetResponse::kUuidExpiredFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetResponse::GetResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpr.chubby.GetResponse)
}

void GetResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

GetResponse::GetResponse(const GetResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mpr.chubby.GetResponse)
}

void GetResponse::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  hit_ = false;
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  leader_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  success_ = false;
  uuid_expired_ = false;
}

GetResponse::~GetResponse() {
  // @@protoc_insertion_point(destructor:mpr.chubby.GetResponse)
  SharedDtor();
}

void GetResponse::SharedDtor() {
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  leader_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void GetResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetResponse_descriptor_;
}

const GetResponse& GetResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2eproto();
  return *default_instance_;
}

GetResponse* GetResponse::default_instance_ = NULL;

GetResponse* GetResponse::New(::google::protobuf::Arena* arena) const {
  GetResponse* n = new GetResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mpr.chubby.GetResponse)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(GetResponse, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<GetResponse*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(hit_, uuid_expired_);
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  leader_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool GetResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpr.chubby.GetResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool hit = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hit_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // optional bytes value = 2;
      case 2: {
        if (tag == 18) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_leader_id;
        break;
      }

      // optional string leader_id = 3;
      case 3: {
        if (tag == 26) {
         parse_leader_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_leader_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->leader_id().data(), this->leader_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "mpr.chubby.GetResponse.leader_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_success;
        break;
      }

      // optional bool success = 4;
      case 4: {
        if (tag == 32) {
         parse_success:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_uuid_expired;
        break;
      }

      // optional bool uuid_expired = 5;
      case 5: {
        if (tag == 40) {
         parse_uuid_expired:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &uuid_expired_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpr.chubby.GetResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpr.chubby.GetResponse)
  return false;
#undef DO_
}

void GetResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpr.chubby.GetResponse)
  // optional bool hit = 1;
  if (this->hit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->hit(), output);
  }

  // optional bytes value = 2;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->value(), output);
  }

  // optional string leader_id = 3;
  if (this->leader_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->leader_id().data(), this->leader_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mpr.chubby.GetResponse.leader_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->leader_id(), output);
  }

  // optional bool success = 4;
  if (this->success() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->success(), output);
  }

  // optional bool uuid_expired = 5;
  if (this->uuid_expired() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->uuid_expired(), output);
  }

  // @@protoc_insertion_point(serialize_end:mpr.chubby.GetResponse)
}

::google::protobuf::uint8* GetResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mpr.chubby.GetResponse)
  // optional bool hit = 1;
  if (this->hit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->hit(), target);
  }

  // optional bytes value = 2;
  if (this->value().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->value(), target);
  }

  // optional string leader_id = 3;
  if (this->leader_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->leader_id().data(), this->leader_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mpr.chubby.GetResponse.leader_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->leader_id(), target);
  }

  // optional bool success = 4;
  if (this->success() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->success(), target);
  }

  // optional bool uuid_expired = 5;
  if (this->uuid_expired() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->uuid_expired(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:mpr.chubby.GetResponse)
  return target;
}

int GetResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:mpr.chubby.GetResponse)
  int total_size = 0;

  // optional bool hit = 1;
  if (this->hit() != 0) {
    total_size += 1 + 1;
  }

  // optional bytes value = 2;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->value());
  }

  // optional string leader_id = 3;
  if (this->leader_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->leader_id());
  }

  // optional bool success = 4;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  // optional bool uuid_expired = 5;
  if (this->uuid_expired() != 0) {
    total_size += 1 + 1;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mpr.chubby.GetResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const GetResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GetResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mpr.chubby.GetResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mpr.chubby.GetResponse)
    MergeFrom(*source);
  }
}

void GetResponse::MergeFrom(const GetResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mpr.chubby.GetResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.hit() != 0) {
    set_hit(from.hit());
  }
  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  if (from.leader_id().size() > 0) {

    leader_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.leader_id_);
  }
  if (from.success() != 0) {
    set_success(from.success());
  }
  if (from.uuid_expired() != 0) {
    set_uuid_expired(from.uuid_expired());
  }
}

void GetResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mpr.chubby.GetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetResponse::CopyFrom(const GetResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mpr.chubby.GetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetResponse::IsInitialized() const {

  return true;
}

void GetResponse::Swap(GetResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetResponse::InternalSwap(GetResponse* other) {
  std::swap(hit_, other->hit_);
  value_.Swap(&other->value_);
  leader_id_.Swap(&other->leader_id_);
  std::swap(success_, other->success_);
  std::swap(uuid_expired_, other->uuid_expired_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetResponse_descriptor_;
  metadata.reflection = GetResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetResponse

// optional bool hit = 1;
void GetResponse::clear_hit() {
  hit_ = false;
}
 bool GetResponse::hit() const {
  // @@protoc_insertion_point(field_get:mpr.chubby.GetResponse.hit)
  return hit_;
}
 void GetResponse::set_hit(bool value) {
  
  hit_ = value;
  // @@protoc_insertion_point(field_set:mpr.chubby.GetResponse.hit)
}

// optional bytes value = 2;
void GetResponse::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& GetResponse::value() const {
  // @@protoc_insertion_point(field_get:mpr.chubby.GetResponse.value)
  return value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GetResponse::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mpr.chubby.GetResponse.value)
}
 void GetResponse::set_value(const char* value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mpr.chubby.GetResponse.value)
}
 void GetResponse::set_value(const void* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mpr.chubby.GetResponse.value)
}
 ::std::string* GetResponse::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:mpr.chubby.GetResponse.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GetResponse::release_value() {
  // @@protoc_insertion_point(field_release:mpr.chubby.GetResponse.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GetResponse::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:mpr.chubby.GetResponse.value)
}

// optional string leader_id = 3;
void GetResponse::clear_leader_id() {
  leader_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& GetResponse::leader_id() const {
  // @@protoc_insertion_point(field_get:mpr.chubby.GetResponse.leader_id)
  return leader_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GetResponse::set_leader_id(const ::std::string& value) {
  
  leader_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mpr.chubby.GetResponse.leader_id)
}
 void GetResponse::set_leader_id(const char* value) {
  
  leader_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mpr.chubby.GetResponse.leader_id)
}
 void GetResponse::set_leader_id(const char* value, size_t size) {
  
  leader_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mpr.chubby.GetResponse.leader_id)
}
 ::std::string* GetResponse::mutable_leader_id() {
  
  // @@protoc_insertion_point(field_mutable:mpr.chubby.GetResponse.leader_id)
  return leader_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GetResponse::release_leader_id() {
  // @@protoc_insertion_point(field_release:mpr.chubby.GetResponse.leader_id)
  
  return leader_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GetResponse::set_allocated_leader_id(::std::string* leader_id) {
  if (leader_id != NULL) {
    
  } else {
    
  }
  leader_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), leader_id);
  // @@protoc_insertion_point(field_set_allocated:mpr.chubby.GetResponse.leader_id)
}

// optional bool success = 4;
void GetResponse::clear_success() {
  success_ = false;
}
 bool GetResponse::success() const {
  // @@protoc_insertion_point(field_get:mpr.chubby.GetResponse.success)
  return success_;
}
 void GetResponse::set_success(bool value) {
  
  success_ = value;
  // @@protoc_insertion_point(field_set:mpr.chubby.GetResponse.success)
}

// optional bool uuid_expired = 5;
void GetResponse::clear_uuid_expired() {
  uuid_expired_ = false;
}
 bool GetResponse::uuid_expired() const {
  // @@protoc_insertion_point(field_get:mpr.chubby.GetResponse.uuid_expired)
  return uuid_expired_;
}
 void GetResponse::set_uuid_expired(bool value) {
  
  uuid_expired_ = value;
  // @@protoc_insertion_point(field_set:mpr.chubby.GetResponse.uuid_expired)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DelRequest::kKeyFieldNumber;
const int DelRequest::kUuidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DelRequest::DelRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpr.chubby.DelRequest)
}

void DelRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

DelRequest::DelRequest(const DelRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mpr.chubby.DelRequest)
}

void DelRequest::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

DelRequest::~DelRequest() {
  // @@protoc_insertion_point(destructor:mpr.chubby.DelRequest)
  SharedDtor();
}

void DelRequest::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uuid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void DelRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DelRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DelRequest_descriptor_;
}

const DelRequest& DelRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2eproto();
  return *default_instance_;
}

DelRequest* DelRequest::default_instance_ = NULL;

DelRequest* DelRequest::New(::google::protobuf::Arena* arena) const {
  DelRequest* n = new DelRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DelRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mpr.chubby.DelRequest)
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool DelRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpr.chubby.DelRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "mpr.chubby.DelRequest.key"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_uuid;
        break;
      }

      // optional string uuid = 2;
      case 2: {
        if (tag == 18) {
         parse_uuid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uuid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->uuid().data(), this->uuid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "mpr.chubby.DelRequest.uuid"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpr.chubby.DelRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpr.chubby.DelRequest)
  return false;
#undef DO_
}

void DelRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpr.chubby.DelRequest)
  // optional string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mpr.chubby.DelRequest.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // optional string uuid = 2;
  if (this->uuid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mpr.chubby.DelRequest.uuid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->uuid(), output);
  }

  // @@protoc_insertion_point(serialize_end:mpr.chubby.DelRequest)
}

::google::protobuf::uint8* DelRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mpr.chubby.DelRequest)
  // optional string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mpr.chubby.DelRequest.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // optional string uuid = 2;
  if (this->uuid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mpr.chubby.DelRequest.uuid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->uuid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:mpr.chubby.DelRequest)
  return target;
}

int DelRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:mpr.chubby.DelRequest)
  int total_size = 0;

  // optional string key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());
  }

  // optional string uuid = 2;
  if (this->uuid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->uuid());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DelRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mpr.chubby.DelRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const DelRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DelRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mpr.chubby.DelRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mpr.chubby.DelRequest)
    MergeFrom(*source);
  }
}

void DelRequest::MergeFrom(const DelRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mpr.chubby.DelRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.uuid().size() > 0) {

    uuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uuid_);
  }
}

void DelRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mpr.chubby.DelRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DelRequest::CopyFrom(const DelRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mpr.chubby.DelRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DelRequest::IsInitialized() const {

  return true;
}

void DelRequest::Swap(DelRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DelRequest::InternalSwap(DelRequest* other) {
  key_.Swap(&other->key_);
  uuid_.Swap(&other->uuid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DelRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DelRequest_descriptor_;
  metadata.reflection = DelRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DelRequest

// optional string key = 1;
void DelRequest::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& DelRequest::key() const {
  // @@protoc_insertion_point(field_get:mpr.chubby.DelRequest.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DelRequest::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mpr.chubby.DelRequest.key)
}
 void DelRequest::set_key(const char* value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mpr.chubby.DelRequest.key)
}
 void DelRequest::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mpr.chubby.DelRequest.key)
}
 ::std::string* DelRequest::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:mpr.chubby.DelRequest.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DelRequest::release_key() {
  // @@protoc_insertion_point(field_release:mpr.chubby.DelRequest.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DelRequest::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:mpr.chubby.DelRequest.key)
}

// optional string uuid = 2;
void DelRequest::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& DelRequest::uuid() const {
  // @@protoc_insertion_point(field_get:mpr.chubby.DelRequest.uuid)
  return uuid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DelRequest::set_uuid(const ::std::string& value) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mpr.chubby.DelRequest.uuid)
}
 void DelRequest::set_uuid(const char* value) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mpr.chubby.DelRequest.uuid)
}
 void DelRequest::set_uuid(const char* value, size_t size) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mpr.chubby.DelRequest.uuid)
}
 ::std::string* DelRequest::mutable_uuid() {
  
  // @@protoc_insertion_point(field_mutable:mpr.chubby.DelRequest.uuid)
  return uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DelRequest::release_uuid() {
  // @@protoc_insertion_point(field_release:mpr.chubby.DelRequest.uuid)
  
  return uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DelRequest::set_allocated_uuid(::std::string* uuid) {
  if (uuid != NULL) {
    
  } else {
    
  }
  uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:mpr.chubby.DelRequest.uuid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DelResponse::kSuccessFieldNumber;
const int DelResponse::kLeaderIdFieldNumber;
const int DelResponse::kUuidExpiredFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DelResponse::DelResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpr.chubby.DelResponse)
}

void DelResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

DelResponse::DelResponse(const DelResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mpr.chubby.DelResponse)
}

void DelResponse::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  success_ = false;
  leader_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uuid_expired_ = false;
}

DelResponse::~DelResponse() {
  // @@protoc_insertion_point(destructor:mpr.chubby.DelResponse)
  SharedDtor();
}

void DelResponse::SharedDtor() {
  leader_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void DelResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DelResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DelResponse_descriptor_;
}

const DelResponse& DelResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2eproto();
  return *default_instance_;
}

DelResponse* DelResponse::default_instance_ = NULL;

DelResponse* DelResponse::New(::google::protobuf::Arena* arena) const {
  DelResponse* n = new DelResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DelResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mpr.chubby.DelResponse)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(DelResponse, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<DelResponse*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(success_, uuid_expired_);
  leader_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool DelResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpr.chubby.DelResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool success = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_leader_id;
        break;
      }

      // optional string leader_id = 2;
      case 2: {
        if (tag == 18) {
         parse_leader_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_leader_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->leader_id().data(), this->leader_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "mpr.chubby.DelResponse.leader_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_uuid_expired;
        break;
      }

      // optional bool uuid_expired = 3;
      case 3: {
        if (tag == 24) {
         parse_uuid_expired:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &uuid_expired_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpr.chubby.DelResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpr.chubby.DelResponse)
  return false;
#undef DO_
}

void DelResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpr.chubby.DelResponse)
  // optional bool success = 1;
  if (this->success() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->success(), output);
  }

  // optional string leader_id = 2;
  if (this->leader_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->leader_id().data(), this->leader_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mpr.chubby.DelResponse.leader_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->leader_id(), output);
  }

  // optional bool uuid_expired = 3;
  if (this->uuid_expired() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->uuid_expired(), output);
  }

  // @@protoc_insertion_point(serialize_end:mpr.chubby.DelResponse)
}

::google::protobuf::uint8* DelResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mpr.chubby.DelResponse)
  // optional bool success = 1;
  if (this->success() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->success(), target);
  }

  // optional string leader_id = 2;
  if (this->leader_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->leader_id().data(), this->leader_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mpr.chubby.DelResponse.leader_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->leader_id(), target);
  }

  // optional bool uuid_expired = 3;
  if (this->uuid_expired() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->uuid_expired(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:mpr.chubby.DelResponse)
  return target;
}

int DelResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:mpr.chubby.DelResponse)
  int total_size = 0;

  // optional bool success = 1;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  // optional string leader_id = 2;
  if (this->leader_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->leader_id());
  }

  // optional bool uuid_expired = 3;
  if (this->uuid_expired() != 0) {
    total_size += 1 + 1;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DelResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mpr.chubby.DelResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const DelResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DelResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mpr.chubby.DelResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mpr.chubby.DelResponse)
    MergeFrom(*source);
  }
}

void DelResponse::MergeFrom(const DelResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mpr.chubby.DelResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.success() != 0) {
    set_success(from.success());
  }
  if (from.leader_id().size() > 0) {

    leader_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.leader_id_);
  }
  if (from.uuid_expired() != 0) {
    set_uuid_expired(from.uuid_expired());
  }
}

void DelResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mpr.chubby.DelResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DelResponse::CopyFrom(const DelResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mpr.chubby.DelResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DelResponse::IsInitialized() const {

  return true;
}

void DelResponse::Swap(DelResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DelResponse::InternalSwap(DelResponse* other) {
  std::swap(success_, other->success_);
  leader_id_.Swap(&other->leader_id_);
  std::swap(uuid_expired_, other->uuid_expired_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DelResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DelResponse_descriptor_;
  metadata.reflection = DelResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DelResponse

// optional bool success = 1;
void DelResponse::clear_success() {
  success_ = false;
}
 bool DelResponse::success() const {
  // @@protoc_insertion_point(field_get:mpr.chubby.DelResponse.success)
  return success_;
}
 void DelResponse::set_success(bool value) {
  
  success_ = value;
  // @@protoc_insertion_point(field_set:mpr.chubby.DelResponse.success)
}

// optional string leader_id = 2;
void DelResponse::clear_leader_id() {
  leader_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& DelResponse::leader_id() const {
  // @@protoc_insertion_point(field_get:mpr.chubby.DelResponse.leader_id)
  return leader_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DelResponse::set_leader_id(const ::std::string& value) {
  
  leader_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mpr.chubby.DelResponse.leader_id)
}
 void DelResponse::set_leader_id(const char* value) {
  
  leader_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mpr.chubby.DelResponse.leader_id)
}
 void DelResponse::set_leader_id(const char* value, size_t size) {
  
  leader_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mpr.chubby.DelResponse.leader_id)
}
 ::std::string* DelResponse::mutable_leader_id() {
  
  // @@protoc_insertion_point(field_mutable:mpr.chubby.DelResponse.leader_id)
  return leader_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DelResponse::release_leader_id() {
  // @@protoc_insertion_point(field_release:mpr.chubby.DelResponse.leader_id)
  
  return leader_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DelResponse::set_allocated_leader_id(::std::string* leader_id) {
  if (leader_id != NULL) {
    
  } else {
    
  }
  leader_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), leader_id);
  // @@protoc_insertion_point(field_set_allocated:mpr.chubby.DelResponse.leader_id)
}

// optional bool uuid_expired = 3;
void DelResponse::clear_uuid_expired() {
  uuid_expired_ = false;
}
 bool DelResponse::uuid_expired() const {
  // @@protoc_insertion_point(field_get:mpr.chubby.DelResponse.uuid_expired)
  return uuid_expired_;
}
 void DelResponse::set_uuid_expired(bool value) {
  
  uuid_expired_ = value;
  // @@protoc_insertion_point(field_set:mpr.chubby.DelResponse.uuid_expired)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UnLockRequest::kKeyFieldNumber;
const int UnLockRequest::kSessionIdFieldNumber;
const int UnLockRequest::kUuidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UnLockRequest::UnLockRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpr.chubby.UnLockRequest)
}

void UnLockRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

UnLockRequest::UnLockRequest(const UnLockRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mpr.chubby.UnLockRequest)
}

void UnLockRequest::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  session_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

UnLockRequest::~UnLockRequest() {
  // @@protoc_insertion_point(destructor:mpr.chubby.UnLockRequest)
  SharedDtor();
}

void UnLockRequest::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  session_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uuid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void UnLockRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UnLockRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UnLockRequest_descriptor_;
}

const UnLockRequest& UnLockRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2eproto();
  return *default_instance_;
}

UnLockRequest* UnLockRequest::default_instance_ = NULL;

UnLockRequest* UnLockRequest::New(::google::protobuf::Arena* arena) const {
  UnLockRequest* n = new UnLockRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UnLockRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mpr.chubby.UnLockRequest)
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  session_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool UnLockRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpr.chubby.UnLockRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "mpr.chubby.UnLockRequest.key"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_session_id;
        break;
      }

      // optional string session_id = 2;
      case 2: {
        if (tag == 18) {
         parse_session_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->session_id().data(), this->session_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "mpr.chubby.UnLockRequest.session_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_uuid;
        break;
      }

      // optional string uuid = 3;
      case 3: {
        if (tag == 26) {
         parse_uuid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uuid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->uuid().data(), this->uuid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "mpr.chubby.UnLockRequest.uuid"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpr.chubby.UnLockRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpr.chubby.UnLockRequest)
  return false;
#undef DO_
}

void UnLockRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpr.chubby.UnLockRequest)
  // optional string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mpr.chubby.UnLockRequest.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // optional string session_id = 2;
  if (this->session_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->session_id().data(), this->session_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mpr.chubby.UnLockRequest.session_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->session_id(), output);
  }

  // optional string uuid = 3;
  if (this->uuid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mpr.chubby.UnLockRequest.uuid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->uuid(), output);
  }

  // @@protoc_insertion_point(serialize_end:mpr.chubby.UnLockRequest)
}

::google::protobuf::uint8* UnLockRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mpr.chubby.UnLockRequest)
  // optional string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mpr.chubby.UnLockRequest.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // optional string session_id = 2;
  if (this->session_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->session_id().data(), this->session_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mpr.chubby.UnLockRequest.session_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->session_id(), target);
  }

  // optional string uuid = 3;
  if (this->uuid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mpr.chubby.UnLockRequest.uuid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->uuid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:mpr.chubby.UnLockRequest)
  return target;
}

int UnLockRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:mpr.chubby.UnLockRequest)
  int total_size = 0;

  // optional string key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());
  }

  // optional string session_id = 2;
  if (this->session_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->session_id());
  }

  // optional string uuid = 3;
  if (this->uuid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->uuid());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UnLockRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mpr.chubby.UnLockRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const UnLockRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const UnLockRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mpr.chubby.UnLockRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mpr.chubby.UnLockRequest)
    MergeFrom(*source);
  }
}

void UnLockRequest::MergeFrom(const UnLockRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mpr.chubby.UnLockRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.session_id().size() > 0) {

    session_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.session_id_);
  }
  if (from.uuid().size() > 0) {

    uuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uuid_);
  }
}

void UnLockRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mpr.chubby.UnLockRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnLockRequest::CopyFrom(const UnLockRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mpr.chubby.UnLockRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnLockRequest::IsInitialized() const {

  return true;
}

void UnLockRequest::Swap(UnLockRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UnLockRequest::InternalSwap(UnLockRequest* other) {
  key_.Swap(&other->key_);
  session_id_.Swap(&other->session_id_);
  uuid_.Swap(&other->uuid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UnLockRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UnLockRequest_descriptor_;
  metadata.reflection = UnLockRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UnLockRequest

// optional string key = 1;
void UnLockRequest::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& UnLockRequest::key() const {
  // @@protoc_insertion_point(field_get:mpr.chubby.UnLockRequest.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UnLockRequest::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mpr.chubby.UnLockRequest.key)
}
 void UnLockRequest::set_key(const char* value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mpr.chubby.UnLockRequest.key)
}
 void UnLockRequest::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mpr.chubby.UnLockRequest.key)
}
 ::std::string* UnLockRequest::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:mpr.chubby.UnLockRequest.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* UnLockRequest::release_key() {
  // @@protoc_insertion_point(field_release:mpr.chubby.UnLockRequest.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UnLockRequest::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:mpr.chubby.UnLockRequest.key)
}

// optional string session_id = 2;
void UnLockRequest::clear_session_id() {
  session_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& UnLockRequest::session_id() const {
  // @@protoc_insertion_point(field_get:mpr.chubby.UnLockRequest.session_id)
  return session_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UnLockRequest::set_session_id(const ::std::string& value) {
  
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mpr.chubby.UnLockRequest.session_id)
}
 void UnLockRequest::set_session_id(const char* value) {
  
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mpr.chubby.UnLockRequest.session_id)
}
 void UnLockRequest::set_session_id(const char* value, size_t size) {
  
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mpr.chubby.UnLockRequest.session_id)
}
 ::std::string* UnLockRequest::mutable_session_id() {
  
  // @@protoc_insertion_point(field_mutable:mpr.chubby.UnLockRequest.session_id)
  return session_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* UnLockRequest::release_session_id() {
  // @@protoc_insertion_point(field_release:mpr.chubby.UnLockRequest.session_id)
  
  return session_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UnLockRequest::set_allocated_session_id(::std::string* session_id) {
  if (session_id != NULL) {
    
  } else {
    
  }
  session_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), session_id);
  // @@protoc_insertion_point(field_set_allocated:mpr.chubby.UnLockRequest.session_id)
}

// optional string uuid = 3;
void UnLockRequest::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& UnLockRequest::uuid() const {
  // @@protoc_insertion_point(field_get:mpr.chubby.UnLockRequest.uuid)
  return uuid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UnLockRequest::set_uuid(const ::std::string& value) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mpr.chubby.UnLockRequest.uuid)
}
 void UnLockRequest::set_uuid(const char* value) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mpr.chubby.UnLockRequest.uuid)
}
 void UnLockRequest::set_uuid(const char* value, size_t size) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mpr.chubby.UnLockRequest.uuid)
}
 ::std::string* UnLockRequest::mutable_uuid() {
  
  // @@protoc_insertion_point(field_mutable:mpr.chubby.UnLockRequest.uuid)
  return uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* UnLockRequest::release_uuid() {
  // @@protoc_insertion_point(field_release:mpr.chubby.UnLockRequest.uuid)
  
  return uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UnLockRequest::set_allocated_uuid(::std::string* uuid) {
  if (uuid != NULL) {
    
  } else {
    
  }
  uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:mpr.chubby.UnLockRequest.uuid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UnLockResponse::kSuccessFieldNumber;
const int UnLockResponse::kLeaderIdFieldNumber;
const int UnLockResponse::kUuidExpiredFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UnLockResponse::UnLockResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpr.chubby.UnLockResponse)
}

void UnLockResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

UnLockResponse::UnLockResponse(const UnLockResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mpr.chubby.UnLockResponse)
}

void UnLockResponse::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  success_ = false;
  leader_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uuid_expired_ = false;
}

UnLockResponse::~UnLockResponse() {
  // @@protoc_insertion_point(destructor:mpr.chubby.UnLockResponse)
  SharedDtor();
}

void UnLockResponse::SharedDtor() {
  leader_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void UnLockResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UnLockResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UnLockResponse_descriptor_;
}

const UnLockResponse& UnLockResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2eproto();
  return *default_instance_;
}

UnLockResponse* UnLockResponse::default_instance_ = NULL;

UnLockResponse* UnLockResponse::New(::google::protobuf::Arena* arena) const {
  UnLockResponse* n = new UnLockResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UnLockResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mpr.chubby.UnLockResponse)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(UnLockResponse, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<UnLockResponse*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(success_, uuid_expired_);
  leader_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool UnLockResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpr.chubby.UnLockResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool success = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_leader_id;
        break;
      }

      // optional string leader_id = 2;
      case 2: {
        if (tag == 18) {
         parse_leader_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_leader_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->leader_id().data(), this->leader_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "mpr.chubby.UnLockResponse.leader_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_uuid_expired;
        break;
      }

      // optional bool uuid_expired = 3;
      case 3: {
        if (tag == 24) {
         parse_uuid_expired:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &uuid_expired_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpr.chubby.UnLockResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpr.chubby.UnLockResponse)
  return false;
#undef DO_
}

void UnLockResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpr.chubby.UnLockResponse)
  // optional bool success = 1;
  if (this->success() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->success(), output);
  }

  // optional string leader_id = 2;
  if (this->leader_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->leader_id().data(), this->leader_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mpr.chubby.UnLockResponse.leader_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->leader_id(), output);
  }

  // optional bool uuid_expired = 3;
  if (this->uuid_expired() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->uuid_expired(), output);
  }

  // @@protoc_insertion_point(serialize_end:mpr.chubby.UnLockResponse)
}

::google::protobuf::uint8* UnLockResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mpr.chubby.UnLockResponse)
  // optional bool success = 1;
  if (this->success() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->success(), target);
  }

  // optional string leader_id = 2;
  if (this->leader_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->leader_id().data(), this->leader_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mpr.chubby.UnLockResponse.leader_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->leader_id(), target);
  }

  // optional bool uuid_expired = 3;
  if (this->uuid_expired() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->uuid_expired(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:mpr.chubby.UnLockResponse)
  return target;
}

int UnLockResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:mpr.chubby.UnLockResponse)
  int total_size = 0;

  // optional bool success = 1;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  // optional string leader_id = 2;
  if (this->leader_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->leader_id());
  }

  // optional bool uuid_expired = 3;
  if (this->uuid_expired() != 0) {
    total_size += 1 + 1;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UnLockResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mpr.chubby.UnLockResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const UnLockResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const UnLockResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mpr.chubby.UnLockResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mpr.chubby.UnLockResponse)
    MergeFrom(*source);
  }
}

void UnLockResponse::MergeFrom(const UnLockResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mpr.chubby.UnLockResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.success() != 0) {
    set_success(from.success());
  }
  if (from.leader_id().size() > 0) {

    leader_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.leader_id_);
  }
  if (from.uuid_expired() != 0) {
    set_uuid_expired(from.uuid_expired());
  }
}

void UnLockResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mpr.chubby.UnLockResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnLockResponse::CopyFrom(const UnLockResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mpr.chubby.UnLockResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnLockResponse::IsInitialized() const {

  return true;
}

void UnLockResponse::Swap(UnLockResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UnLockResponse::InternalSwap(UnLockResponse* other) {
  std::swap(success_, other->success_);
  leader_id_.Swap(&other->leader_id_);
  std::swap(uuid_expired_, other->uuid_expired_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UnLockResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UnLockResponse_descriptor_;
  metadata.reflection = UnLockResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UnLockResponse

// optional bool success = 1;
void UnLockResponse::clear_success() {
  success_ = false;
}
 bool UnLockResponse::success() const {
  // @@protoc_insertion_point(field_get:mpr.chubby.UnLockResponse.success)
  return success_;
}
 void UnLockResponse::set_success(bool value) {
  
  success_ = value;
  // @@protoc_insertion_point(field_set:mpr.chubby.UnLockResponse.success)
}

// optional string leader_id = 2;
void UnLockResponse::clear_leader_id() {
  leader_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& UnLockResponse::leader_id() const {
  // @@protoc_insertion_point(field_get:mpr.chubby.UnLockResponse.leader_id)
  return leader_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UnLockResponse::set_leader_id(const ::std::string& value) {
  
  leader_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mpr.chubby.UnLockResponse.leader_id)
}
 void UnLockResponse::set_leader_id(const char* value) {
  
  leader_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mpr.chubby.UnLockResponse.leader_id)
}
 void UnLockResponse::set_leader_id(const char* value, size_t size) {
  
  leader_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mpr.chubby.UnLockResponse.leader_id)
}
 ::std::string* UnLockResponse::mutable_leader_id() {
  
  // @@protoc_insertion_point(field_mutable:mpr.chubby.UnLockResponse.leader_id)
  return leader_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* UnLockResponse::release_leader_id() {
  // @@protoc_insertion_point(field_release:mpr.chubby.UnLockResponse.leader_id)
  
  return leader_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UnLockResponse::set_allocated_leader_id(::std::string* leader_id) {
  if (leader_id != NULL) {
    
  } else {
    
  }
  leader_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), leader_id);
  // @@protoc_insertion_point(field_set_allocated:mpr.chubby.UnLockResponse.leader_id)
}

// optional bool uuid_expired = 3;
void UnLockResponse::clear_uuid_expired() {
  uuid_expired_ = false;
}
 bool UnLockResponse::uuid_expired() const {
  // @@protoc_insertion_point(field_get:mpr.chubby.UnLockResponse.uuid_expired)
  return uuid_expired_;
}
 void UnLockResponse::set_uuid_expired(bool value) {
  
  uuid_expired_ = value;
  // @@protoc_insertion_point(field_set:mpr.chubby.UnLockResponse.uuid_expired)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ShowStatusRequest::ShowStatusRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpr.chubby.ShowStatusRequest)
}

void ShowStatusRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ShowStatusRequest::ShowStatusRequest(const ShowStatusRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mpr.chubby.ShowStatusRequest)
}

void ShowStatusRequest::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

ShowStatusRequest::~ShowStatusRequest() {
  // @@protoc_insertion_point(destructor:mpr.chubby.ShowStatusRequest)
  SharedDtor();
}

void ShowStatusRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ShowStatusRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShowStatusRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShowStatusRequest_descriptor_;
}

const ShowStatusRequest& ShowStatusRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2eproto();
  return *default_instance_;
}

ShowStatusRequest* ShowStatusRequest::default_instance_ = NULL;

ShowStatusRequest* ShowStatusRequest::New(::google::protobuf::Arena* arena) const {
  ShowStatusRequest* n = new ShowStatusRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ShowStatusRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mpr.chubby.ShowStatusRequest)
}

bool ShowStatusRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpr.chubby.ShowStatusRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:mpr.chubby.ShowStatusRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpr.chubby.ShowStatusRequest)
  return false;
#undef DO_
}

void ShowStatusRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpr.chubby.ShowStatusRequest)
  // @@protoc_insertion_point(serialize_end:mpr.chubby.ShowStatusRequest)
}

::google::protobuf::uint8* ShowStatusRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mpr.chubby.ShowStatusRequest)
  // @@protoc_insertion_point(serialize_to_array_end:mpr.chubby.ShowStatusRequest)
  return target;
}

int ShowStatusRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:mpr.chubby.ShowStatusRequest)
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShowStatusRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mpr.chubby.ShowStatusRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ShowStatusRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ShowStatusRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mpr.chubby.ShowStatusRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mpr.chubby.ShowStatusRequest)
    MergeFrom(*source);
  }
}

void ShowStatusRequest::MergeFrom(const ShowStatusRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mpr.chubby.ShowStatusRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
}

void ShowStatusRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mpr.chubby.ShowStatusRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShowStatusRequest::CopyFrom(const ShowStatusRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mpr.chubby.ShowStatusRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShowStatusRequest::IsInitialized() const {

  return true;
}

void ShowStatusRequest::Swap(ShowStatusRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ShowStatusRequest::InternalSwap(ShowStatusRequest* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ShowStatusRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ShowStatusRequest_descriptor_;
  metadata.reflection = ShowStatusRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ShowStatusRequest

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ShowStatusResponse::kStatusFieldNumber;
const int ShowStatusResponse::kTermFieldNumber;
const int ShowStatusResponse::kLastLogIndexFieldNumber;
const int ShowStatusResponse::kLastLogTermFieldNumber;
const int ShowStatusResponse::kCommitIndexFieldNumber;
const int ShowStatusResponse::kLastAppliedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ShowStatusResponse::ShowStatusResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpr.chubby.ShowStatusResponse)
}

void ShowStatusResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ShowStatusResponse::ShowStatusResponse(const ShowStatusResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mpr.chubby.ShowStatusResponse)
}

void ShowStatusResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  status_ = 0;
  term_ = GOOGLE_LONGLONG(0);
  last_log_index_ = GOOGLE_LONGLONG(0);
  last_log_term_ = GOOGLE_LONGLONG(0);
  commit_index_ = GOOGLE_LONGLONG(0);
  last_applied_ = GOOGLE_LONGLONG(0);
}

ShowStatusResponse::~ShowStatusResponse() {
  // @@protoc_insertion_point(destructor:mpr.chubby.ShowStatusResponse)
  SharedDtor();
}

void ShowStatusResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ShowStatusResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShowStatusResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShowStatusResponse_descriptor_;
}

const ShowStatusResponse& ShowStatusResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2eproto();
  return *default_instance_;
}

ShowStatusResponse* ShowStatusResponse::default_instance_ = NULL;

ShowStatusResponse* ShowStatusResponse::New(::google::protobuf::Arena* arena) const {
  ShowStatusResponse* n = new ShowStatusResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ShowStatusResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mpr.chubby.ShowStatusResponse)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ShowStatusResponse, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ShowStatusResponse*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(term_, status_);

#undef ZR_HELPER_
#undef ZR_

}

bool ShowStatusResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpr.chubby.ShowStatusResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .mpr.chubby.NodeStatus status = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::mpr::chubby::NodeStatus >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_term;
        break;
      }

      // optional int64 term = 2;
      case 2: {
        if (tag == 16) {
         parse_term:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &term_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_last_log_index;
        break;
      }

      // optional int64 last_log_index = 3;
      case 3: {
        if (tag == 24) {
         parse_last_log_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_log_index_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_last_log_term;
        break;
      }

      // optional int64 last_log_term = 4;
      case 4: {
        if (tag == 32) {
         parse_last_log_term:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_log_term_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_commit_index;
        break;
      }

      // optional int64 commit_index = 5;
      case 5: {
        if (tag == 40) {
         parse_commit_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &commit_index_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_last_applied;
        break;
      }

      // optional int64 last_applied = 6;
      case 6: {
        if (tag == 48) {
         parse_last_applied:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_applied_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpr.chubby.ShowStatusResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpr.chubby.ShowStatusResponse)
  return false;
#undef DO_
}

void ShowStatusResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpr.chubby.ShowStatusResponse)
  // optional .mpr.chubby.NodeStatus status = 1;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  // optional int64 term = 2;
  if (this->term() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->term(), output);
  }

  // optional int64 last_log_index = 3;
  if (this->last_log_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->last_log_index(), output);
  }

  // optional int64 last_log_term = 4;
  if (this->last_log_term() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->last_log_term(), output);
  }

  // optional int64 commit_index = 5;
  if (this->commit_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->commit_index(), output);
  }

  // optional int64 last_applied = 6;
  if (this->last_applied() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->last_applied(), output);
  }

  // @@protoc_insertion_point(serialize_end:mpr.chubby.ShowStatusResponse)
}

::google::protobuf::uint8* ShowStatusResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mpr.chubby.ShowStatusResponse)
  // optional .mpr.chubby.NodeStatus status = 1;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  // optional int64 term = 2;
  if (this->term() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->term(), target);
  }

  // optional int64 last_log_index = 3;
  if (this->last_log_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->last_log_index(), target);
  }

  // optional int64 last_log_term = 4;
  if (this->last_log_term() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->last_log_term(), target);
  }

  // optional int64 commit_index = 5;
  if (this->commit_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->commit_index(), target);
  }

  // optional int64 last_applied = 6;
  if (this->last_applied() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->last_applied(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:mpr.chubby.ShowStatusResponse)
  return target;
}

int ShowStatusResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:mpr.chubby.ShowStatusResponse)
  int total_size = 0;

  // optional .mpr.chubby.NodeStatus status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  // optional int64 term = 2;
  if (this->term() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->term());
  }

  // optional int64 last_log_index = 3;
  if (this->last_log_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->last_log_index());
  }

  // optional int64 last_log_term = 4;
  if (this->last_log_term() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->last_log_term());
  }

  // optional int64 commit_index = 5;
  if (this->commit_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->commit_index());
  }

  // optional int64 last_applied = 6;
  if (this->last_applied() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->last_applied());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShowStatusResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mpr.chubby.ShowStatusResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ShowStatusResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ShowStatusResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mpr.chubby.ShowStatusResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mpr.chubby.ShowStatusResponse)
    MergeFrom(*source);
  }
}

void ShowStatusResponse::MergeFrom(const ShowStatusResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mpr.chubby.ShowStatusResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
  if (from.term() != 0) {
    set_term(from.term());
  }
  if (from.last_log_index() != 0) {
    set_last_log_index(from.last_log_index());
  }
  if (from.last_log_term() != 0) {
    set_last_log_term(from.last_log_term());
  }
  if (from.commit_index() != 0) {
    set_commit_index(from.commit_index());
  }
  if (from.last_applied() != 0) {
    set_last_applied(from.last_applied());
  }
}

void ShowStatusResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mpr.chubby.ShowStatusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShowStatusResponse::CopyFrom(const ShowStatusResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mpr.chubby.ShowStatusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShowStatusResponse::IsInitialized() const {

  return true;
}

void ShowStatusResponse::Swap(ShowStatusResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ShowStatusResponse::InternalSwap(ShowStatusResponse* other) {
  std::swap(status_, other->status_);
  std::swap(term_, other->term_);
  std::swap(last_log_index_, other->last_log_index_);
  std::swap(last_log_term_, other->last_log_term_);
  std::swap(commit_index_, other->commit_index_);
  std::swap(last_applied_, other->last_applied_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ShowStatusResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ShowStatusResponse_descriptor_;
  metadata.reflection = ShowStatusResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ShowStatusResponse

// optional .mpr.chubby.NodeStatus status = 1;
void ShowStatusResponse::clear_status() {
  status_ = 0;
}
 ::mpr::chubby::NodeStatus ShowStatusResponse::status() const {
  // @@protoc_insertion_point(field_get:mpr.chubby.ShowStatusResponse.status)
  return static_cast< ::mpr::chubby::NodeStatus >(status_);
}
 void ShowStatusResponse::set_status(::mpr::chubby::NodeStatus value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:mpr.chubby.ShowStatusResponse.status)
}

// optional int64 term = 2;
void ShowStatusResponse::clear_term() {
  term_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 ShowStatusResponse::term() const {
  // @@protoc_insertion_point(field_get:mpr.chubby.ShowStatusResponse.term)
  return term_;
}
 void ShowStatusResponse::set_term(::google::protobuf::int64 value) {
  
  term_ = value;
  // @@protoc_insertion_point(field_set:mpr.chubby.ShowStatusResponse.term)
}

// optional int64 last_log_index = 3;
void ShowStatusResponse::clear_last_log_index() {
  last_log_index_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 ShowStatusResponse::last_log_index() const {
  // @@protoc_insertion_point(field_get:mpr.chubby.ShowStatusResponse.last_log_index)
  return last_log_index_;
}
 void ShowStatusResponse::set_last_log_index(::google::protobuf::int64 value) {
  
  last_log_index_ = value;
  // @@protoc_insertion_point(field_set:mpr.chubby.ShowStatusResponse.last_log_index)
}

// optional int64 last_log_term = 4;
void ShowStatusResponse::clear_last_log_term() {
  last_log_term_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 ShowStatusResponse::last_log_term() const {
  // @@protoc_insertion_point(field_get:mpr.chubby.ShowStatusResponse.last_log_term)
  return last_log_term_;
}
 void ShowStatusResponse::set_last_log_term(::google::protobuf::int64 value) {
  
  last_log_term_ = value;
  // @@protoc_insertion_point(field_set:mpr.chubby.ShowStatusResponse.last_log_term)
}

// optional int64 commit_index = 5;
void ShowStatusResponse::clear_commit_index() {
  commit_index_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 ShowStatusResponse::commit_index() const {
  // @@protoc_insertion_point(field_get:mpr.chubby.ShowStatusResponse.commit_index)
  return commit_index_;
}
 void ShowStatusResponse::set_commit_index(::google::protobuf::int64 value) {
  
  commit_index_ = value;
  // @@protoc_insertion_point(field_set:mpr.chubby.ShowStatusResponse.commit_index)
}

// optional int64 last_applied = 6;
void ShowStatusResponse::clear_last_applied() {
  last_applied_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 ShowStatusResponse::last_applied() const {
  // @@protoc_insertion_point(field_get:mpr.chubby.ShowStatusResponse.last_applied)
  return last_applied_;
}
 void ShowStatusResponse::set_last_applied(::google::protobuf::int64 value) {
  
  last_applied_ = value;
  // @@protoc_insertion_point(field_set:mpr.chubby.ShowStatusResponse.last_applied)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ScanRequest::kStartKeyFieldNumber;
const int ScanRequest::kEndKeyFieldNumber;
const int ScanRequest::kSizeLimitFieldNumber;
const int ScanRequest::kUuidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ScanRequest::ScanRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpr.chubby.ScanRequest)
}

void ScanRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ScanRequest::ScanRequest(const ScanRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mpr.chubby.ScanRequest)
}

void ScanRequest::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  start_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  size_limit_ = 0;
  uuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ScanRequest::~ScanRequest() {
  // @@protoc_insertion_point(destructor:mpr.chubby.ScanRequest)
  SharedDtor();
}

void ScanRequest::SharedDtor() {
  start_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uuid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ScanRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ScanRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ScanRequest_descriptor_;
}

const ScanRequest& ScanRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2eproto();
  return *default_instance_;
}

ScanRequest* ScanRequest::default_instance_ = NULL;

ScanRequest* ScanRequest::New(::google::protobuf::Arena* arena) const {
  ScanRequest* n = new ScanRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ScanRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mpr.chubby.ScanRequest)
  start_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  size_limit_ = 0;
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ScanRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpr.chubby.ScanRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string start_key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_start_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->start_key().data(), this->start_key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "mpr.chubby.ScanRequest.start_key"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_end_key;
        break;
      }

      // optional bytes end_key = 2;
      case 2: {
        if (tag == 18) {
         parse_end_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_end_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_size_limit;
        break;
      }

      // optional int32 size_limit = 3;
      case 3: {
        if (tag == 24) {
         parse_size_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &size_limit_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_uuid;
        break;
      }

      // optional string uuid = 4;
      case 4: {
        if (tag == 34) {
         parse_uuid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uuid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->uuid().data(), this->uuid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "mpr.chubby.ScanRequest.uuid"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpr.chubby.ScanRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpr.chubby.ScanRequest)
  return false;
#undef DO_
}

void ScanRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpr.chubby.ScanRequest)
  // optional string start_key = 1;
  if (this->start_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->start_key().data(), this->start_key().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mpr.chubby.ScanRequest.start_key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->start_key(), output);
  }

  // optional bytes end_key = 2;
  if (this->end_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->end_key(), output);
  }

  // optional int32 size_limit = 3;
  if (this->size_limit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->size_limit(), output);
  }

  // optional string uuid = 4;
  if (this->uuid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mpr.chubby.ScanRequest.uuid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->uuid(), output);
  }

  // @@protoc_insertion_point(serialize_end:mpr.chubby.ScanRequest)
}

::google::protobuf::uint8* ScanRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mpr.chubby.ScanRequest)
  // optional string start_key = 1;
  if (this->start_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->start_key().data(), this->start_key().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mpr.chubby.ScanRequest.start_key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->start_key(), target);
  }

  // optional bytes end_key = 2;
  if (this->end_key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->end_key(), target);
  }

  // optional int32 size_limit = 3;
  if (this->size_limit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->size_limit(), target);
  }

  // optional string uuid = 4;
  if (this->uuid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mpr.chubby.ScanRequest.uuid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->uuid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:mpr.chubby.ScanRequest)
  return target;
}

int ScanRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:mpr.chubby.ScanRequest)
  int total_size = 0;

  // optional string start_key = 1;
  if (this->start_key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->start_key());
  }

  // optional bytes end_key = 2;
  if (this->end_key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->end_key());
  }

  // optional int32 size_limit = 3;
  if (this->size_limit() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->size_limit());
  }

  // optional string uuid = 4;
  if (this->uuid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->uuid());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ScanRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mpr.chubby.ScanRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ScanRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ScanRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mpr.chubby.ScanRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mpr.chubby.ScanRequest)
    MergeFrom(*source);
  }
}

void ScanRequest::MergeFrom(const ScanRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mpr.chubby.ScanRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.start_key().size() > 0) {

    start_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.start_key_);
  }
  if (from.end_key().size() > 0) {

    end_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.end_key_);
  }
  if (from.size_limit() != 0) {
    set_size_limit(from.size_limit());
  }
  if (from.uuid().size() > 0) {

    uuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uuid_);
  }
}

void ScanRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mpr.chubby.ScanRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScanRequest::CopyFrom(const ScanRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mpr.chubby.ScanRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScanRequest::IsInitialized() const {

  return true;
}

void ScanRequest::Swap(ScanRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ScanRequest::InternalSwap(ScanRequest* other) {
  start_key_.Swap(&other->start_key_);
  end_key_.Swap(&other->end_key_);
  std::swap(size_limit_, other->size_limit_);
  uuid_.Swap(&other->uuid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ScanRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ScanRequest_descriptor_;
  metadata.reflection = ScanRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ScanRequest

// optional string start_key = 1;
void ScanRequest::clear_start_key() {
  start_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ScanRequest::start_key() const {
  // @@protoc_insertion_point(field_get:mpr.chubby.ScanRequest.start_key)
  return start_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ScanRequest::set_start_key(const ::std::string& value) {
  
  start_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mpr.chubby.ScanRequest.start_key)
}
 void ScanRequest::set_start_key(const char* value) {
  
  start_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mpr.chubby.ScanRequest.start_key)
}
 void ScanRequest::set_start_key(const char* value, size_t size) {
  
  start_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mpr.chubby.ScanRequest.start_key)
}
 ::std::string* ScanRequest::mutable_start_key() {
  
  // @@protoc_insertion_point(field_mutable:mpr.chubby.ScanRequest.start_key)
  return start_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ScanRequest::release_start_key() {
  // @@protoc_insertion_point(field_release:mpr.chubby.ScanRequest.start_key)
  
  return start_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ScanRequest::set_allocated_start_key(::std::string* start_key) {
  if (start_key != NULL) {
    
  } else {
    
  }
  start_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), start_key);
  // @@protoc_insertion_point(field_set_allocated:mpr.chubby.ScanRequest.start_key)
}

// optional bytes end_key = 2;
void ScanRequest::clear_end_key() {
  end_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ScanRequest::end_key() const {
  // @@protoc_insertion_point(field_get:mpr.chubby.ScanRequest.end_key)
  return end_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ScanRequest::set_end_key(const ::std::string& value) {
  
  end_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mpr.chubby.ScanRequest.end_key)
}
 void ScanRequest::set_end_key(const char* value) {
  
  end_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mpr.chubby.ScanRequest.end_key)
}
 void ScanRequest::set_end_key(const void* value, size_t size) {
  
  end_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mpr.chubby.ScanRequest.end_key)
}
 ::std::string* ScanRequest::mutable_end_key() {
  
  // @@protoc_insertion_point(field_mutable:mpr.chubby.ScanRequest.end_key)
  return end_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ScanRequest::release_end_key() {
  // @@protoc_insertion_point(field_release:mpr.chubby.ScanRequest.end_key)
  
  return end_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ScanRequest::set_allocated_end_key(::std::string* end_key) {
  if (end_key != NULL) {
    
  } else {
    
  }
  end_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), end_key);
  // @@protoc_insertion_point(field_set_allocated:mpr.chubby.ScanRequest.end_key)
}

// optional int32 size_limit = 3;
void ScanRequest::clear_size_limit() {
  size_limit_ = 0;
}
 ::google::protobuf::int32 ScanRequest::size_limit() const {
  // @@protoc_insertion_point(field_get:mpr.chubby.ScanRequest.size_limit)
  return size_limit_;
}
 void ScanRequest::set_size_limit(::google::protobuf::int32 value) {
  
  size_limit_ = value;
  // @@protoc_insertion_point(field_set:mpr.chubby.ScanRequest.size_limit)
}

// optional string uuid = 4;
void ScanRequest::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ScanRequest::uuid() const {
  // @@protoc_insertion_point(field_get:mpr.chubby.ScanRequest.uuid)
  return uuid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ScanRequest::set_uuid(const ::std::string& value) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mpr.chubby.ScanRequest.uuid)
}
 void ScanRequest::set_uuid(const char* value) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mpr.chubby.ScanRequest.uuid)
}
 void ScanRequest::set_uuid(const char* value, size_t size) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mpr.chubby.ScanRequest.uuid)
}
 ::std::string* ScanRequest::mutable_uuid() {
  
  // @@protoc_insertion_point(field_mutable:mpr.chubby.ScanRequest.uuid)
  return uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ScanRequest::release_uuid() {
  // @@protoc_insertion_point(field_release:mpr.chubby.ScanRequest.uuid)
  
  return uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ScanRequest::set_allocated_uuid(::std::string* uuid) {
  if (uuid != NULL) {
    
  } else {
    
  }
  uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:mpr.chubby.ScanRequest.uuid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ScanItem::kKeyFieldNumber;
const int ScanItem::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ScanItem::ScanItem()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpr.chubby.ScanItem)
}

void ScanItem::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ScanItem::ScanItem(const ScanItem& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mpr.chubby.ScanItem)
}

void ScanItem::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ScanItem::~ScanItem() {
  // @@protoc_insertion_point(destructor:mpr.chubby.ScanItem)
  SharedDtor();
}

void ScanItem::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ScanItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ScanItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ScanItem_descriptor_;
}

const ScanItem& ScanItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2eproto();
  return *default_instance_;
}

ScanItem* ScanItem::default_instance_ = NULL;

ScanItem* ScanItem::New(::google::protobuf::Arena* arena) const {
  ScanItem* n = new ScanItem;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ScanItem::Clear() {
// @@protoc_insertion_point(message_clear_start:mpr.chubby.ScanItem)
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ScanItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpr.chubby.ScanItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "mpr.chubby.ScanItem.key"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // optional bytes value = 2;
      case 2: {
        if (tag == 18) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpr.chubby.ScanItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpr.chubby.ScanItem)
  return false;
#undef DO_
}

void ScanItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpr.chubby.ScanItem)
  // optional string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mpr.chubby.ScanItem.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // optional bytes value = 2;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->value(), output);
  }

  // @@protoc_insertion_point(serialize_end:mpr.chubby.ScanItem)
}

::google::protobuf::uint8* ScanItem::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mpr.chubby.ScanItem)
  // optional string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mpr.chubby.ScanItem.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // optional bytes value = 2;
  if (this->value().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->value(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:mpr.chubby.ScanItem)
  return target;
}

int ScanItem::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:mpr.chubby.ScanItem)
  int total_size = 0;

  // optional string key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());
  }

  // optional bytes value = 2;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->value());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ScanItem::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mpr.chubby.ScanItem)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ScanItem* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ScanItem>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mpr.chubby.ScanItem)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mpr.chubby.ScanItem)
    MergeFrom(*source);
  }
}

void ScanItem::MergeFrom(const ScanItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mpr.chubby.ScanItem)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
}

void ScanItem::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mpr.chubby.ScanItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScanItem::CopyFrom(const ScanItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mpr.chubby.ScanItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScanItem::IsInitialized() const {

  return true;
}

void ScanItem::Swap(ScanItem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ScanItem::InternalSwap(ScanItem* other) {
  key_.Swap(&other->key_);
  value_.Swap(&other->value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ScanItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ScanItem_descriptor_;
  metadata.reflection = ScanItem_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ScanItem

// optional string key = 1;
void ScanItem::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ScanItem::key() const {
  // @@protoc_insertion_point(field_get:mpr.chubby.ScanItem.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ScanItem::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mpr.chubby.ScanItem.key)
}
 void ScanItem::set_key(const char* value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mpr.chubby.ScanItem.key)
}
 void ScanItem::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mpr.chubby.ScanItem.key)
}
 ::std::string* ScanItem::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:mpr.chubby.ScanItem.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ScanItem::release_key() {
  // @@protoc_insertion_point(field_release:mpr.chubby.ScanItem.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ScanItem::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:mpr.chubby.ScanItem.key)
}

// optional bytes value = 2;
void ScanItem::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ScanItem::value() const {
  // @@protoc_insertion_point(field_get:mpr.chubby.ScanItem.value)
  return value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ScanItem::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mpr.chubby.ScanItem.value)
}
 void ScanItem::set_value(const char* value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mpr.chubby.ScanItem.value)
}
 void ScanItem::set_value(const void* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mpr.chubby.ScanItem.value)
}
 ::std::string* ScanItem::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:mpr.chubby.ScanItem.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ScanItem::release_value() {
  // @@protoc_insertion_point(field_release:mpr.chubby.ScanItem.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ScanItem::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:mpr.chubby.ScanItem.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ScanResponse::kHasMoreFieldNumber;
const int ScanResponse::kItemsFieldNumber;
const int ScanResponse::kLeaderIdFieldNumber;
const int ScanResponse::kSuccessFieldNumber;
const int ScanResponse::kUuidExpiredFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ScanResponse::ScanResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpr.chubby.ScanResponse)
}

void ScanResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ScanResponse::ScanResponse(const ScanResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mpr.chubby.ScanResponse)
}

void ScanResponse::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  has_more_ = false;
  leader_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  success_ = false;
  uuid_expired_ = false;
}

ScanResponse::~ScanResponse() {
  // @@protoc_insertion_point(destructor:mpr.chubby.ScanResponse)
  SharedDtor();
}

void ScanResponse::SharedDtor() {
  leader_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ScanResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ScanResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ScanResponse_descriptor_;
}

const ScanResponse& ScanResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2eproto();
  return *default_instance_;
}

ScanResponse* ScanResponse::default_instance_ = NULL;

ScanResponse* ScanResponse::New(::google::protobuf::Arena* arena) const {
  ScanResponse* n = new ScanResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ScanResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mpr.chubby.ScanResponse)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ScanResponse, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ScanResponse*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(has_more_, uuid_expired_);
  leader_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

  items_.Clear();
}

bool ScanResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpr.chubby.ScanResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool has_more = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_more_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_items;
        break;
      }

      // repeated .mpr.chubby.ScanItem items = 2;
      case 2: {
        if (tag == 18) {
         parse_items:
          DO_(input->IncrementRecursionDepth());
         parse_loop_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_items;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(26)) goto parse_leader_id;
        break;
      }

      // optional string leader_id = 3;
      case 3: {
        if (tag == 26) {
         parse_leader_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_leader_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->leader_id().data(), this->leader_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "mpr.chubby.ScanResponse.leader_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_success;
        break;
      }

      // optional bool success = 4;
      case 4: {
        if (tag == 32) {
         parse_success:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_uuid_expired;
        break;
      }

      // optional bool uuid_expired = 5;
      case 5: {
        if (tag == 40) {
         parse_uuid_expired:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &uuid_expired_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpr.chubby.ScanResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpr.chubby.ScanResponse)
  return false;
#undef DO_
}

void ScanResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpr.chubby.ScanResponse)
  // optional bool has_more = 1;
  if (this->has_more() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->has_more(), output);
  }

  // repeated .mpr.chubby.ScanItem items = 2;
  for (unsigned int i = 0, n = this->items_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->items(i), output);
  }

  // optional string leader_id = 3;
  if (this->leader_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->leader_id().data(), this->leader_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mpr.chubby.ScanResponse.leader_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->leader_id(), output);
  }

  // optional bool success = 4;
  if (this->success() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->success(), output);
  }

  // optional bool uuid_expired = 5;
  if (this->uuid_expired() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->uuid_expired(), output);
  }

  // @@protoc_insertion_point(serialize_end:mpr.chubby.ScanResponse)
}

::google::protobuf::uint8* ScanResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mpr.chubby.ScanResponse)
  // optional bool has_more = 1;
  if (this->has_more() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->has_more(), target);
  }

  // repeated .mpr.chubby.ScanItem items = 2;
  for (unsigned int i = 0, n = this->items_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->items(i), false, target);
  }

  // optional string leader_id = 3;
  if (this->leader_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->leader_id().data(), this->leader_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mpr.chubby.ScanResponse.leader_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->leader_id(), target);
  }

  // optional bool success = 4;
  if (this->success() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->success(), target);
  }

  // optional bool uuid_expired = 5;
  if (this->uuid_expired() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->uuid_expired(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:mpr.chubby.ScanResponse)
  return target;
}

int ScanResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:mpr.chubby.ScanResponse)
  int total_size = 0;

  // optional bool has_more = 1;
  if (this->has_more() != 0) {
    total_size += 1 + 1;
  }

  // optional string leader_id = 3;
  if (this->leader_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->leader_id());
  }

  // optional bool success = 4;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  // optional bool uuid_expired = 5;
  if (this->uuid_expired() != 0) {
    total_size += 1 + 1;
  }

  // repeated .mpr.chubby.ScanItem items = 2;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ScanResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mpr.chubby.ScanResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ScanResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ScanResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mpr.chubby.ScanResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mpr.chubby.ScanResponse)
    MergeFrom(*source);
  }
}

void ScanResponse::MergeFrom(const ScanResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mpr.chubby.ScanResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  items_.MergeFrom(from.items_);
  if (from.has_more() != 0) {
    set_has_more(from.has_more());
  }
  if (from.leader_id().size() > 0) {

    leader_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.leader_id_);
  }
  if (from.success() != 0) {
    set_success(from.success());
  }
  if (from.uuid_expired() != 0) {
    set_uuid_expired(from.uuid_expired());
  }
}

void ScanResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mpr.chubby.ScanResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScanResponse::CopyFrom(const ScanResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mpr.chubby.ScanResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScanResponse::IsInitialized() const {

  return true;
}

void ScanResponse::Swap(ScanResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ScanResponse::InternalSwap(ScanResponse* other) {
  std::swap(has_more_, other->has_more_);
  items_.UnsafeArenaSwap(&other->items_);
  leader_id_.Swap(&other->leader_id_);
  std::swap(success_, other->success_);
  std::swap(uuid_expired_, other->uuid_expired_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ScanResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ScanResponse_descriptor_;
  metadata.reflection = ScanResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ScanResponse

// optional bool has_more = 1;
void ScanResponse::clear_has_more() {
  has_more_ = false;
}
 bool ScanResponse::has_more() const {
  // @@protoc_insertion_point(field_get:mpr.chubby.ScanResponse.has_more)
  return has_more_;
}
 void ScanResponse::set_has_more(bool value) {
  
  has_more_ = value;
  // @@protoc_insertion_point(field_set:mpr.chubby.ScanResponse.has_more)
}

// repeated .mpr.chubby.ScanItem items = 2;
int ScanResponse::items_size() const {
  return items_.size();
}
void ScanResponse::clear_items() {
  items_.Clear();
}
const ::mpr::chubby::ScanItem& ScanResponse::items(int index) const {
  // @@protoc_insertion_point(field_get:mpr.chubby.ScanResponse.items)
  return items_.Get(index);
}
::mpr::chubby::ScanItem* ScanResponse::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:mpr.chubby.ScanResponse.items)
  return items_.Mutable(index);
}
::mpr::chubby::ScanItem* ScanResponse::add_items() {
  // @@protoc_insertion_point(field_add:mpr.chubby.ScanResponse.items)
  return items_.Add();
}
::google::protobuf::RepeatedPtrField< ::mpr::chubby::ScanItem >*
ScanResponse::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:mpr.chubby.ScanResponse.items)
  return &items_;
}
const ::google::protobuf::RepeatedPtrField< ::mpr::chubby::ScanItem >&
ScanResponse::items() const {
  // @@protoc_insertion_point(field_list:mpr.chubby.ScanResponse.items)
  return items_;
}

// optional string leader_id = 3;
void ScanResponse::clear_leader_id() {
  leader_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ScanResponse::leader_id() const {
  // @@protoc_insertion_point(field_get:mpr.chubby.ScanResponse.leader_id)
  return leader_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ScanResponse::set_leader_id(const ::std::string& value) {
  
  leader_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mpr.chubby.ScanResponse.leader_id)
}
 void ScanResponse::set_leader_id(const char* value) {
  
  leader_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mpr.chubby.ScanResponse.leader_id)
}
 void ScanResponse::set_leader_id(const char* value, size_t size) {
  
  leader_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mpr.chubby.ScanResponse.leader_id)
}
 ::std::string* ScanResponse::mutable_leader_id() {
  
  // @@protoc_insertion_point(field_mutable:mpr.chubby.ScanResponse.leader_id)
  return leader_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ScanResponse::release_leader_id() {
  // @@protoc_insertion_point(field_release:mpr.chubby.ScanResponse.leader_id)
  
  return leader_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ScanResponse::set_allocated_leader_id(::std::string* leader_id) {
  if (leader_id != NULL) {
    
  } else {
    
  }
  leader_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), leader_id);
  // @@protoc_insertion_point(field_set_allocated:mpr.chubby.ScanResponse.leader_id)
}

// optional bool success = 4;
void ScanResponse::clear_success() {
  success_ = false;
}
 bool ScanResponse::success() const {
  // @@protoc_insertion_point(field_get:mpr.chubby.ScanResponse.success)
  return success_;
}
 void ScanResponse::set_success(bool value) {
  
  success_ = value;
  // @@protoc_insertion_point(field_set:mpr.chubby.ScanResponse.success)
}

// optional bool uuid_expired = 5;
void ScanResponse::clear_uuid_expired() {
  uuid_expired_ = false;
}
 bool ScanResponse::uuid_expired() const {
  // @@protoc_insertion_point(field_get:mpr.chubby.ScanResponse.uuid_expired)
  return uuid_expired_;
}
 void ScanResponse::set_uuid_expired(bool value) {
  
  uuid_expired_ = value;
  // @@protoc_insertion_point(field_set:mpr.chubby.ScanResponse.uuid_expired)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LockRequest::kKeyFieldNumber;
const int LockRequest::kSessionIdFieldNumber;
const int LockRequest::kHostnameFieldNumber;
const int LockRequest::kUuidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LockRequest::LockRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpr.chubby.LockRequest)
}

void LockRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

LockRequest::LockRequest(const LockRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mpr.chubby.LockRequest)
}

void LockRequest::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  session_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hostname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

LockRequest::~LockRequest() {
  // @@protoc_insertion_point(destructor:mpr.chubby.LockRequest)
  SharedDtor();
}

void LockRequest::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  session_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hostname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uuid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void LockRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LockRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LockRequest_descriptor_;
}

const LockRequest& LockRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2eproto();
  return *default_instance_;
}

LockRequest* LockRequest::default_instance_ = NULL;

LockRequest* LockRequest::New(::google::protobuf::Arena* arena) const {
  LockRequest* n = new LockRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LockRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mpr.chubby.LockRequest)
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  session_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hostname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool LockRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpr.chubby.LockRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "mpr.chubby.LockRequest.key"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_session_id;
        break;
      }

      // optional string session_id = 2;
      case 2: {
        if (tag == 18) {
         parse_session_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->session_id().data(), this->session_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "mpr.chubby.LockRequest.session_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_hostname;
        break;
      }

      // optional string hostname = 3;
      case 3: {
        if (tag == 26) {
         parse_hostname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hostname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->hostname().data(), this->hostname().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "mpr.chubby.LockRequest.hostname"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_uuid;
        break;
      }

      // optional string uuid = 4;
      case 4: {
        if (tag == 34) {
         parse_uuid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uuid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->uuid().data(), this->uuid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "mpr.chubby.LockRequest.uuid"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpr.chubby.LockRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpr.chubby.LockRequest)
  return false;
#undef DO_
}

void LockRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpr.chubby.LockRequest)
  // optional string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mpr.chubby.LockRequest.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // optional string session_id = 2;
  if (this->session_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->session_id().data(), this->session_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mpr.chubby.LockRequest.session_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->session_id(), output);
  }

  // optional string hostname = 3;
  if (this->hostname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hostname().data(), this->hostname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mpr.chubby.LockRequest.hostname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->hostname(), output);
  }

  // optional string uuid = 4;
  if (this->uuid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mpr.chubby.LockRequest.uuid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->uuid(), output);
  }

  // @@protoc_insertion_point(serialize_end:mpr.chubby.LockRequest)
}

::google::protobuf::uint8* LockRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mpr.chubby.LockRequest)
  // optional string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mpr.chubby.LockRequest.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // optional string session_id = 2;
  if (this->session_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->session_id().data(), this->session_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mpr.chubby.LockRequest.session_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->session_id(), target);
  }

  // optional string hostname = 3;
  if (this->hostname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hostname().data(), this->hostname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mpr.chubby.LockRequest.hostname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->hostname(), target);
  }

  // optional string uuid = 4;
  if (this->uuid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mpr.chubby.LockRequest.uuid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->uuid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:mpr.chubby.LockRequest)
  return target;
}

int LockRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:mpr.chubby.LockRequest)
  int total_size = 0;

  // optional string key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());
  }

  // optional string session_id = 2;
  if (this->session_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->session_id());
  }

  // optional string hostname = 3;
  if (this->hostname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->hostname());
  }

  // optional string uuid = 4;
  if (this->uuid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->uuid());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LockRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mpr.chubby.LockRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const LockRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const LockRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mpr.chubby.LockRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mpr.chubby.LockRequest)
    MergeFrom(*source);
  }
}

void LockRequest::MergeFrom(const LockRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mpr.chubby.LockRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.session_id().size() > 0) {

    session_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.session_id_);
  }
  if (from.hostname().size() > 0) {

    hostname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hostname_);
  }
  if (from.uuid().size() > 0) {

    uuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uuid_);
  }
}

void LockRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mpr.chubby.LockRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LockRequest::CopyFrom(const LockRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mpr.chubby.LockRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LockRequest::IsInitialized() const {

  return true;
}

void LockRequest::Swap(LockRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LockRequest::InternalSwap(LockRequest* other) {
  key_.Swap(&other->key_);
  session_id_.Swap(&other->session_id_);
  hostname_.Swap(&other->hostname_);
  uuid_.Swap(&other->uuid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LockRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LockRequest_descriptor_;
  metadata.reflection = LockRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LockRequest

// optional string key = 1;
void LockRequest::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& LockRequest::key() const {
  // @@protoc_insertion_point(field_get:mpr.chubby.LockRequest.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LockRequest::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mpr.chubby.LockRequest.key)
}
 void LockRequest::set_key(const char* value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mpr.chubby.LockRequest.key)
}
 void LockRequest::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mpr.chubby.LockRequest.key)
}
 ::std::string* LockRequest::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:mpr.chubby.LockRequest.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* LockRequest::release_key() {
  // @@protoc_insertion_point(field_release:mpr.chubby.LockRequest.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LockRequest::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:mpr.chubby.LockRequest.key)
}

// optional string session_id = 2;
void LockRequest::clear_session_id() {
  session_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& LockRequest::session_id() const {
  // @@protoc_insertion_point(field_get:mpr.chubby.LockRequest.session_id)
  return session_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LockRequest::set_session_id(const ::std::string& value) {
  
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mpr.chubby.LockRequest.session_id)
}
 void LockRequest::set_session_id(const char* value) {
  
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mpr.chubby.LockRequest.session_id)
}
 void LockRequest::set_session_id(const char* value, size_t size) {
  
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mpr.chubby.LockRequest.session_id)
}
 ::std::string* LockRequest::mutable_session_id() {
  
  // @@protoc_insertion_point(field_mutable:mpr.chubby.LockRequest.session_id)
  return session_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* LockRequest::release_session_id() {
  // @@protoc_insertion_point(field_release:mpr.chubby.LockRequest.session_id)
  
  return session_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LockRequest::set_allocated_session_id(::std::string* session_id) {
  if (session_id != NULL) {
    
  } else {
    
  }
  session_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), session_id);
  // @@protoc_insertion_point(field_set_allocated:mpr.chubby.LockRequest.session_id)
}

// optional string hostname = 3;
void LockRequest::clear_hostname() {
  hostname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& LockRequest::hostname() const {
  // @@protoc_insertion_point(field_get:mpr.chubby.LockRequest.hostname)
  return hostname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LockRequest::set_hostname(const ::std::string& value) {
  
  hostname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mpr.chubby.LockRequest.hostname)
}
 void LockRequest::set_hostname(const char* value) {
  
  hostname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mpr.chubby.LockRequest.hostname)
}
 void LockRequest::set_hostname(const char* value, size_t size) {
  
  hostname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mpr.chubby.LockRequest.hostname)
}
 ::std::string* LockRequest::mutable_hostname() {
  
  // @@protoc_insertion_point(field_mutable:mpr.chubby.LockRequest.hostname)
  return hostname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* LockRequest::release_hostname() {
  // @@protoc_insertion_point(field_release:mpr.chubby.LockRequest.hostname)
  
  return hostname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LockRequest::set_allocated_hostname(::std::string* hostname) {
  if (hostname != NULL) {
    
  } else {
    
  }
  hostname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hostname);
  // @@protoc_insertion_point(field_set_allocated:mpr.chubby.LockRequest.hostname)
}

// optional string uuid = 4;
void LockRequest::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& LockRequest::uuid() const {
  // @@protoc_insertion_point(field_get:mpr.chubby.LockRequest.uuid)
  return uuid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LockRequest::set_uuid(const ::std::string& value) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mpr.chubby.LockRequest.uuid)
}
 void LockRequest::set_uuid(const char* value) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mpr.chubby.LockRequest.uuid)
}
 void LockRequest::set_uuid(const char* value, size_t size) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mpr.chubby.LockRequest.uuid)
}
 ::std::string* LockRequest::mutable_uuid() {
  
  // @@protoc_insertion_point(field_mutable:mpr.chubby.LockRequest.uuid)
  return uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* LockRequest::release_uuid() {
  // @@protoc_insertion_point(field_release:mpr.chubby.LockRequest.uuid)
  
  return uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LockRequest::set_allocated_uuid(::std::string* uuid) {
  if (uuid != NULL) {
    
  } else {
    
  }
  uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:mpr.chubby.LockRequest.uuid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LockResponse::kSuccessFieldNumber;
const int LockResponse::kLeaderIdFieldNumber;
const int LockResponse::kUuidExpiredFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LockResponse::LockResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpr.chubby.LockResponse)
}

void LockResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

LockResponse::LockResponse(const LockResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mpr.chubby.LockResponse)
}

void LockResponse::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  success_ = false;
  leader_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uuid_expired_ = false;
}

LockResponse::~LockResponse() {
  // @@protoc_insertion_point(destructor:mpr.chubby.LockResponse)
  SharedDtor();
}

void LockResponse::SharedDtor() {
  leader_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void LockResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LockResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LockResponse_descriptor_;
}

const LockResponse& LockResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2eproto();
  return *default_instance_;
}

LockResponse* LockResponse::default_instance_ = NULL;

LockResponse* LockResponse::New(::google::protobuf::Arena* arena) const {
  LockResponse* n = new LockResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LockResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mpr.chubby.LockResponse)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(LockResponse, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<LockResponse*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(success_, uuid_expired_);
  leader_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool LockResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpr.chubby.LockResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool success = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_leader_id;
        break;
      }

      // optional string leader_id = 2;
      case 2: {
        if (tag == 18) {
         parse_leader_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_leader_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->leader_id().data(), this->leader_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "mpr.chubby.LockResponse.leader_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_uuid_expired;
        break;
      }

      // optional bool uuid_expired = 3;
      case 3: {
        if (tag == 24) {
         parse_uuid_expired:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &uuid_expired_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpr.chubby.LockResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpr.chubby.LockResponse)
  return false;
#undef DO_
}

void LockResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpr.chubby.LockResponse)
  // optional bool success = 1;
  if (this->success() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->success(), output);
  }

  // optional string leader_id = 2;
  if (this->leader_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->leader_id().data(), this->leader_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mpr.chubby.LockResponse.leader_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->leader_id(), output);
  }

  // optional bool uuid_expired = 3;
  if (this->uuid_expired() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->uuid_expired(), output);
  }

  // @@protoc_insertion_point(serialize_end:mpr.chubby.LockResponse)
}

::google::protobuf::uint8* LockResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mpr.chubby.LockResponse)
  // optional bool success = 1;
  if (this->success() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->success(), target);
  }

  // optional string leader_id = 2;
  if (this->leader_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->leader_id().data(), this->leader_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mpr.chubby.LockResponse.leader_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->leader_id(), target);
  }

  // optional bool uuid_expired = 3;
  if (this->uuid_expired() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->uuid_expired(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:mpr.chubby.LockResponse)
  return target;
}

int LockResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:mpr.chubby.LockResponse)
  int total_size = 0;

  // optional bool success = 1;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  // optional string leader_id = 2;
  if (this->leader_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->leader_id());
  }

  // optional bool uuid_expired = 3;
  if (this->uuid_expired() != 0) {
    total_size += 1 + 1;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LockResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mpr.chubby.LockResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const LockResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const LockResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mpr.chubby.LockResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mpr.chubby.LockResponse)
    MergeFrom(*source);
  }
}

void LockResponse::MergeFrom(const LockResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mpr.chubby.LockResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.success() != 0) {
    set_success(from.success());
  }
  if (from.leader_id().size() > 0) {

    leader_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.leader_id_);
  }
  if (from.uuid_expired() != 0) {
    set_uuid_expired(from.uuid_expired());
  }
}

void LockResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mpr.chubby.LockResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LockResponse::CopyFrom(const LockResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mpr.chubby.LockResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LockResponse::IsInitialized() const {

  return true;
}

void LockResponse::Swap(LockResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LockResponse::InternalSwap(LockResponse* other) {
  std::swap(success_, other->success_);
  leader_id_.Swap(&other->leader_id_);
  std::swap(uuid_expired_, other->uuid_expired_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LockResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LockResponse_descriptor_;
  metadata.reflection = LockResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LockResponse

// optional bool success = 1;
void LockResponse::clear_success() {
  success_ = false;
}
 bool LockResponse::success() const {
  // @@protoc_insertion_point(field_get:mpr.chubby.LockResponse.success)
  return success_;
}
 void LockResponse::set_success(bool value) {
  
  success_ = value;
  // @@protoc_insertion_point(field_set:mpr.chubby.LockResponse.success)
}

// optional string leader_id = 2;
void LockResponse::clear_leader_id() {
  leader_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& LockResponse::leader_id() const {
  // @@protoc_insertion_point(field_get:mpr.chubby.LockResponse.leader_id)
  return leader_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LockResponse::set_leader_id(const ::std::string& value) {
  
  leader_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mpr.chubby.LockResponse.leader_id)
}
 void LockResponse::set_leader_id(const char* value) {
  
  leader_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mpr.chubby.LockResponse.leader_id)
}
 void LockResponse::set_leader_id(const char* value, size_t size) {
  
  leader_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mpr.chubby.LockResponse.leader_id)
}
 ::std::string* LockResponse::mutable_leader_id() {
  
  // @@protoc_insertion_point(field_mutable:mpr.chubby.LockResponse.leader_id)
  return leader_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* LockResponse::release_leader_id() {
  // @@protoc_insertion_point(field_release:mpr.chubby.LockResponse.leader_id)
  
  return leader_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LockResponse::set_allocated_leader_id(::std::string* leader_id) {
  if (leader_id != NULL) {
    
  } else {
    
  }
  leader_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), leader_id);
  // @@protoc_insertion_point(field_set_allocated:mpr.chubby.LockResponse.leader_id)
}

// optional bool uuid_expired = 3;
void LockResponse::clear_uuid_expired() {
  uuid_expired_ = false;
}
 bool LockResponse::uuid_expired() const {
  // @@protoc_insertion_point(field_get:mpr.chubby.LockResponse.uuid_expired)
  return uuid_expired_;
}
 void LockResponse::set_uuid_expired(bool value) {
  
  uuid_expired_ = value;
  // @@protoc_insertion_point(field_set:mpr.chubby.LockResponse.uuid_expired)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KeepAliveRequest::kSessionIdFieldNumber;
const int KeepAliveRequest::kUuidFieldNumber;
const int KeepAliveRequest::kLocksFieldNumber;
const int KeepAliveRequest::kForwardFromLeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KeepAliveRequest::KeepAliveRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpr.chubby.KeepAliveRequest)
}

void KeepAliveRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

KeepAliveRequest::KeepAliveRequest(const KeepAliveRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mpr.chubby.KeepAliveRequest)
}

void KeepAliveRequest::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  session_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  forward_from_leader_ = false;
}

KeepAliveRequest::~KeepAliveRequest() {
  // @@protoc_insertion_point(destructor:mpr.chubby.KeepAliveRequest)
  SharedDtor();
}

void KeepAliveRequest::SharedDtor() {
  session_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uuid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void KeepAliveRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KeepAliveRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KeepAliveRequest_descriptor_;
}

const KeepAliveRequest& KeepAliveRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2eproto();
  return *default_instance_;
}

KeepAliveRequest* KeepAliveRequest::default_instance_ = NULL;

KeepAliveRequest* KeepAliveRequest::New(::google::protobuf::Arena* arena) const {
  KeepAliveRequest* n = new KeepAliveRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void KeepAliveRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mpr.chubby.KeepAliveRequest)
  session_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  forward_from_leader_ = false;
  locks_.Clear();
}

bool KeepAliveRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpr.chubby.KeepAliveRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string session_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->session_id().data(), this->session_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "mpr.chubby.KeepAliveRequest.session_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_uuid;
        break;
      }

      // optional string uuid = 2;
      case 2: {
        if (tag == 18) {
         parse_uuid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uuid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->uuid().data(), this->uuid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "mpr.chubby.KeepAliveRequest.uuid"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_locks;
        break;
      }

      // repeated string locks = 3;
      case 3: {
        if (tag == 26) {
         parse_locks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_locks()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->locks(this->locks_size() - 1).data(),
            this->locks(this->locks_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "mpr.chubby.KeepAliveRequest.locks"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_locks;
        if (input->ExpectTag(32)) goto parse_forward_from_leader;
        break;
      }

      // optional bool forward_from_leader = 4;
      case 4: {
        if (tag == 32) {
         parse_forward_from_leader:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &forward_from_leader_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpr.chubby.KeepAliveRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpr.chubby.KeepAliveRequest)
  return false;
#undef DO_
}

void KeepAliveRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpr.chubby.KeepAliveRequest)
  // optional string session_id = 1;
  if (this->session_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->session_id().data(), this->session_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mpr.chubby.KeepAliveRequest.session_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->session_id(), output);
  }

  // optional string uuid = 2;
  if (this->uuid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mpr.chubby.KeepAliveRequest.uuid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->uuid(), output);
  }

  // repeated string locks = 3;
  for (int i = 0; i < this->locks_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->locks(i).data(), this->locks(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mpr.chubby.KeepAliveRequest.locks");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->locks(i), output);
  }

  // optional bool forward_from_leader = 4;
  if (this->forward_from_leader() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->forward_from_leader(), output);
  }

  // @@protoc_insertion_point(serialize_end:mpr.chubby.KeepAliveRequest)
}

::google::protobuf::uint8* KeepAliveRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mpr.chubby.KeepAliveRequest)
  // optional string session_id = 1;
  if (this->session_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->session_id().data(), this->session_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mpr.chubby.KeepAliveRequest.session_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->session_id(), target);
  }

  // optional string uuid = 2;
  if (this->uuid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mpr.chubby.KeepAliveRequest.uuid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->uuid(), target);
  }

  // repeated string locks = 3;
  for (int i = 0; i < this->locks_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->locks(i).data(), this->locks(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mpr.chubby.KeepAliveRequest.locks");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->locks(i), target);
  }

  // optional bool forward_from_leader = 4;
  if (this->forward_from_leader() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->forward_from_leader(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:mpr.chubby.KeepAliveRequest)
  return target;
}

int KeepAliveRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:mpr.chubby.KeepAliveRequest)
  int total_size = 0;

  // optional string session_id = 1;
  if (this->session_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->session_id());
  }

  // optional string uuid = 2;
  if (this->uuid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->uuid());
  }

  // optional bool forward_from_leader = 4;
  if (this->forward_from_leader() != 0) {
    total_size += 1 + 1;
  }

  // repeated string locks = 3;
  total_size += 1 * this->locks_size();
  for (int i = 0; i < this->locks_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->locks(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KeepAliveRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mpr.chubby.KeepAliveRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const KeepAliveRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const KeepAliveRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mpr.chubby.KeepAliveRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mpr.chubby.KeepAliveRequest)
    MergeFrom(*source);
  }
}

void KeepAliveRequest::MergeFrom(const KeepAliveRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mpr.chubby.KeepAliveRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  locks_.MergeFrom(from.locks_);
  if (from.session_id().size() > 0) {

    session_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.session_id_);
  }
  if (from.uuid().size() > 0) {

    uuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uuid_);
  }
  if (from.forward_from_leader() != 0) {
    set_forward_from_leader(from.forward_from_leader());
  }
}

void KeepAliveRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mpr.chubby.KeepAliveRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeepAliveRequest::CopyFrom(const KeepAliveRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mpr.chubby.KeepAliveRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeepAliveRequest::IsInitialized() const {

  return true;
}

void KeepAliveRequest::Swap(KeepAliveRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KeepAliveRequest::InternalSwap(KeepAliveRequest* other) {
  session_id_.Swap(&other->session_id_);
  uuid_.Swap(&other->uuid_);
  locks_.UnsafeArenaSwap(&other->locks_);
  std::swap(forward_from_leader_, other->forward_from_leader_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata KeepAliveRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KeepAliveRequest_descriptor_;
  metadata.reflection = KeepAliveRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// KeepAliveRequest

// optional string session_id = 1;
void KeepAliveRequest::clear_session_id() {
  session_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& KeepAliveRequest::session_id() const {
  // @@protoc_insertion_point(field_get:mpr.chubby.KeepAliveRequest.session_id)
  return session_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void KeepAliveRequest::set_session_id(const ::std::string& value) {
  
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mpr.chubby.KeepAliveRequest.session_id)
}
 void KeepAliveRequest::set_session_id(const char* value) {
  
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mpr.chubby.KeepAliveRequest.session_id)
}
 void KeepAliveRequest::set_session_id(const char* value, size_t size) {
  
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mpr.chubby.KeepAliveRequest.session_id)
}
 ::std::string* KeepAliveRequest::mutable_session_id() {
  
  // @@protoc_insertion_point(field_mutable:mpr.chubby.KeepAliveRequest.session_id)
  return session_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* KeepAliveRequest::release_session_id() {
  // @@protoc_insertion_point(field_release:mpr.chubby.KeepAliveRequest.session_id)
  
  return session_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void KeepAliveRequest::set_allocated_session_id(::std::string* session_id) {
  if (session_id != NULL) {
    
  } else {
    
  }
  session_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), session_id);
  // @@protoc_insertion_point(field_set_allocated:mpr.chubby.KeepAliveRequest.session_id)
}

// optional string uuid = 2;
void KeepAliveRequest::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& KeepAliveRequest::uuid() const {
  // @@protoc_insertion_point(field_get:mpr.chubby.KeepAliveRequest.uuid)
  return uuid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void KeepAliveRequest::set_uuid(const ::std::string& value) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mpr.chubby.KeepAliveRequest.uuid)
}
 void KeepAliveRequest::set_uuid(const char* value) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mpr.chubby.KeepAliveRequest.uuid)
}
 void KeepAliveRequest::set_uuid(const char* value, size_t size) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mpr.chubby.KeepAliveRequest.uuid)
}
 ::std::string* KeepAliveRequest::mutable_uuid() {
  
  // @@protoc_insertion_point(field_mutable:mpr.chubby.KeepAliveRequest.uuid)
  return uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* KeepAliveRequest::release_uuid() {
  // @@protoc_insertion_point(field_release:mpr.chubby.KeepAliveRequest.uuid)
  
  return uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void KeepAliveRequest::set_allocated_uuid(::std::string* uuid) {
  if (uuid != NULL) {
    
  } else {
    
  }
  uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:mpr.chubby.KeepAliveRequest.uuid)
}

// repeated string locks = 3;
int KeepAliveRequest::locks_size() const {
  return locks_.size();
}
void KeepAliveRequest::clear_locks() {
  locks_.Clear();
}
 const ::std::string& KeepAliveRequest::locks(int index) const {
  // @@protoc_insertion_point(field_get:mpr.chubby.KeepAliveRequest.locks)
  return locks_.Get(index);
}
 ::std::string* KeepAliveRequest::mutable_locks(int index) {
  // @@protoc_insertion_point(field_mutable:mpr.chubby.KeepAliveRequest.locks)
  return locks_.Mutable(index);
}
 void KeepAliveRequest::set_locks(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:mpr.chubby.KeepAliveRequest.locks)
  locks_.Mutable(index)->assign(value);
}
 void KeepAliveRequest::set_locks(int index, const char* value) {
  locks_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:mpr.chubby.KeepAliveRequest.locks)
}
 void KeepAliveRequest::set_locks(int index, const char* value, size_t size) {
  locks_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mpr.chubby.KeepAliveRequest.locks)
}
 ::std::string* KeepAliveRequest::add_locks() {
  // @@protoc_insertion_point(field_add_mutable:mpr.chubby.KeepAliveRequest.locks)
  return locks_.Add();
}
 void KeepAliveRequest::add_locks(const ::std::string& value) {
  locks_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:mpr.chubby.KeepAliveRequest.locks)
}
 void KeepAliveRequest::add_locks(const char* value) {
  locks_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:mpr.chubby.KeepAliveRequest.locks)
}
 void KeepAliveRequest::add_locks(const char* value, size_t size) {
  locks_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:mpr.chubby.KeepAliveRequest.locks)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
KeepAliveRequest::locks() const {
  // @@protoc_insertion_point(field_list:mpr.chubby.KeepAliveRequest.locks)
  return locks_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
KeepAliveRequest::mutable_locks() {
  // @@protoc_insertion_point(field_mutable_list:mpr.chubby.KeepAliveRequest.locks)
  return &locks_;
}

// optional bool forward_from_leader = 4;
void KeepAliveRequest::clear_forward_from_leader() {
  forward_from_leader_ = false;
}
 bool KeepAliveRequest::forward_from_leader() const {
  // @@protoc_insertion_point(field_get:mpr.chubby.KeepAliveRequest.forward_from_leader)
  return forward_from_leader_;
}
 void KeepAliveRequest::set_forward_from_leader(bool value) {
  
  forward_from_leader_ = value;
  // @@protoc_insertion_point(field_set:mpr.chubby.KeepAliveRequest.forward_from_leader)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KeepAliveResponse::kSuccessFieldNumber;
const int KeepAliveResponse::kLeaderIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KeepAliveResponse::KeepAliveResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpr.chubby.KeepAliveResponse)
}

void KeepAliveResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

KeepAliveResponse::KeepAliveResponse(const KeepAliveResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mpr.chubby.KeepAliveResponse)
}

void KeepAliveResponse::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  success_ = false;
  leader_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

KeepAliveResponse::~KeepAliveResponse() {
  // @@protoc_insertion_point(destructor:mpr.chubby.KeepAliveResponse)
  SharedDtor();
}

void KeepAliveResponse::SharedDtor() {
  leader_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void KeepAliveResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KeepAliveResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KeepAliveResponse_descriptor_;
}

const KeepAliveResponse& KeepAliveResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2eproto();
  return *default_instance_;
}

KeepAliveResponse* KeepAliveResponse::default_instance_ = NULL;

KeepAliveResponse* KeepAliveResponse::New(::google::protobuf::Arena* arena) const {
  KeepAliveResponse* n = new KeepAliveResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void KeepAliveResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mpr.chubby.KeepAliveResponse)
  success_ = false;
  leader_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool KeepAliveResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpr.chubby.KeepAliveResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool success = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_leader_id;
        break;
      }

      // optional string leader_id = 2;
      case 2: {
        if (tag == 18) {
         parse_leader_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_leader_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->leader_id().data(), this->leader_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "mpr.chubby.KeepAliveResponse.leader_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpr.chubby.KeepAliveResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpr.chubby.KeepAliveResponse)
  return false;
#undef DO_
}

void KeepAliveResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpr.chubby.KeepAliveResponse)
  // optional bool success = 1;
  if (this->success() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->success(), output);
  }

  // optional string leader_id = 2;
  if (this->leader_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->leader_id().data(), this->leader_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mpr.chubby.KeepAliveResponse.leader_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->leader_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:mpr.chubby.KeepAliveResponse)
}

::google::protobuf::uint8* KeepAliveResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mpr.chubby.KeepAliveResponse)
  // optional bool success = 1;
  if (this->success() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->success(), target);
  }

  // optional string leader_id = 2;
  if (this->leader_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->leader_id().data(), this->leader_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mpr.chubby.KeepAliveResponse.leader_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->leader_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:mpr.chubby.KeepAliveResponse)
  return target;
}

int KeepAliveResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:mpr.chubby.KeepAliveResponse)
  int total_size = 0;

  // optional bool success = 1;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  // optional string leader_id = 2;
  if (this->leader_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->leader_id());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KeepAliveResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mpr.chubby.KeepAliveResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const KeepAliveResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const KeepAliveResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mpr.chubby.KeepAliveResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mpr.chubby.KeepAliveResponse)
    MergeFrom(*source);
  }
}

void KeepAliveResponse::MergeFrom(const KeepAliveResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mpr.chubby.KeepAliveResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.success() != 0) {
    set_success(from.success());
  }
  if (from.leader_id().size() > 0) {

    leader_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.leader_id_);
  }
}

void KeepAliveResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mpr.chubby.KeepAliveResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeepAliveResponse::CopyFrom(const KeepAliveResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mpr.chubby.KeepAliveResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeepAliveResponse::IsInitialized() const {

  return true;
}

void KeepAliveResponse::Swap(KeepAliveResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KeepAliveResponse::InternalSwap(KeepAliveResponse* other) {
  std::swap(success_, other->success_);
  leader_id_.Swap(&other->leader_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata KeepAliveResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KeepAliveResponse_descriptor_;
  metadata.reflection = KeepAliveResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// KeepAliveResponse

// optional bool success = 1;
void KeepAliveResponse::clear_success() {
  success_ = false;
}
 bool KeepAliveResponse::success() const {
  // @@protoc_insertion_point(field_get:mpr.chubby.KeepAliveResponse.success)
  return success_;
}
 void KeepAliveResponse::set_success(bool value) {
  
  success_ = value;
  // @@protoc_insertion_point(field_set:mpr.chubby.KeepAliveResponse.success)
}

// optional string leader_id = 2;
void KeepAliveResponse::clear_leader_id() {
  leader_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& KeepAliveResponse::leader_id() const {
  // @@protoc_insertion_point(field_get:mpr.chubby.KeepAliveResponse.leader_id)
  return leader_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void KeepAliveResponse::set_leader_id(const ::std::string& value) {
  
  leader_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mpr.chubby.KeepAliveResponse.leader_id)
}
 void KeepAliveResponse::set_leader_id(const char* value) {
  
  leader_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mpr.chubby.KeepAliveResponse.leader_id)
}
 void KeepAliveResponse::set_leader_id(const char* value, size_t size) {
  
  leader_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mpr.chubby.KeepAliveResponse.leader_id)
}
 ::std::string* KeepAliveResponse::mutable_leader_id() {
  
  // @@protoc_insertion_point(field_mutable:mpr.chubby.KeepAliveResponse.leader_id)
  return leader_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* KeepAliveResponse::release_leader_id() {
  // @@protoc_insertion_point(field_release:mpr.chubby.KeepAliveResponse.leader_id)
  
  return leader_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void KeepAliveResponse::set_allocated_leader_id(::std::string* leader_id) {
  if (leader_id != NULL) {
    
  } else {
    
  }
  leader_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), leader_id);
  // @@protoc_insertion_point(field_set_allocated:mpr.chubby.KeepAliveResponse.leader_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LoginRequest::kUsernameFieldNumber;
const int LoginRequest::kPasswdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LoginRequest::LoginRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpr.chubby.LoginRequest)
}

void LoginRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

LoginRequest::LoginRequest(const LoginRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mpr.chubby.LoginRequest)
}

void LoginRequest::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  passwd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

LoginRequest::~LoginRequest() {
  // @@protoc_insertion_point(destructor:mpr.chubby.LoginRequest)
  SharedDtor();
}

void LoginRequest::SharedDtor() {
  username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  passwd_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void LoginRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginRequest_descriptor_;
}

const LoginRequest& LoginRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2eproto();
  return *default_instance_;
}

LoginRequest* LoginRequest::default_instance_ = NULL;

LoginRequest* LoginRequest::New(::google::protobuf::Arena* arena) const {
  LoginRequest* n = new LoginRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LoginRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mpr.chubby.LoginRequest)
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  passwd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool LoginRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpr.chubby.LoginRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string username = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "mpr.chubby.LoginRequest.username"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_passwd;
        break;
      }

      // optional string passwd = 2;
      case 2: {
        if (tag == 18) {
         parse_passwd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_passwd()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->passwd().data(), this->passwd().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "mpr.chubby.LoginRequest.passwd"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpr.chubby.LoginRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpr.chubby.LoginRequest)
  return false;
#undef DO_
}

void LoginRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpr.chubby.LoginRequest)
  // optional string username = 1;
  if (this->username().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mpr.chubby.LoginRequest.username");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->username(), output);
  }

  // optional string passwd = 2;
  if (this->passwd().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->passwd().data(), this->passwd().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mpr.chubby.LoginRequest.passwd");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->passwd(), output);
  }

  // @@protoc_insertion_point(serialize_end:mpr.chubby.LoginRequest)
}

::google::protobuf::uint8* LoginRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mpr.chubby.LoginRequest)
  // optional string username = 1;
  if (this->username().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mpr.chubby.LoginRequest.username");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->username(), target);
  }

  // optional string passwd = 2;
  if (this->passwd().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->passwd().data(), this->passwd().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mpr.chubby.LoginRequest.passwd");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->passwd(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:mpr.chubby.LoginRequest)
  return target;
}

int LoginRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:mpr.chubby.LoginRequest)
  int total_size = 0;

  // optional string username = 1;
  if (this->username().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->username());
  }

  // optional string passwd = 2;
  if (this->passwd().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->passwd());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mpr.chubby.LoginRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const LoginRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const LoginRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mpr.chubby.LoginRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mpr.chubby.LoginRequest)
    MergeFrom(*source);
  }
}

void LoginRequest::MergeFrom(const LoginRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mpr.chubby.LoginRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.username().size() > 0) {

    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  if (from.passwd().size() > 0) {

    passwd_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.passwd_);
  }
}

void LoginRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mpr.chubby.LoginRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginRequest::CopyFrom(const LoginRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mpr.chubby.LoginRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginRequest::IsInitialized() const {

  return true;
}

void LoginRequest::Swap(LoginRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LoginRequest::InternalSwap(LoginRequest* other) {
  username_.Swap(&other->username_);
  passwd_.Swap(&other->passwd_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LoginRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginRequest_descriptor_;
  metadata.reflection = LoginRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LoginRequest

// optional string username = 1;
void LoginRequest::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& LoginRequest::username() const {
  // @@protoc_insertion_point(field_get:mpr.chubby.LoginRequest.username)
  return username_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LoginRequest::set_username(const ::std::string& value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mpr.chubby.LoginRequest.username)
}
 void LoginRequest::set_username(const char* value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mpr.chubby.LoginRequest.username)
}
 void LoginRequest::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mpr.chubby.LoginRequest.username)
}
 ::std::string* LoginRequest::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:mpr.chubby.LoginRequest.username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* LoginRequest::release_username() {
  // @@protoc_insertion_point(field_release:mpr.chubby.LoginRequest.username)
  
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LoginRequest::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:mpr.chubby.LoginRequest.username)
}

// optional string passwd = 2;
void LoginRequest::clear_passwd() {
  passwd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& LoginRequest::passwd() const {
  // @@protoc_insertion_point(field_get:mpr.chubby.LoginRequest.passwd)
  return passwd_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LoginRequest::set_passwd(const ::std::string& value) {
  
  passwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mpr.chubby.LoginRequest.passwd)
}
 void LoginRequest::set_passwd(const char* value) {
  
  passwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mpr.chubby.LoginRequest.passwd)
}
 void LoginRequest::set_passwd(const char* value, size_t size) {
  
  passwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mpr.chubby.LoginRequest.passwd)
}
 ::std::string* LoginRequest::mutable_passwd() {
  
  // @@protoc_insertion_point(field_mutable:mpr.chubby.LoginRequest.passwd)
  return passwd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* LoginRequest::release_passwd() {
  // @@protoc_insertion_point(field_release:mpr.chubby.LoginRequest.passwd)
  
  return passwd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LoginRequest::set_allocated_passwd(::std::string* passwd) {
  if (passwd != NULL) {
    
  } else {
    
  }
  passwd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), passwd);
  // @@protoc_insertion_point(field_set_allocated:mpr.chubby.LoginRequest.passwd)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Status::kCodeFieldNumber;
const int Status::kMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Status::Status()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpr.chubby.Status)
}

void Status::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Status::Status(const Status& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mpr.chubby.Status)
}

void Status::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  code_ = GOOGLE_LONGLONG(0);
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Status::~Status() {
  // @@protoc_insertion_point(destructor:mpr.chubby.Status)
  SharedDtor();
}

void Status::SharedDtor() {
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Status::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Status::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Status_descriptor_;
}

const Status& Status::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2eproto();
  return *default_instance_;
}

Status* Status::default_instance_ = NULL;

Status* Status::New(::google::protobuf::Arena* arena) const {
  Status* n = new Status;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Status::Clear() {
// @@protoc_insertion_point(message_clear_start:mpr.chubby.Status)
  code_ = GOOGLE_LONGLONG(0);
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool Status::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpr.chubby.Status)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 code = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &code_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_message;
        break;
      }

      // optional string message = 2;
      case 2: {
        if (tag == 18) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "mpr.chubby.Status.message"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpr.chubby.Status)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpr.chubby.Status)
  return false;
#undef DO_
}

void Status::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpr.chubby.Status)
  // optional int64 code = 1;
  if (this->code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->code(), output);
  }

  // optional string message = 2;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mpr.chubby.Status.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->message(), output);
  }

  // @@protoc_insertion_point(serialize_end:mpr.chubby.Status)
}

::google::protobuf::uint8* Status::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mpr.chubby.Status)
  // optional int64 code = 1;
  if (this->code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->code(), target);
  }

  // optional string message = 2;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mpr.chubby.Status.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->message(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:mpr.chubby.Status)
  return target;
}

int Status::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:mpr.chubby.Status)
  int total_size = 0;

  // optional int64 code = 1;
  if (this->code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->code());
  }

  // optional string message = 2;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Status::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mpr.chubby.Status)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Status* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Status>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mpr.chubby.Status)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mpr.chubby.Status)
    MergeFrom(*source);
  }
}

void Status::MergeFrom(const Status& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mpr.chubby.Status)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.code() != 0) {
    set_code(from.code());
  }
  if (from.message().size() > 0) {

    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
}

void Status::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mpr.chubby.Status)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Status::CopyFrom(const Status& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mpr.chubby.Status)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Status::IsInitialized() const {

  return true;
}

void Status::Swap(Status* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Status::InternalSwap(Status* other) {
  std::swap(code_, other->code_);
  message_.Swap(&other->message_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Status::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Status_descriptor_;
  metadata.reflection = Status_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Status

// optional int64 code = 1;
void Status::clear_code() {
  code_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 Status::code() const {
  // @@protoc_insertion_point(field_get:mpr.chubby.Status.code)
  return code_;
}
 void Status::set_code(::google::protobuf::int64 value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:mpr.chubby.Status.code)
}

// optional string message = 2;
void Status::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Status::message() const {
  // @@protoc_insertion_point(field_get:mpr.chubby.Status.message)
  return message_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Status::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mpr.chubby.Status.message)
}
 void Status::set_message(const char* value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mpr.chubby.Status.message)
}
 void Status::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mpr.chubby.Status.message)
}
 ::std::string* Status::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:mpr.chubby.Status.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Status::release_message() {
  // @@protoc_insertion_point(field_release:mpr.chubby.Status.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Status::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:mpr.chubby.Status.message)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LoginResponse::kStatusFieldNumber;
const int LoginResponse::kUuidFieldNumber;
const int LoginResponse::kLeaderIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LoginResponse::LoginResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpr.chubby.LoginResponse)
}

void LoginResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  status_ = const_cast< ::mpr::chubby::Status*>(&::mpr::chubby::Status::default_instance());
}

LoginResponse::LoginResponse(const LoginResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mpr.chubby.LoginResponse)
}

void LoginResponse::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  status_ = NULL;
  uuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  leader_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

LoginResponse::~LoginResponse() {
  // @@protoc_insertion_point(destructor:mpr.chubby.LoginResponse)
  SharedDtor();
}

void LoginResponse::SharedDtor() {
  uuid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  leader_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete status_;
  }
}

void LoginResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginResponse_descriptor_;
}

const LoginResponse& LoginResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2eproto();
  return *default_instance_;
}

LoginResponse* LoginResponse::default_instance_ = NULL;

LoginResponse* LoginResponse::New(::google::protobuf::Arena* arena) const {
  LoginResponse* n = new LoginResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LoginResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mpr.chubby.LoginResponse)
  if (GetArenaNoVirtual() == NULL && status_ != NULL) delete status_;
  status_ = NULL;
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  leader_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool LoginResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpr.chubby.LoginResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .mpr.chubby.Status status = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_status()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_uuid;
        break;
      }

      // optional string uuid = 2;
      case 2: {
        if (tag == 18) {
         parse_uuid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uuid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->uuid().data(), this->uuid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "mpr.chubby.LoginResponse.uuid"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_leader_id;
        break;
      }

      // optional string leader_id = 3;
      case 3: {
        if (tag == 26) {
         parse_leader_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_leader_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->leader_id().data(), this->leader_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "mpr.chubby.LoginResponse.leader_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpr.chubby.LoginResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpr.chubby.LoginResponse)
  return false;
#undef DO_
}

void LoginResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpr.chubby.LoginResponse)
  // optional .mpr.chubby.Status status = 1;
  if (this->has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->status_, output);
  }

  // optional string uuid = 2;
  if (this->uuid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mpr.chubby.LoginResponse.uuid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->uuid(), output);
  }

  // optional string leader_id = 3;
  if (this->leader_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->leader_id().data(), this->leader_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mpr.chubby.LoginResponse.leader_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->leader_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:mpr.chubby.LoginResponse)
}

::google::protobuf::uint8* LoginResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mpr.chubby.LoginResponse)
  // optional .mpr.chubby.Status status = 1;
  if (this->has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->status_, false, target);
  }

  // optional string uuid = 2;
  if (this->uuid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mpr.chubby.LoginResponse.uuid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->uuid(), target);
  }

  // optional string leader_id = 3;
  if (this->leader_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->leader_id().data(), this->leader_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mpr.chubby.LoginResponse.leader_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->leader_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:mpr.chubby.LoginResponse)
  return target;
}

int LoginResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:mpr.chubby.LoginResponse)
  int total_size = 0;

  // optional .mpr.chubby.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->status_);
  }

  // optional string uuid = 2;
  if (this->uuid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->uuid());
  }

  // optional string leader_id = 3;
  if (this->leader_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->leader_id());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mpr.chubby.LoginResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const LoginResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const LoginResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mpr.chubby.LoginResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mpr.chubby.LoginResponse)
    MergeFrom(*source);
  }
}

void LoginResponse::MergeFrom(const LoginResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mpr.chubby.LoginResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.has_status()) {
    mutable_status()->::mpr::chubby::Status::MergeFrom(from.status());
  }
  if (from.uuid().size() > 0) {

    uuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uuid_);
  }
  if (from.leader_id().size() > 0) {

    leader_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.leader_id_);
  }
}

void LoginResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mpr.chubby.LoginResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginResponse::CopyFrom(const LoginResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mpr.chubby.LoginResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginResponse::IsInitialized() const {

  return true;
}

void LoginResponse::Swap(LoginResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LoginResponse::InternalSwap(LoginResponse* other) {
  std::swap(status_, other->status_);
  uuid_.Swap(&other->uuid_);
  leader_id_.Swap(&other->leader_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LoginResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginResponse_descriptor_;
  metadata.reflection = LoginResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LoginResponse

// optional .mpr.chubby.Status status = 1;
bool LoginResponse::has_status() const {
  return !_is_default_instance_ && status_ != NULL;
}
void LoginResponse::clear_status() {
  if (GetArenaNoVirtual() == NULL && status_ != NULL) delete status_;
  status_ = NULL;
}
const ::mpr::chubby::Status& LoginResponse::status() const {
  // @@protoc_insertion_point(field_get:mpr.chubby.LoginResponse.status)
  return status_ != NULL ? *status_ : *default_instance_->status_;
}
::mpr::chubby::Status* LoginResponse::mutable_status() {
  
  if (status_ == NULL) {
    status_ = new ::mpr::chubby::Status;
  }
  // @@protoc_insertion_point(field_mutable:mpr.chubby.LoginResponse.status)
  return status_;
}
::mpr::chubby::Status* LoginResponse::release_status() {
  // @@protoc_insertion_point(field_release:mpr.chubby.LoginResponse.status)
  
  ::mpr::chubby::Status* temp = status_;
  status_ = NULL;
  return temp;
}
void LoginResponse::set_allocated_status(::mpr::chubby::Status* status) {
  delete status_;
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mpr.chubby.LoginResponse.status)
}

// optional string uuid = 2;
void LoginResponse::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& LoginResponse::uuid() const {
  // @@protoc_insertion_point(field_get:mpr.chubby.LoginResponse.uuid)
  return uuid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LoginResponse::set_uuid(const ::std::string& value) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mpr.chubby.LoginResponse.uuid)
}
 void LoginResponse::set_uuid(const char* value) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mpr.chubby.LoginResponse.uuid)
}
 void LoginResponse::set_uuid(const char* value, size_t size) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mpr.chubby.LoginResponse.uuid)
}
 ::std::string* LoginResponse::mutable_uuid() {
  
  // @@protoc_insertion_point(field_mutable:mpr.chubby.LoginResponse.uuid)
  return uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* LoginResponse::release_uuid() {
  // @@protoc_insertion_point(field_release:mpr.chubby.LoginResponse.uuid)
  
  return uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LoginResponse::set_allocated_uuid(::std::string* uuid) {
  if (uuid != NULL) {
    
  } else {
    
  }
  uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:mpr.chubby.LoginResponse.uuid)
}

// optional string leader_id = 3;
void LoginResponse::clear_leader_id() {
  leader_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& LoginResponse::leader_id() const {
  // @@protoc_insertion_point(field_get:mpr.chubby.LoginResponse.leader_id)
  return leader_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LoginResponse::set_leader_id(const ::std::string& value) {
  
  leader_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mpr.chubby.LoginResponse.leader_id)
}
 void LoginResponse::set_leader_id(const char* value) {
  
  leader_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mpr.chubby.LoginResponse.leader_id)
}
 void LoginResponse::set_leader_id(const char* value, size_t size) {
  
  leader_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mpr.chubby.LoginResponse.leader_id)
}
 ::std::string* LoginResponse::mutable_leader_id() {
  
  // @@protoc_insertion_point(field_mutable:mpr.chubby.LoginResponse.leader_id)
  return leader_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* LoginResponse::release_leader_id() {
  // @@protoc_insertion_point(field_release:mpr.chubby.LoginResponse.leader_id)
  
  return leader_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LoginResponse::set_allocated_leader_id(::std::string* leader_id) {
  if (leader_id != NULL) {
    
  } else {
    
  }
  leader_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), leader_id);
  // @@protoc_insertion_point(field_set_allocated:mpr.chubby.LoginResponse.leader_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LogoutRequest::kUuidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LogoutRequest::LogoutRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpr.chubby.LogoutRequest)
}

void LogoutRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

LogoutRequest::LogoutRequest(const LogoutRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mpr.chubby.LogoutRequest)
}

void LogoutRequest::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

LogoutRequest::~LogoutRequest() {
  // @@protoc_insertion_point(destructor:mpr.chubby.LogoutRequest)
  SharedDtor();
}

void LogoutRequest::SharedDtor() {
  uuid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void LogoutRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogoutRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogoutRequest_descriptor_;
}

const LogoutRequest& LogoutRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2eproto();
  return *default_instance_;
}

LogoutRequest* LogoutRequest::default_instance_ = NULL;

LogoutRequest* LogoutRequest::New(::google::protobuf::Arena* arena) const {
  LogoutRequest* n = new LogoutRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LogoutRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mpr.chubby.LogoutRequest)
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool LogoutRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpr.chubby.LogoutRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string uuid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uuid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->uuid().data(), this->uuid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "mpr.chubby.LogoutRequest.uuid"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpr.chubby.LogoutRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpr.chubby.LogoutRequest)
  return false;
#undef DO_
}

void LogoutRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpr.chubby.LogoutRequest)
  // optional string uuid = 1;
  if (this->uuid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mpr.chubby.LogoutRequest.uuid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->uuid(), output);
  }

  // @@protoc_insertion_point(serialize_end:mpr.chubby.LogoutRequest)
}

::google::protobuf::uint8* LogoutRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mpr.chubby.LogoutRequest)
  // optional string uuid = 1;
  if (this->uuid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mpr.chubby.LogoutRequest.uuid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->uuid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:mpr.chubby.LogoutRequest)
  return target;
}

int LogoutRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:mpr.chubby.LogoutRequest)
  int total_size = 0;

  // optional string uuid = 1;
  if (this->uuid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->uuid());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogoutRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mpr.chubby.LogoutRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const LogoutRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const LogoutRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mpr.chubby.LogoutRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mpr.chubby.LogoutRequest)
    MergeFrom(*source);
  }
}

void LogoutRequest::MergeFrom(const LogoutRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mpr.chubby.LogoutRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.uuid().size() > 0) {

    uuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uuid_);
  }
}

void LogoutRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mpr.chubby.LogoutRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogoutRequest::CopyFrom(const LogoutRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mpr.chubby.LogoutRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogoutRequest::IsInitialized() const {

  return true;
}

void LogoutRequest::Swap(LogoutRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LogoutRequest::InternalSwap(LogoutRequest* other) {
  uuid_.Swap(&other->uuid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LogoutRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogoutRequest_descriptor_;
  metadata.reflection = LogoutRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LogoutRequest

// optional string uuid = 1;
void LogoutRequest::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& LogoutRequest::uuid() const {
  // @@protoc_insertion_point(field_get:mpr.chubby.LogoutRequest.uuid)
  return uuid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LogoutRequest::set_uuid(const ::std::string& value) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mpr.chubby.LogoutRequest.uuid)
}
 void LogoutRequest::set_uuid(const char* value) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mpr.chubby.LogoutRequest.uuid)
}
 void LogoutRequest::set_uuid(const char* value, size_t size) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mpr.chubby.LogoutRequest.uuid)
}
 ::std::string* LogoutRequest::mutable_uuid() {
  
  // @@protoc_insertion_point(field_mutable:mpr.chubby.LogoutRequest.uuid)
  return uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* LogoutRequest::release_uuid() {
  // @@protoc_insertion_point(field_release:mpr.chubby.LogoutRequest.uuid)
  
  return uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LogoutRequest::set_allocated_uuid(::std::string* uuid) {
  if (uuid != NULL) {
    
  } else {
    
  }
  uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:mpr.chubby.LogoutRequest.uuid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LogoutResponse::kStatusFieldNumber;
const int LogoutResponse::kLeaderIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LogoutResponse::LogoutResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpr.chubby.LogoutResponse)
}

void LogoutResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  status_ = const_cast< ::mpr::chubby::Status*>(&::mpr::chubby::Status::default_instance());
}

LogoutResponse::LogoutResponse(const LogoutResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mpr.chubby.LogoutResponse)
}

void LogoutResponse::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  status_ = NULL;
  leader_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

LogoutResponse::~LogoutResponse() {
  // @@protoc_insertion_point(destructor:mpr.chubby.LogoutResponse)
  SharedDtor();
}

void LogoutResponse::SharedDtor() {
  leader_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete status_;
  }
}

void LogoutResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogoutResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogoutResponse_descriptor_;
}

const LogoutResponse& LogoutResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2eproto();
  return *default_instance_;
}

LogoutResponse* LogoutResponse::default_instance_ = NULL;

LogoutResponse* LogoutResponse::New(::google::protobuf::Arena* arena) const {
  LogoutResponse* n = new LogoutResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LogoutResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mpr.chubby.LogoutResponse)
  if (GetArenaNoVirtual() == NULL && status_ != NULL) delete status_;
  status_ = NULL;
  leader_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool LogoutResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpr.chubby.LogoutResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .mpr.chubby.Status status = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_status()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_leader_id;
        break;
      }

      // optional string leader_id = 2;
      case 2: {
        if (tag == 18) {
         parse_leader_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_leader_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->leader_id().data(), this->leader_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "mpr.chubby.LogoutResponse.leader_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpr.chubby.LogoutResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpr.chubby.LogoutResponse)
  return false;
#undef DO_
}

void LogoutResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpr.chubby.LogoutResponse)
  // optional .mpr.chubby.Status status = 1;
  if (this->has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->status_, output);
  }

  // optional string leader_id = 2;
  if (this->leader_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->leader_id().data(), this->leader_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mpr.chubby.LogoutResponse.leader_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->leader_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:mpr.chubby.LogoutResponse)
}

::google::protobuf::uint8* LogoutResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mpr.chubby.LogoutResponse)
  // optional .mpr.chubby.Status status = 1;
  if (this->has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->status_, false, target);
  }

  // optional string leader_id = 2;
  if (this->leader_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->leader_id().data(), this->leader_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mpr.chubby.LogoutResponse.leader_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->leader_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:mpr.chubby.LogoutResponse)
  return target;
}

int LogoutResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:mpr.chubby.LogoutResponse)
  int total_size = 0;

  // optional .mpr.chubby.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->status_);
  }

  // optional string leader_id = 2;
  if (this->leader_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->leader_id());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogoutResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mpr.chubby.LogoutResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const LogoutResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const LogoutResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mpr.chubby.LogoutResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mpr.chubby.LogoutResponse)
    MergeFrom(*source);
  }
}

void LogoutResponse::MergeFrom(const LogoutResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mpr.chubby.LogoutResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.has_status()) {
    mutable_status()->::mpr::chubby::Status::MergeFrom(from.status());
  }
  if (from.leader_id().size() > 0) {

    leader_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.leader_id_);
  }
}

void LogoutResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mpr.chubby.LogoutResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogoutResponse::CopyFrom(const LogoutResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mpr.chubby.LogoutResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogoutResponse::IsInitialized() const {

  return true;
}

void LogoutResponse::Swap(LogoutResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LogoutResponse::InternalSwap(LogoutResponse* other) {
  std::swap(status_, other->status_);
  leader_id_.Swap(&other->leader_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LogoutResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogoutResponse_descriptor_;
  metadata.reflection = LogoutResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LogoutResponse

// optional .mpr.chubby.Status status = 1;
bool LogoutResponse::has_status() const {
  return !_is_default_instance_ && status_ != NULL;
}
void LogoutResponse::clear_status() {
  if (GetArenaNoVirtual() == NULL && status_ != NULL) delete status_;
  status_ = NULL;
}
const ::mpr::chubby::Status& LogoutResponse::status() const {
  // @@protoc_insertion_point(field_get:mpr.chubby.LogoutResponse.status)
  return status_ != NULL ? *status_ : *default_instance_->status_;
}
::mpr::chubby::Status* LogoutResponse::mutable_status() {
  
  if (status_ == NULL) {
    status_ = new ::mpr::chubby::Status;
  }
  // @@protoc_insertion_point(field_mutable:mpr.chubby.LogoutResponse.status)
  return status_;
}
::mpr::chubby::Status* LogoutResponse::release_status() {
  // @@protoc_insertion_point(field_release:mpr.chubby.LogoutResponse.status)
  
  ::mpr::chubby::Status* temp = status_;
  status_ = NULL;
  return temp;
}
void LogoutResponse::set_allocated_status(::mpr::chubby::Status* status) {
  delete status_;
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mpr.chubby.LogoutResponse.status)
}

// optional string leader_id = 2;
void LogoutResponse::clear_leader_id() {
  leader_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& LogoutResponse::leader_id() const {
  // @@protoc_insertion_point(field_get:mpr.chubby.LogoutResponse.leader_id)
  return leader_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LogoutResponse::set_leader_id(const ::std::string& value) {
  
  leader_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mpr.chubby.LogoutResponse.leader_id)
}
 void LogoutResponse::set_leader_id(const char* value) {
  
  leader_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mpr.chubby.LogoutResponse.leader_id)
}
 void LogoutResponse::set_leader_id(const char* value, size_t size) {
  
  leader_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mpr.chubby.LogoutResponse.leader_id)
}
 ::std::string* LogoutResponse::mutable_leader_id() {
  
  // @@protoc_insertion_point(field_mutable:mpr.chubby.LogoutResponse.leader_id)
  return leader_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* LogoutResponse::release_leader_id() {
  // @@protoc_insertion_point(field_release:mpr.chubby.LogoutResponse.leader_id)
  
  return leader_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LogoutResponse::set_allocated_leader_id(::std::string* leader_id) {
  if (leader_id != NULL) {
    
  } else {
    
  }
  leader_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), leader_id);
  // @@protoc_insertion_point(field_set_allocated:mpr.chubby.LogoutResponse.leader_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RegisterRequest::kUsernameFieldNumber;
const int RegisterRequest::kPasswdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RegisterRequest::RegisterRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpr.chubby.RegisterRequest)
}

void RegisterRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

RegisterRequest::RegisterRequest(const RegisterRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mpr.chubby.RegisterRequest)
}

void RegisterRequest::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  passwd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

RegisterRequest::~RegisterRequest() {
  // @@protoc_insertion_point(destructor:mpr.chubby.RegisterRequest)
  SharedDtor();
}

void RegisterRequest::SharedDtor() {
  username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  passwd_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void RegisterRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegisterRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegisterRequest_descriptor_;
}

const RegisterRequest& RegisterRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2eproto();
  return *default_instance_;
}

RegisterRequest* RegisterRequest::default_instance_ = NULL;

RegisterRequest* RegisterRequest::New(::google::protobuf::Arena* arena) const {
  RegisterRequest* n = new RegisterRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RegisterRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mpr.chubby.RegisterRequest)
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  passwd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool RegisterRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpr.chubby.RegisterRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string username = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "mpr.chubby.RegisterRequest.username"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_passwd;
        break;
      }

      // optional string passwd = 2;
      case 2: {
        if (tag == 18) {
         parse_passwd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_passwd()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->passwd().data(), this->passwd().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "mpr.chubby.RegisterRequest.passwd"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpr.chubby.RegisterRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpr.chubby.RegisterRequest)
  return false;
#undef DO_
}

void RegisterRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpr.chubby.RegisterRequest)
  // optional string username = 1;
  if (this->username().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mpr.chubby.RegisterRequest.username");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->username(), output);
  }

  // optional string passwd = 2;
  if (this->passwd().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->passwd().data(), this->passwd().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mpr.chubby.RegisterRequest.passwd");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->passwd(), output);
  }

  // @@protoc_insertion_point(serialize_end:mpr.chubby.RegisterRequest)
}

::google::protobuf::uint8* RegisterRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mpr.chubby.RegisterRequest)
  // optional string username = 1;
  if (this->username().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mpr.chubby.RegisterRequest.username");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->username(), target);
  }

  // optional string passwd = 2;
  if (this->passwd().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->passwd().data(), this->passwd().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mpr.chubby.RegisterRequest.passwd");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->passwd(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:mpr.chubby.RegisterRequest)
  return target;
}

int RegisterRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:mpr.chubby.RegisterRequest)
  int total_size = 0;

  // optional string username = 1;
  if (this->username().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->username());
  }

  // optional string passwd = 2;
  if (this->passwd().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->passwd());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegisterRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mpr.chubby.RegisterRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RegisterRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RegisterRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mpr.chubby.RegisterRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mpr.chubby.RegisterRequest)
    MergeFrom(*source);
  }
}

void RegisterRequest::MergeFrom(const RegisterRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mpr.chubby.RegisterRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.username().size() > 0) {

    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  if (from.passwd().size() > 0) {

    passwd_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.passwd_);
  }
}

void RegisterRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mpr.chubby.RegisterRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegisterRequest::CopyFrom(const RegisterRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mpr.chubby.RegisterRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterRequest::IsInitialized() const {

  return true;
}

void RegisterRequest::Swap(RegisterRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RegisterRequest::InternalSwap(RegisterRequest* other) {
  username_.Swap(&other->username_);
  passwd_.Swap(&other->passwd_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RegisterRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RegisterRequest_descriptor_;
  metadata.reflection = RegisterRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RegisterRequest

// optional string username = 1;
void RegisterRequest::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& RegisterRequest::username() const {
  // @@protoc_insertion_point(field_get:mpr.chubby.RegisterRequest.username)
  return username_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RegisterRequest::set_username(const ::std::string& value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mpr.chubby.RegisterRequest.username)
}
 void RegisterRequest::set_username(const char* value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mpr.chubby.RegisterRequest.username)
}
 void RegisterRequest::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mpr.chubby.RegisterRequest.username)
}
 ::std::string* RegisterRequest::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:mpr.chubby.RegisterRequest.username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RegisterRequest::release_username() {
  // @@protoc_insertion_point(field_release:mpr.chubby.RegisterRequest.username)
  
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RegisterRequest::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:mpr.chubby.RegisterRequest.username)
}

// optional string passwd = 2;
void RegisterRequest::clear_passwd() {
  passwd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& RegisterRequest::passwd() const {
  // @@protoc_insertion_point(field_get:mpr.chubby.RegisterRequest.passwd)
  return passwd_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RegisterRequest::set_passwd(const ::std::string& value) {
  
  passwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mpr.chubby.RegisterRequest.passwd)
}
 void RegisterRequest::set_passwd(const char* value) {
  
  passwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mpr.chubby.RegisterRequest.passwd)
}
 void RegisterRequest::set_passwd(const char* value, size_t size) {
  
  passwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mpr.chubby.RegisterRequest.passwd)
}
 ::std::string* RegisterRequest::mutable_passwd() {
  
  // @@protoc_insertion_point(field_mutable:mpr.chubby.RegisterRequest.passwd)
  return passwd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RegisterRequest::release_passwd() {
  // @@protoc_insertion_point(field_release:mpr.chubby.RegisterRequest.passwd)
  
  return passwd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RegisterRequest::set_allocated_passwd(::std::string* passwd) {
  if (passwd != NULL) {
    
  } else {
    
  }
  passwd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), passwd);
  // @@protoc_insertion_point(field_set_allocated:mpr.chubby.RegisterRequest.passwd)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RegisterResponse::kStatusFieldNumber;
const int RegisterResponse::kLeaderIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RegisterResponse::RegisterResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpr.chubby.RegisterResponse)
}

void RegisterResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  status_ = const_cast< ::mpr::chubby::Status*>(&::mpr::chubby::Status::default_instance());
}

RegisterResponse::RegisterResponse(const RegisterResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mpr.chubby.RegisterResponse)
}

void RegisterResponse::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  status_ = NULL;
  leader_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

RegisterResponse::~RegisterResponse() {
  // @@protoc_insertion_point(destructor:mpr.chubby.RegisterResponse)
  SharedDtor();
}

void RegisterResponse::SharedDtor() {
  leader_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete status_;
  }
}

void RegisterResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegisterResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegisterResponse_descriptor_;
}

const RegisterResponse& RegisterResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2eproto();
  return *default_instance_;
}

RegisterResponse* RegisterResponse::default_instance_ = NULL;

RegisterResponse* RegisterResponse::New(::google::protobuf::Arena* arena) const {
  RegisterResponse* n = new RegisterResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RegisterResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mpr.chubby.RegisterResponse)
  if (GetArenaNoVirtual() == NULL && status_ != NULL) delete status_;
  status_ = NULL;
  leader_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool RegisterResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpr.chubby.RegisterResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .mpr.chubby.Status status = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_status()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_leader_id;
        break;
      }

      // optional string leader_id = 2;
      case 2: {
        if (tag == 18) {
         parse_leader_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_leader_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->leader_id().data(), this->leader_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "mpr.chubby.RegisterResponse.leader_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpr.chubby.RegisterResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpr.chubby.RegisterResponse)
  return false;
#undef DO_
}

void RegisterResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpr.chubby.RegisterResponse)
  // optional .mpr.chubby.Status status = 1;
  if (this->has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->status_, output);
  }

  // optional string leader_id = 2;
  if (this->leader_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->leader_id().data(), this->leader_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mpr.chubby.RegisterResponse.leader_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->leader_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:mpr.chubby.RegisterResponse)
}

::google::protobuf::uint8* RegisterResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mpr.chubby.RegisterResponse)
  // optional .mpr.chubby.Status status = 1;
  if (this->has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->status_, false, target);
  }

  // optional string leader_id = 2;
  if (this->leader_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->leader_id().data(), this->leader_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mpr.chubby.RegisterResponse.leader_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->leader_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:mpr.chubby.RegisterResponse)
  return target;
}

int RegisterResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:mpr.chubby.RegisterResponse)
  int total_size = 0;

  // optional .mpr.chubby.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->status_);
  }

  // optional string leader_id = 2;
  if (this->leader_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->leader_id());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegisterResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mpr.chubby.RegisterResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RegisterResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RegisterResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mpr.chubby.RegisterResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mpr.chubby.RegisterResponse)
    MergeFrom(*source);
  }
}

void RegisterResponse::MergeFrom(const RegisterResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mpr.chubby.RegisterResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.has_status()) {
    mutable_status()->::mpr::chubby::Status::MergeFrom(from.status());
  }
  if (from.leader_id().size() > 0) {

    leader_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.leader_id_);
  }
}

void RegisterResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mpr.chubby.RegisterResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegisterResponse::CopyFrom(const RegisterResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mpr.chubby.RegisterResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterResponse::IsInitialized() const {

  return true;
}

void RegisterResponse::Swap(RegisterResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RegisterResponse::InternalSwap(RegisterResponse* other) {
  std::swap(status_, other->status_);
  leader_id_.Swap(&other->leader_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RegisterResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RegisterResponse_descriptor_;
  metadata.reflection = RegisterResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RegisterResponse

// optional .mpr.chubby.Status status = 1;
bool RegisterResponse::has_status() const {
  return !_is_default_instance_ && status_ != NULL;
}
void RegisterResponse::clear_status() {
  if (GetArenaNoVirtual() == NULL && status_ != NULL) delete status_;
  status_ = NULL;
}
const ::mpr::chubby::Status& RegisterResponse::status() const {
  // @@protoc_insertion_point(field_get:mpr.chubby.RegisterResponse.status)
  return status_ != NULL ? *status_ : *default_instance_->status_;
}
::mpr::chubby::Status* RegisterResponse::mutable_status() {
  
  if (status_ == NULL) {
    status_ = new ::mpr::chubby::Status;
  }
  // @@protoc_insertion_point(field_mutable:mpr.chubby.RegisterResponse.status)
  return status_;
}
::mpr::chubby::Status* RegisterResponse::release_status() {
  // @@protoc_insertion_point(field_release:mpr.chubby.RegisterResponse.status)
  
  ::mpr::chubby::Status* temp = status_;
  status_ = NULL;
  return temp;
}
void RegisterResponse::set_allocated_status(::mpr::chubby::Status* status) {
  delete status_;
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mpr.chubby.RegisterResponse.status)
}

// optional string leader_id = 2;
void RegisterResponse::clear_leader_id() {
  leader_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& RegisterResponse::leader_id() const {
  // @@protoc_insertion_point(field_get:mpr.chubby.RegisterResponse.leader_id)
  return leader_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RegisterResponse::set_leader_id(const ::std::string& value) {
  
  leader_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mpr.chubby.RegisterResponse.leader_id)
}
 void RegisterResponse::set_leader_id(const char* value) {
  
  leader_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mpr.chubby.RegisterResponse.leader_id)
}
 void RegisterResponse::set_leader_id(const char* value, size_t size) {
  
  leader_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mpr.chubby.RegisterResponse.leader_id)
}
 ::std::string* RegisterResponse::mutable_leader_id() {
  
  // @@protoc_insertion_point(field_mutable:mpr.chubby.RegisterResponse.leader_id)
  return leader_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RegisterResponse::release_leader_id() {
  // @@protoc_insertion_point(field_release:mpr.chubby.RegisterResponse.leader_id)
  
  return leader_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RegisterResponse::set_allocated_leader_id(::std::string* leader_id) {
  if (leader_id != NULL) {
    
  } else {
    
  }
  leader_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), leader_id);
  // @@protoc_insertion_point(field_set_allocated:mpr.chubby.RegisterResponse.leader_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CleanBinlogRequest::kEndIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CleanBinlogRequest::CleanBinlogRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpr.chubby.CleanBinlogRequest)
}

void CleanBinlogRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

CleanBinlogRequest::CleanBinlogRequest(const CleanBinlogRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mpr.chubby.CleanBinlogRequest)
}

void CleanBinlogRequest::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  end_index_ = GOOGLE_LONGLONG(0);
}

CleanBinlogRequest::~CleanBinlogRequest() {
  // @@protoc_insertion_point(destructor:mpr.chubby.CleanBinlogRequest)
  SharedDtor();
}

void CleanBinlogRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CleanBinlogRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CleanBinlogRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CleanBinlogRequest_descriptor_;
}

const CleanBinlogRequest& CleanBinlogRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2eproto();
  return *default_instance_;
}

CleanBinlogRequest* CleanBinlogRequest::default_instance_ = NULL;

CleanBinlogRequest* CleanBinlogRequest::New(::google::protobuf::Arena* arena) const {
  CleanBinlogRequest* n = new CleanBinlogRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CleanBinlogRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mpr.chubby.CleanBinlogRequest)
  end_index_ = GOOGLE_LONGLONG(0);
}

bool CleanBinlogRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpr.chubby.CleanBinlogRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 end_index = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &end_index_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpr.chubby.CleanBinlogRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpr.chubby.CleanBinlogRequest)
  return false;
#undef DO_
}

void CleanBinlogRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpr.chubby.CleanBinlogRequest)
  // optional int64 end_index = 1;
  if (this->end_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->end_index(), output);
  }

  // @@protoc_insertion_point(serialize_end:mpr.chubby.CleanBinlogRequest)
}

::google::protobuf::uint8* CleanBinlogRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mpr.chubby.CleanBinlogRequest)
  // optional int64 end_index = 1;
  if (this->end_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->end_index(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:mpr.chubby.CleanBinlogRequest)
  return target;
}

int CleanBinlogRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:mpr.chubby.CleanBinlogRequest)
  int total_size = 0;

  // optional int64 end_index = 1;
  if (this->end_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->end_index());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CleanBinlogRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mpr.chubby.CleanBinlogRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const CleanBinlogRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CleanBinlogRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mpr.chubby.CleanBinlogRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mpr.chubby.CleanBinlogRequest)
    MergeFrom(*source);
  }
}

void CleanBinlogRequest::MergeFrom(const CleanBinlogRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mpr.chubby.CleanBinlogRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.end_index() != 0) {
    set_end_index(from.end_index());
  }
}

void CleanBinlogRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mpr.chubby.CleanBinlogRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CleanBinlogRequest::CopyFrom(const CleanBinlogRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mpr.chubby.CleanBinlogRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CleanBinlogRequest::IsInitialized() const {

  return true;
}

void CleanBinlogRequest::Swap(CleanBinlogRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CleanBinlogRequest::InternalSwap(CleanBinlogRequest* other) {
  std::swap(end_index_, other->end_index_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CleanBinlogRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CleanBinlogRequest_descriptor_;
  metadata.reflection = CleanBinlogRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CleanBinlogRequest

// optional int64 end_index = 1;
void CleanBinlogRequest::clear_end_index() {
  end_index_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 CleanBinlogRequest::end_index() const {
  // @@protoc_insertion_point(field_get:mpr.chubby.CleanBinlogRequest.end_index)
  return end_index_;
}
 void CleanBinlogRequest::set_end_index(::google::protobuf::int64 value) {
  
  end_index_ = value;
  // @@protoc_insertion_point(field_set:mpr.chubby.CleanBinlogRequest.end_index)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CleanBinlogResponse::kSuccessFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CleanBinlogResponse::CleanBinlogResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpr.chubby.CleanBinlogResponse)
}

void CleanBinlogResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

CleanBinlogResponse::CleanBinlogResponse(const CleanBinlogResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mpr.chubby.CleanBinlogResponse)
}

void CleanBinlogResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  success_ = false;
}

CleanBinlogResponse::~CleanBinlogResponse() {
  // @@protoc_insertion_point(destructor:mpr.chubby.CleanBinlogResponse)
  SharedDtor();
}

void CleanBinlogResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CleanBinlogResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CleanBinlogResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CleanBinlogResponse_descriptor_;
}

const CleanBinlogResponse& CleanBinlogResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2eproto();
  return *default_instance_;
}

CleanBinlogResponse* CleanBinlogResponse::default_instance_ = NULL;

CleanBinlogResponse* CleanBinlogResponse::New(::google::protobuf::Arena* arena) const {
  CleanBinlogResponse* n = new CleanBinlogResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CleanBinlogResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mpr.chubby.CleanBinlogResponse)
  success_ = false;
}

bool CleanBinlogResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpr.chubby.CleanBinlogResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool success = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpr.chubby.CleanBinlogResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpr.chubby.CleanBinlogResponse)
  return false;
#undef DO_
}

void CleanBinlogResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpr.chubby.CleanBinlogResponse)
  // optional bool success = 1;
  if (this->success() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->success(), output);
  }

  // @@protoc_insertion_point(serialize_end:mpr.chubby.CleanBinlogResponse)
}

::google::protobuf::uint8* CleanBinlogResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mpr.chubby.CleanBinlogResponse)
  // optional bool success = 1;
  if (this->success() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->success(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:mpr.chubby.CleanBinlogResponse)
  return target;
}

int CleanBinlogResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:mpr.chubby.CleanBinlogResponse)
  int total_size = 0;

  // optional bool success = 1;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CleanBinlogResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mpr.chubby.CleanBinlogResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const CleanBinlogResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CleanBinlogResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mpr.chubby.CleanBinlogResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mpr.chubby.CleanBinlogResponse)
    MergeFrom(*source);
  }
}

void CleanBinlogResponse::MergeFrom(const CleanBinlogResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mpr.chubby.CleanBinlogResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.success() != 0) {
    set_success(from.success());
  }
}

void CleanBinlogResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mpr.chubby.CleanBinlogResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CleanBinlogResponse::CopyFrom(const CleanBinlogResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mpr.chubby.CleanBinlogResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CleanBinlogResponse::IsInitialized() const {

  return true;
}

void CleanBinlogResponse::Swap(CleanBinlogResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CleanBinlogResponse::InternalSwap(CleanBinlogResponse* other) {
  std::swap(success_, other->success_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CleanBinlogResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CleanBinlogResponse_descriptor_;
  metadata.reflection = CleanBinlogResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CleanBinlogResponse

// optional bool success = 1;
void CleanBinlogResponse::clear_success() {
  success_ = false;
}
 bool CleanBinlogResponse::success() const {
  // @@protoc_insertion_point(field_get:mpr.chubby.CleanBinlogResponse.success)
  return success_;
}
 void CleanBinlogResponse::set_success(bool value) {
  
  success_ = value;
  // @@protoc_insertion_point(field_set:mpr.chubby.CleanBinlogResponse.success)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RpcStatRequest::kOpFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RpcStatRequest::RpcStatRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpr.chubby.RpcStatRequest)
}

void RpcStatRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

RpcStatRequest::RpcStatRequest(const RpcStatRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mpr.chubby.RpcStatRequest)
}

void RpcStatRequest::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

RpcStatRequest::~RpcStatRequest() {
  // @@protoc_insertion_point(destructor:mpr.chubby.RpcStatRequest)
  SharedDtor();
}

void RpcStatRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RpcStatRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RpcStatRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RpcStatRequest_descriptor_;
}

const RpcStatRequest& RpcStatRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2eproto();
  return *default_instance_;
}

RpcStatRequest* RpcStatRequest::default_instance_ = NULL;

RpcStatRequest* RpcStatRequest::New(::google::protobuf::Arena* arena) const {
  RpcStatRequest* n = new RpcStatRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RpcStatRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mpr.chubby.RpcStatRequest)
  op_.Clear();
}

bool RpcStatRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpr.chubby.RpcStatRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .mpr.chubby.StatOperation op = 1;
      case 1: {
        if (tag == 10) {
          ::google::protobuf::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::google::protobuf::io::CodedInputStream::Limit limit = input->PushLimit(length);
          while (input->BytesUntilLimit() > 0) {
            int value;
            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
            add_op(static_cast< ::mpr::chubby::StatOperation >(value));
          }
          input->PopLimit(limit);
        } else if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          add_op(static_cast< ::mpr::chubby::StatOperation >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpr.chubby.RpcStatRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpr.chubby.RpcStatRequest)
  return false;
#undef DO_
}

void RpcStatRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpr.chubby.RpcStatRequest)
  // repeated .mpr.chubby.StatOperation op = 1;
  if (this->op_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      output);
    output->WriteVarint32(_op_cached_byte_size_);
  }
  for (int i = 0; i < this->op_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnumNoTag(
      this->op(i), output);
  }

  // @@protoc_insertion_point(serialize_end:mpr.chubby.RpcStatRequest)
}

::google::protobuf::uint8* RpcStatRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mpr.chubby.RpcStatRequest)
  // repeated .mpr.chubby.StatOperation op = 1;
  if (this->op_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(    _op_cached_byte_size_, target);
  }
  for (int i = 0; i < this->op_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumNoTagToArray(
      this->op(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:mpr.chubby.RpcStatRequest)
  return target;
}

int RpcStatRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:mpr.chubby.RpcStatRequest)
  int total_size = 0;

  // repeated .mpr.chubby.StatOperation op = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->op_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->op(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _op_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RpcStatRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mpr.chubby.RpcStatRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RpcStatRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RpcStatRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mpr.chubby.RpcStatRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mpr.chubby.RpcStatRequest)
    MergeFrom(*source);
  }
}

void RpcStatRequest::MergeFrom(const RpcStatRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mpr.chubby.RpcStatRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  op_.MergeFrom(from.op_);
}

void RpcStatRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mpr.chubby.RpcStatRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpcStatRequest::CopyFrom(const RpcStatRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mpr.chubby.RpcStatRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpcStatRequest::IsInitialized() const {

  return true;
}

void RpcStatRequest::Swap(RpcStatRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RpcStatRequest::InternalSwap(RpcStatRequest* other) {
  op_.UnsafeArenaSwap(&other->op_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RpcStatRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RpcStatRequest_descriptor_;
  metadata.reflection = RpcStatRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RpcStatRequest

// repeated .mpr.chubby.StatOperation op = 1;
int RpcStatRequest::op_size() const {
  return op_.size();
}
void RpcStatRequest::clear_op() {
  op_.Clear();
}
 ::mpr::chubby::StatOperation RpcStatRequest::op(int index) const {
  // @@protoc_insertion_point(field_get:mpr.chubby.RpcStatRequest.op)
  return static_cast< ::mpr::chubby::StatOperation >(op_.Get(index));
}
 void RpcStatRequest::set_op(int index, ::mpr::chubby::StatOperation value) {
  op_.Set(index, value);
  // @@protoc_insertion_point(field_set:mpr.chubby.RpcStatRequest.op)
}
 void RpcStatRequest::add_op(::mpr::chubby::StatOperation value) {
  op_.Add(value);
  // @@protoc_insertion_point(field_add:mpr.chubby.RpcStatRequest.op)
}
 const ::google::protobuf::RepeatedField<int>&
RpcStatRequest::op() const {
  // @@protoc_insertion_point(field_list:mpr.chubby.RpcStatRequest.op)
  return op_;
}
 ::google::protobuf::RepeatedField<int>*
RpcStatRequest::mutable_op() {
  // @@protoc_insertion_point(field_mutable_list:mpr.chubby.RpcStatRequest.op)
  return &op_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RpcStatResponse::kStatusFieldNumber;
const int RpcStatResponse::kStatsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RpcStatResponse::RpcStatResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpr.chubby.RpcStatResponse)
}

void RpcStatResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

RpcStatResponse::RpcStatResponse(const RpcStatResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mpr.chubby.RpcStatResponse)
}

void RpcStatResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  status_ = 0;
}

RpcStatResponse::~RpcStatResponse() {
  // @@protoc_insertion_point(destructor:mpr.chubby.RpcStatResponse)
  SharedDtor();
}

void RpcStatResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RpcStatResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RpcStatResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RpcStatResponse_descriptor_;
}

const RpcStatResponse& RpcStatResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2eproto();
  return *default_instance_;
}

RpcStatResponse* RpcStatResponse::default_instance_ = NULL;

RpcStatResponse* RpcStatResponse::New(::google::protobuf::Arena* arena) const {
  RpcStatResponse* n = new RpcStatResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RpcStatResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mpr.chubby.RpcStatResponse)
  status_ = 0;
  stats_.Clear();
}

bool RpcStatResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpr.chubby.RpcStatResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .mpr.chubby.NodeStatus status = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::mpr::chubby::NodeStatus >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_stats;
        break;
      }

      // repeated .mpr.chubby.StatInfo stats = 2;
      case 2: {
        if (tag == 18) {
         parse_stats:
          DO_(input->IncrementRecursionDepth());
         parse_loop_stats:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_stats()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_stats;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpr.chubby.RpcStatResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpr.chubby.RpcStatResponse)
  return false;
#undef DO_
}

void RpcStatResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpr.chubby.RpcStatResponse)
  // optional .mpr.chubby.NodeStatus status = 1;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  // repeated .mpr.chubby.StatInfo stats = 2;
  for (unsigned int i = 0, n = this->stats_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->stats(i), output);
  }

  // @@protoc_insertion_point(serialize_end:mpr.chubby.RpcStatResponse)
}

::google::protobuf::uint8* RpcStatResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mpr.chubby.RpcStatResponse)
  // optional .mpr.chubby.NodeStatus status = 1;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  // repeated .mpr.chubby.StatInfo stats = 2;
  for (unsigned int i = 0, n = this->stats_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->stats(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:mpr.chubby.RpcStatResponse)
  return target;
}

int RpcStatResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:mpr.chubby.RpcStatResponse)
  int total_size = 0;

  // optional .mpr.chubby.NodeStatus status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  // repeated .mpr.chubby.StatInfo stats = 2;
  total_size += 1 * this->stats_size();
  for (int i = 0; i < this->stats_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stats(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RpcStatResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mpr.chubby.RpcStatResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RpcStatResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RpcStatResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mpr.chubby.RpcStatResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mpr.chubby.RpcStatResponse)
    MergeFrom(*source);
  }
}

void RpcStatResponse::MergeFrom(const RpcStatResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mpr.chubby.RpcStatResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  stats_.MergeFrom(from.stats_);
  if (from.status() != 0) {
    set_status(from.status());
  }
}

void RpcStatResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mpr.chubby.RpcStatResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpcStatResponse::CopyFrom(const RpcStatResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mpr.chubby.RpcStatResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpcStatResponse::IsInitialized() const {

  return true;
}

void RpcStatResponse::Swap(RpcStatResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RpcStatResponse::InternalSwap(RpcStatResponse* other) {
  std::swap(status_, other->status_);
  stats_.UnsafeArenaSwap(&other->stats_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RpcStatResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RpcStatResponse_descriptor_;
  metadata.reflection = RpcStatResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RpcStatResponse

// optional .mpr.chubby.NodeStatus status = 1;
void RpcStatResponse::clear_status() {
  status_ = 0;
}
 ::mpr::chubby::NodeStatus RpcStatResponse::status() const {
  // @@protoc_insertion_point(field_get:mpr.chubby.RpcStatResponse.status)
  return static_cast< ::mpr::chubby::NodeStatus >(status_);
}
 void RpcStatResponse::set_status(::mpr::chubby::NodeStatus value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:mpr.chubby.RpcStatResponse.status)
}

// repeated .mpr.chubby.StatInfo stats = 2;
int RpcStatResponse::stats_size() const {
  return stats_.size();
}
void RpcStatResponse::clear_stats() {
  stats_.Clear();
}
const ::mpr::chubby::StatInfo& RpcStatResponse::stats(int index) const {
  // @@protoc_insertion_point(field_get:mpr.chubby.RpcStatResponse.stats)
  return stats_.Get(index);
}
::mpr::chubby::StatInfo* RpcStatResponse::mutable_stats(int index) {
  // @@protoc_insertion_point(field_mutable:mpr.chubby.RpcStatResponse.stats)
  return stats_.Mutable(index);
}
::mpr::chubby::StatInfo* RpcStatResponse::add_stats() {
  // @@protoc_insertion_point(field_add:mpr.chubby.RpcStatResponse.stats)
  return stats_.Add();
}
::google::protobuf::RepeatedPtrField< ::mpr::chubby::StatInfo >*
RpcStatResponse::mutable_stats() {
  // @@protoc_insertion_point(field_mutable_list:mpr.chubby.RpcStatResponse.stats)
  return &stats_;
}
const ::google::protobuf::RepeatedPtrField< ::mpr::chubby::StatInfo >&
RpcStatResponse::stats() const {
  // @@protoc_insertion_point(field_list:mpr.chubby.RpcStatResponse.stats)
  return stats_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace chubby
}  // namespace mpr

// @@protoc_insertion_point(global_scope)
