// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: service.proto

#ifndef PROTOBUF_service_2eproto__INCLUDED
#define PROTOBUF_service_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace mpr {
namespace chubby {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_service_2eproto();
void protobuf_AssignDesc_service_2eproto();
void protobuf_ShutdownFile_service_2eproto();

class AppendEntriesRequest;
class AppendEntriesResponse;
class CleanBinlogRequest;
class CleanBinlogResponse;
class DelRequest;
class DelResponse;
class Entry;
class GetRequest;
class GetResponse;
class KeepAliveRequest;
class KeepAliveResponse;
class LockRequest;
class LockResponse;
class LoginRequest;
class LoginResponse;
class LogoutRequest;
class LogoutResponse;
class PutRequest;
class PutResponse;
class RegisterRequest;
class RegisterResponse;
class RpcStatRequest;
class RpcStatResponse;
class ScanItem;
class ScanRequest;
class ScanResponse;
class ShowStatusRequest;
class ShowStatusResponse;
class StatInfo;
class Status;
class UnLockRequest;
class UnLockResponse;
class UserInfo;
class VoteRequest;
class VoteResponse;

enum NodeStatus {
  kLeader = 0,
  kCandiate = 1,
  kFollower = 2,
  kOffline = 3,
  NodeStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  NodeStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool NodeStatus_IsValid(int value);
const NodeStatus NodeStatus_MIN = kLeader;
const NodeStatus NodeStatus_MAX = kOffline;
const int NodeStatus_ARRAYSIZE = NodeStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* NodeStatus_descriptor();
inline const ::std::string& NodeStatus_Name(NodeStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    NodeStatus_descriptor(), value);
}
inline bool NodeStatus_Parse(
    const ::std::string& name, NodeStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NodeStatus>(
    NodeStatus_descriptor(), name, value);
}
enum LogOperation {
  kLogOperationUnknown = 0,
  kPut = 1,
  kDel = 2,
  kLock = 3,
  kUnLock = 4,
  kLogin = 5,
  kLogout = 6,
  kRegister = 7,
  kNop = 10,
  LogOperation_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  LogOperation_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool LogOperation_IsValid(int value);
const LogOperation LogOperation_MIN = kLogOperationUnknown;
const LogOperation LogOperation_MAX = kNop;
const int LogOperation_ARRAYSIZE = LogOperation_MAX + 1;

const ::google::protobuf::EnumDescriptor* LogOperation_descriptor();
inline const ::std::string& LogOperation_Name(LogOperation value) {
  return ::google::protobuf::internal::NameOfEnum(
    LogOperation_descriptor(), value);
}
inline bool LogOperation_Parse(
    const ::std::string& name, LogOperation* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LogOperation>(
    LogOperation_descriptor(), name, value);
}
enum StatOperation {
  kStatOperationUnknown = 0,
  kPutOp = 1,
  kGetOp = 2,
  kDeleteOp = 3,
  kScanOp = 4,
  kKeepAliveOp = 5,
  kLockOp = 6,
  kUnlockOp = 7,
  StatOperation_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  StatOperation_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool StatOperation_IsValid(int value);
const StatOperation StatOperation_MIN = kStatOperationUnknown;
const StatOperation StatOperation_MAX = kUnlockOp;
const int StatOperation_ARRAYSIZE = StatOperation_MAX + 1;

const ::google::protobuf::EnumDescriptor* StatOperation_descriptor();
inline const ::std::string& StatOperation_Name(StatOperation value) {
  return ::google::protobuf::internal::NameOfEnum(
    StatOperation_descriptor(), value);
}
inline bool StatOperation_Parse(
    const ::std::string& name, StatOperation* value) {
  return ::google::protobuf::internal::ParseNamedEnum<StatOperation>(
    StatOperation_descriptor(), name, value);
}
// ===================================================================

class UserInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mpr.chubby.UserInfo) */ {
 public:
  UserInfo();
  virtual ~UserInfo();

  UserInfo(const UserInfo& from);

  inline UserInfo& operator=(const UserInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserInfo& default_instance();

  void Swap(UserInfo* other);

  // implements Message ----------------------------------------------

  inline UserInfo* New() const { return New(NULL); }

  UserInfo* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserInfo& from);
  void MergeFrom(const UserInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UserInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string username = 1;
  void clear_username();
  static const int kUsernameFieldNumber = 1;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // optional string password = 2;
  void clear_password();
  static const int kPasswordFieldNumber = 2;
  const ::std::string& password() const;
  void set_password(const ::std::string& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  ::std::string* mutable_password();
  ::std::string* release_password();
  void set_allocated_password(::std::string* password);

  // @@protoc_insertion_point(class_scope:mpr.chubby.UserInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::google::protobuf::internal::ArenaStringPtr password_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_service_2eproto();
  friend void protobuf_AssignDesc_service_2eproto();
  friend void protobuf_ShutdownFile_service_2eproto();

  void InitAsDefaultInstance();
  static UserInfo* default_instance_;
};
// -------------------------------------------------------------------

class Entry : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mpr.chubby.Entry) */ {
 public:
  Entry();
  virtual ~Entry();

  Entry(const Entry& from);

  inline Entry& operator=(const Entry& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Entry& default_instance();

  void Swap(Entry* other);

  // implements Message ----------------------------------------------

  inline Entry* New() const { return New(NULL); }

  Entry* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Entry& from);
  void MergeFrom(const Entry& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Entry* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string key = 1;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // optional bytes value = 2;
  void clear_value();
  static const int kValueFieldNumber = 2;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // optional int64 term = 3;
  void clear_term();
  static const int kTermFieldNumber = 3;
  ::google::protobuf::int64 term() const;
  void set_term(::google::protobuf::int64 value);

  // optional .mpr.chubby.LogOperation op = 4;
  void clear_op();
  static const int kOpFieldNumber = 4;
  ::mpr::chubby::LogOperation op() const;
  void set_op(::mpr::chubby::LogOperation value);

  // optional string user = 5;
  void clear_user();
  static const int kUserFieldNumber = 5;
  const ::std::string& user() const;
  void set_user(const ::std::string& value);
  void set_user(const char* value);
  void set_user(const char* value, size_t size);
  ::std::string* mutable_user();
  ::std::string* release_user();
  void set_allocated_user(::std::string* user);

  // @@protoc_insertion_point(class_scope:mpr.chubby.Entry)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  ::google::protobuf::int64 term_;
  ::google::protobuf::internal::ArenaStringPtr user_;
  int op_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_service_2eproto();
  friend void protobuf_AssignDesc_service_2eproto();
  friend void protobuf_ShutdownFile_service_2eproto();

  void InitAsDefaultInstance();
  static Entry* default_instance_;
};
// -------------------------------------------------------------------

class StatInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mpr.chubby.StatInfo) */ {
 public:
  StatInfo();
  virtual ~StatInfo();

  StatInfo(const StatInfo& from);

  inline StatInfo& operator=(const StatInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StatInfo& default_instance();

  void Swap(StatInfo* other);

  // implements Message ----------------------------------------------

  inline StatInfo* New() const { return New(NULL); }

  StatInfo* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StatInfo& from);
  void MergeFrom(const StatInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(StatInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 current_stat = 1;
  void clear_current_stat();
  static const int kCurrentStatFieldNumber = 1;
  ::google::protobuf::int64 current_stat() const;
  void set_current_stat(::google::protobuf::int64 value);

  // optional int64 average_stat = 2;
  void clear_average_stat();
  static const int kAverageStatFieldNumber = 2;
  ::google::protobuf::int64 average_stat() const;
  void set_average_stat(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:mpr.chubby.StatInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int64 current_stat_;
  ::google::protobuf::int64 average_stat_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_service_2eproto();
  friend void protobuf_AssignDesc_service_2eproto();
  friend void protobuf_ShutdownFile_service_2eproto();

  void InitAsDefaultInstance();
  static StatInfo* default_instance_;
};
// -------------------------------------------------------------------

class AppendEntriesRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mpr.chubby.AppendEntriesRequest) */ {
 public:
  AppendEntriesRequest();
  virtual ~AppendEntriesRequest();

  AppendEntriesRequest(const AppendEntriesRequest& from);

  inline AppendEntriesRequest& operator=(const AppendEntriesRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AppendEntriesRequest& default_instance();

  void Swap(AppendEntriesRequest* other);

  // implements Message ----------------------------------------------

  inline AppendEntriesRequest* New() const { return New(NULL); }

  AppendEntriesRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AppendEntriesRequest& from);
  void MergeFrom(const AppendEntriesRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AppendEntriesRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 term = 1;
  void clear_term();
  static const int kTermFieldNumber = 1;
  ::google::protobuf::int64 term() const;
  void set_term(::google::protobuf::int64 value);

  // optional string leader_id = 2;
  void clear_leader_id();
  static const int kLeaderIdFieldNumber = 2;
  const ::std::string& leader_id() const;
  void set_leader_id(const ::std::string& value);
  void set_leader_id(const char* value);
  void set_leader_id(const char* value, size_t size);
  ::std::string* mutable_leader_id();
  ::std::string* release_leader_id();
  void set_allocated_leader_id(::std::string* leader_id);

  // optional int64 prev_log_index = 3;
  void clear_prev_log_index();
  static const int kPrevLogIndexFieldNumber = 3;
  ::google::protobuf::int64 prev_log_index() const;
  void set_prev_log_index(::google::protobuf::int64 value);

  // optional int64 prev_log_term = 4;
  void clear_prev_log_term();
  static const int kPrevLogTermFieldNumber = 4;
  ::google::protobuf::int64 prev_log_term() const;
  void set_prev_log_term(::google::protobuf::int64 value);

  // optional int64 leader_commit_index = 5;
  void clear_leader_commit_index();
  static const int kLeaderCommitIndexFieldNumber = 5;
  ::google::protobuf::int64 leader_commit_index() const;
  void set_leader_commit_index(::google::protobuf::int64 value);

  // repeated .mpr.chubby.Entry entries = 6;
  int entries_size() const;
  void clear_entries();
  static const int kEntriesFieldNumber = 6;
  const ::mpr::chubby::Entry& entries(int index) const;
  ::mpr::chubby::Entry* mutable_entries(int index);
  ::mpr::chubby::Entry* add_entries();
  ::google::protobuf::RepeatedPtrField< ::mpr::chubby::Entry >*
      mutable_entries();
  const ::google::protobuf::RepeatedPtrField< ::mpr::chubby::Entry >&
      entries() const;

  // @@protoc_insertion_point(class_scope:mpr.chubby.AppendEntriesRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int64 term_;
  ::google::protobuf::internal::ArenaStringPtr leader_id_;
  ::google::protobuf::int64 prev_log_index_;
  ::google::protobuf::int64 prev_log_term_;
  ::google::protobuf::int64 leader_commit_index_;
  ::google::protobuf::RepeatedPtrField< ::mpr::chubby::Entry > entries_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_service_2eproto();
  friend void protobuf_AssignDesc_service_2eproto();
  friend void protobuf_ShutdownFile_service_2eproto();

  void InitAsDefaultInstance();
  static AppendEntriesRequest* default_instance_;
};
// -------------------------------------------------------------------

class AppendEntriesResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mpr.chubby.AppendEntriesResponse) */ {
 public:
  AppendEntriesResponse();
  virtual ~AppendEntriesResponse();

  AppendEntriesResponse(const AppendEntriesResponse& from);

  inline AppendEntriesResponse& operator=(const AppendEntriesResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AppendEntriesResponse& default_instance();

  void Swap(AppendEntriesResponse* other);

  // implements Message ----------------------------------------------

  inline AppendEntriesResponse* New() const { return New(NULL); }

  AppendEntriesResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AppendEntriesResponse& from);
  void MergeFrom(const AppendEntriesResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AppendEntriesResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 current_term = 1;
  void clear_current_term();
  static const int kCurrentTermFieldNumber = 1;
  ::google::protobuf::int64 current_term() const;
  void set_current_term(::google::protobuf::int64 value);

  // optional bool success = 2;
  void clear_success();
  static const int kSuccessFieldNumber = 2;
  bool success() const;
  void set_success(bool value);

  // optional int64 log_length = 3;
  void clear_log_length();
  static const int kLogLengthFieldNumber = 3;
  ::google::protobuf::int64 log_length() const;
  void set_log_length(::google::protobuf::int64 value);

  // optional bool is_busy = 4;
  void clear_is_busy();
  static const int kIsBusyFieldNumber = 4;
  bool is_busy() const;
  void set_is_busy(bool value);

  // @@protoc_insertion_point(class_scope:mpr.chubby.AppendEntriesResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int64 current_term_;
  ::google::protobuf::int64 log_length_;
  bool success_;
  bool is_busy_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_service_2eproto();
  friend void protobuf_AssignDesc_service_2eproto();
  friend void protobuf_ShutdownFile_service_2eproto();

  void InitAsDefaultInstance();
  static AppendEntriesResponse* default_instance_;
};
// -------------------------------------------------------------------

class VoteRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mpr.chubby.VoteRequest) */ {
 public:
  VoteRequest();
  virtual ~VoteRequest();

  VoteRequest(const VoteRequest& from);

  inline VoteRequest& operator=(const VoteRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VoteRequest& default_instance();

  void Swap(VoteRequest* other);

  // implements Message ----------------------------------------------

  inline VoteRequest* New() const { return New(NULL); }

  VoteRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VoteRequest& from);
  void MergeFrom(const VoteRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(VoteRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 term = 1;
  void clear_term();
  static const int kTermFieldNumber = 1;
  ::google::protobuf::int64 term() const;
  void set_term(::google::protobuf::int64 value);

  // optional string candidate_id = 2;
  void clear_candidate_id();
  static const int kCandidateIdFieldNumber = 2;
  const ::std::string& candidate_id() const;
  void set_candidate_id(const ::std::string& value);
  void set_candidate_id(const char* value);
  void set_candidate_id(const char* value, size_t size);
  ::std::string* mutable_candidate_id();
  ::std::string* release_candidate_id();
  void set_allocated_candidate_id(::std::string* candidate_id);

  // optional int64 last_log_index = 3;
  void clear_last_log_index();
  static const int kLastLogIndexFieldNumber = 3;
  ::google::protobuf::int64 last_log_index() const;
  void set_last_log_index(::google::protobuf::int64 value);

  // optional int64 last_log_term = 4;
  void clear_last_log_term();
  static const int kLastLogTermFieldNumber = 4;
  ::google::protobuf::int64 last_log_term() const;
  void set_last_log_term(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:mpr.chubby.VoteRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int64 term_;
  ::google::protobuf::internal::ArenaStringPtr candidate_id_;
  ::google::protobuf::int64 last_log_index_;
  ::google::protobuf::int64 last_log_term_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_service_2eproto();
  friend void protobuf_AssignDesc_service_2eproto();
  friend void protobuf_ShutdownFile_service_2eproto();

  void InitAsDefaultInstance();
  static VoteRequest* default_instance_;
};
// -------------------------------------------------------------------

class VoteResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mpr.chubby.VoteResponse) */ {
 public:
  VoteResponse();
  virtual ~VoteResponse();

  VoteResponse(const VoteResponse& from);

  inline VoteResponse& operator=(const VoteResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VoteResponse& default_instance();

  void Swap(VoteResponse* other);

  // implements Message ----------------------------------------------

  inline VoteResponse* New() const { return New(NULL); }

  VoteResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VoteResponse& from);
  void MergeFrom(const VoteResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(VoteResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 term = 1;
  void clear_term();
  static const int kTermFieldNumber = 1;
  ::google::protobuf::int64 term() const;
  void set_term(::google::protobuf::int64 value);

  // optional bool vote_granted = 2;
  void clear_vote_granted();
  static const int kVoteGrantedFieldNumber = 2;
  bool vote_granted() const;
  void set_vote_granted(bool value);

  // @@protoc_insertion_point(class_scope:mpr.chubby.VoteResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int64 term_;
  bool vote_granted_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_service_2eproto();
  friend void protobuf_AssignDesc_service_2eproto();
  friend void protobuf_ShutdownFile_service_2eproto();

  void InitAsDefaultInstance();
  static VoteResponse* default_instance_;
};
// -------------------------------------------------------------------

class PutRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mpr.chubby.PutRequest) */ {
 public:
  PutRequest();
  virtual ~PutRequest();

  PutRequest(const PutRequest& from);

  inline PutRequest& operator=(const PutRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PutRequest& default_instance();

  void Swap(PutRequest* other);

  // implements Message ----------------------------------------------

  inline PutRequest* New() const { return New(NULL); }

  PutRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PutRequest& from);
  void MergeFrom(const PutRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PutRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string key = 1;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // optional bytes value = 2;
  void clear_value();
  static const int kValueFieldNumber = 2;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // optional string uuid = 3;
  void clear_uuid();
  static const int kUuidFieldNumber = 3;
  const ::std::string& uuid() const;
  void set_uuid(const ::std::string& value);
  void set_uuid(const char* value);
  void set_uuid(const char* value, size_t size);
  ::std::string* mutable_uuid();
  ::std::string* release_uuid();
  void set_allocated_uuid(::std::string* uuid);

  // @@protoc_insertion_point(class_scope:mpr.chubby.PutRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  ::google::protobuf::internal::ArenaStringPtr uuid_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_service_2eproto();
  friend void protobuf_AssignDesc_service_2eproto();
  friend void protobuf_ShutdownFile_service_2eproto();

  void InitAsDefaultInstance();
  static PutRequest* default_instance_;
};
// -------------------------------------------------------------------

class PutResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mpr.chubby.PutResponse) */ {
 public:
  PutResponse();
  virtual ~PutResponse();

  PutResponse(const PutResponse& from);

  inline PutResponse& operator=(const PutResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PutResponse& default_instance();

  void Swap(PutResponse* other);

  // implements Message ----------------------------------------------

  inline PutResponse* New() const { return New(NULL); }

  PutResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PutResponse& from);
  void MergeFrom(const PutResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PutResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool success = 1;
  void clear_success();
  static const int kSuccessFieldNumber = 1;
  bool success() const;
  void set_success(bool value);

  // optional string leader_id = 2;
  void clear_leader_id();
  static const int kLeaderIdFieldNumber = 2;
  const ::std::string& leader_id() const;
  void set_leader_id(const ::std::string& value);
  void set_leader_id(const char* value);
  void set_leader_id(const char* value, size_t size);
  ::std::string* mutable_leader_id();
  ::std::string* release_leader_id();
  void set_allocated_leader_id(::std::string* leader_id);

  // optional bool uuid_expired = 3;
  void clear_uuid_expired();
  static const int kUuidExpiredFieldNumber = 3;
  bool uuid_expired() const;
  void set_uuid_expired(bool value);

  // @@protoc_insertion_point(class_scope:mpr.chubby.PutResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr leader_id_;
  bool success_;
  bool uuid_expired_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_service_2eproto();
  friend void protobuf_AssignDesc_service_2eproto();
  friend void protobuf_ShutdownFile_service_2eproto();

  void InitAsDefaultInstance();
  static PutResponse* default_instance_;
};
// -------------------------------------------------------------------

class GetRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mpr.chubby.GetRequest) */ {
 public:
  GetRequest();
  virtual ~GetRequest();

  GetRequest(const GetRequest& from);

  inline GetRequest& operator=(const GetRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetRequest& default_instance();

  void Swap(GetRequest* other);

  // implements Message ----------------------------------------------

  inline GetRequest* New() const { return New(NULL); }

  GetRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetRequest& from);
  void MergeFrom(const GetRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GetRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string key = 1;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // optional string uuid = 2;
  void clear_uuid();
  static const int kUuidFieldNumber = 2;
  const ::std::string& uuid() const;
  void set_uuid(const ::std::string& value);
  void set_uuid(const char* value);
  void set_uuid(const char* value, size_t size);
  ::std::string* mutable_uuid();
  ::std::string* release_uuid();
  void set_allocated_uuid(::std::string* uuid);

  // @@protoc_insertion_point(class_scope:mpr.chubby.GetRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::google::protobuf::internal::ArenaStringPtr uuid_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_service_2eproto();
  friend void protobuf_AssignDesc_service_2eproto();
  friend void protobuf_ShutdownFile_service_2eproto();

  void InitAsDefaultInstance();
  static GetRequest* default_instance_;
};
// -------------------------------------------------------------------

class GetResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mpr.chubby.GetResponse) */ {
 public:
  GetResponse();
  virtual ~GetResponse();

  GetResponse(const GetResponse& from);

  inline GetResponse& operator=(const GetResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetResponse& default_instance();

  void Swap(GetResponse* other);

  // implements Message ----------------------------------------------

  inline GetResponse* New() const { return New(NULL); }

  GetResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetResponse& from);
  void MergeFrom(const GetResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GetResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool hit = 1;
  void clear_hit();
  static const int kHitFieldNumber = 1;
  bool hit() const;
  void set_hit(bool value);

  // optional bytes value = 2;
  void clear_value();
  static const int kValueFieldNumber = 2;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // optional string leader_id = 3;
  void clear_leader_id();
  static const int kLeaderIdFieldNumber = 3;
  const ::std::string& leader_id() const;
  void set_leader_id(const ::std::string& value);
  void set_leader_id(const char* value);
  void set_leader_id(const char* value, size_t size);
  ::std::string* mutable_leader_id();
  ::std::string* release_leader_id();
  void set_allocated_leader_id(::std::string* leader_id);

  // optional bool success = 4;
  void clear_success();
  static const int kSuccessFieldNumber = 4;
  bool success() const;
  void set_success(bool value);

  // optional bool uuid_expired = 5;
  void clear_uuid_expired();
  static const int kUuidExpiredFieldNumber = 5;
  bool uuid_expired() const;
  void set_uuid_expired(bool value);

  // @@protoc_insertion_point(class_scope:mpr.chubby.GetResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  ::google::protobuf::internal::ArenaStringPtr leader_id_;
  bool hit_;
  bool success_;
  bool uuid_expired_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_service_2eproto();
  friend void protobuf_AssignDesc_service_2eproto();
  friend void protobuf_ShutdownFile_service_2eproto();

  void InitAsDefaultInstance();
  static GetResponse* default_instance_;
};
// -------------------------------------------------------------------

class DelRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mpr.chubby.DelRequest) */ {
 public:
  DelRequest();
  virtual ~DelRequest();

  DelRequest(const DelRequest& from);

  inline DelRequest& operator=(const DelRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DelRequest& default_instance();

  void Swap(DelRequest* other);

  // implements Message ----------------------------------------------

  inline DelRequest* New() const { return New(NULL); }

  DelRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DelRequest& from);
  void MergeFrom(const DelRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DelRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string key = 1;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // optional string uuid = 2;
  void clear_uuid();
  static const int kUuidFieldNumber = 2;
  const ::std::string& uuid() const;
  void set_uuid(const ::std::string& value);
  void set_uuid(const char* value);
  void set_uuid(const char* value, size_t size);
  ::std::string* mutable_uuid();
  ::std::string* release_uuid();
  void set_allocated_uuid(::std::string* uuid);

  // @@protoc_insertion_point(class_scope:mpr.chubby.DelRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::google::protobuf::internal::ArenaStringPtr uuid_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_service_2eproto();
  friend void protobuf_AssignDesc_service_2eproto();
  friend void protobuf_ShutdownFile_service_2eproto();

  void InitAsDefaultInstance();
  static DelRequest* default_instance_;
};
// -------------------------------------------------------------------

class DelResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mpr.chubby.DelResponse) */ {
 public:
  DelResponse();
  virtual ~DelResponse();

  DelResponse(const DelResponse& from);

  inline DelResponse& operator=(const DelResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DelResponse& default_instance();

  void Swap(DelResponse* other);

  // implements Message ----------------------------------------------

  inline DelResponse* New() const { return New(NULL); }

  DelResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DelResponse& from);
  void MergeFrom(const DelResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DelResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool success = 1;
  void clear_success();
  static const int kSuccessFieldNumber = 1;
  bool success() const;
  void set_success(bool value);

  // optional string leader_id = 2;
  void clear_leader_id();
  static const int kLeaderIdFieldNumber = 2;
  const ::std::string& leader_id() const;
  void set_leader_id(const ::std::string& value);
  void set_leader_id(const char* value);
  void set_leader_id(const char* value, size_t size);
  ::std::string* mutable_leader_id();
  ::std::string* release_leader_id();
  void set_allocated_leader_id(::std::string* leader_id);

  // optional bool uuid_expired = 3;
  void clear_uuid_expired();
  static const int kUuidExpiredFieldNumber = 3;
  bool uuid_expired() const;
  void set_uuid_expired(bool value);

  // @@protoc_insertion_point(class_scope:mpr.chubby.DelResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr leader_id_;
  bool success_;
  bool uuid_expired_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_service_2eproto();
  friend void protobuf_AssignDesc_service_2eproto();
  friend void protobuf_ShutdownFile_service_2eproto();

  void InitAsDefaultInstance();
  static DelResponse* default_instance_;
};
// -------------------------------------------------------------------

class UnLockRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mpr.chubby.UnLockRequest) */ {
 public:
  UnLockRequest();
  virtual ~UnLockRequest();

  UnLockRequest(const UnLockRequest& from);

  inline UnLockRequest& operator=(const UnLockRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UnLockRequest& default_instance();

  void Swap(UnLockRequest* other);

  // implements Message ----------------------------------------------

  inline UnLockRequest* New() const { return New(NULL); }

  UnLockRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UnLockRequest& from);
  void MergeFrom(const UnLockRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UnLockRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string key = 1;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // optional string session_id = 2;
  void clear_session_id();
  static const int kSessionIdFieldNumber = 2;
  const ::std::string& session_id() const;
  void set_session_id(const ::std::string& value);
  void set_session_id(const char* value);
  void set_session_id(const char* value, size_t size);
  ::std::string* mutable_session_id();
  ::std::string* release_session_id();
  void set_allocated_session_id(::std::string* session_id);

  // optional string uuid = 3;
  void clear_uuid();
  static const int kUuidFieldNumber = 3;
  const ::std::string& uuid() const;
  void set_uuid(const ::std::string& value);
  void set_uuid(const char* value);
  void set_uuid(const char* value, size_t size);
  ::std::string* mutable_uuid();
  ::std::string* release_uuid();
  void set_allocated_uuid(::std::string* uuid);

  // @@protoc_insertion_point(class_scope:mpr.chubby.UnLockRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::google::protobuf::internal::ArenaStringPtr session_id_;
  ::google::protobuf::internal::ArenaStringPtr uuid_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_service_2eproto();
  friend void protobuf_AssignDesc_service_2eproto();
  friend void protobuf_ShutdownFile_service_2eproto();

  void InitAsDefaultInstance();
  static UnLockRequest* default_instance_;
};
// -------------------------------------------------------------------

class UnLockResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mpr.chubby.UnLockResponse) */ {
 public:
  UnLockResponse();
  virtual ~UnLockResponse();

  UnLockResponse(const UnLockResponse& from);

  inline UnLockResponse& operator=(const UnLockResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UnLockResponse& default_instance();

  void Swap(UnLockResponse* other);

  // implements Message ----------------------------------------------

  inline UnLockResponse* New() const { return New(NULL); }

  UnLockResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UnLockResponse& from);
  void MergeFrom(const UnLockResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UnLockResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool success = 1;
  void clear_success();
  static const int kSuccessFieldNumber = 1;
  bool success() const;
  void set_success(bool value);

  // optional string leader_id = 2;
  void clear_leader_id();
  static const int kLeaderIdFieldNumber = 2;
  const ::std::string& leader_id() const;
  void set_leader_id(const ::std::string& value);
  void set_leader_id(const char* value);
  void set_leader_id(const char* value, size_t size);
  ::std::string* mutable_leader_id();
  ::std::string* release_leader_id();
  void set_allocated_leader_id(::std::string* leader_id);

  // optional bool uuid_expired = 3;
  void clear_uuid_expired();
  static const int kUuidExpiredFieldNumber = 3;
  bool uuid_expired() const;
  void set_uuid_expired(bool value);

  // @@protoc_insertion_point(class_scope:mpr.chubby.UnLockResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr leader_id_;
  bool success_;
  bool uuid_expired_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_service_2eproto();
  friend void protobuf_AssignDesc_service_2eproto();
  friend void protobuf_ShutdownFile_service_2eproto();

  void InitAsDefaultInstance();
  static UnLockResponse* default_instance_;
};
// -------------------------------------------------------------------

class ShowStatusRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mpr.chubby.ShowStatusRequest) */ {
 public:
  ShowStatusRequest();
  virtual ~ShowStatusRequest();

  ShowStatusRequest(const ShowStatusRequest& from);

  inline ShowStatusRequest& operator=(const ShowStatusRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ShowStatusRequest& default_instance();

  void Swap(ShowStatusRequest* other);

  // implements Message ----------------------------------------------

  inline ShowStatusRequest* New() const { return New(NULL); }

  ShowStatusRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ShowStatusRequest& from);
  void MergeFrom(const ShowStatusRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ShowStatusRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mpr.chubby.ShowStatusRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_service_2eproto();
  friend void protobuf_AssignDesc_service_2eproto();
  friend void protobuf_ShutdownFile_service_2eproto();

  void InitAsDefaultInstance();
  static ShowStatusRequest* default_instance_;
};
// -------------------------------------------------------------------

class ShowStatusResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mpr.chubby.ShowStatusResponse) */ {
 public:
  ShowStatusResponse();
  virtual ~ShowStatusResponse();

  ShowStatusResponse(const ShowStatusResponse& from);

  inline ShowStatusResponse& operator=(const ShowStatusResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ShowStatusResponse& default_instance();

  void Swap(ShowStatusResponse* other);

  // implements Message ----------------------------------------------

  inline ShowStatusResponse* New() const { return New(NULL); }

  ShowStatusResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ShowStatusResponse& from);
  void MergeFrom(const ShowStatusResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ShowStatusResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .mpr.chubby.NodeStatus status = 1;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  ::mpr::chubby::NodeStatus status() const;
  void set_status(::mpr::chubby::NodeStatus value);

  // optional int64 term = 2;
  void clear_term();
  static const int kTermFieldNumber = 2;
  ::google::protobuf::int64 term() const;
  void set_term(::google::protobuf::int64 value);

  // optional int64 last_log_index = 3;
  void clear_last_log_index();
  static const int kLastLogIndexFieldNumber = 3;
  ::google::protobuf::int64 last_log_index() const;
  void set_last_log_index(::google::protobuf::int64 value);

  // optional int64 last_log_term = 4;
  void clear_last_log_term();
  static const int kLastLogTermFieldNumber = 4;
  ::google::protobuf::int64 last_log_term() const;
  void set_last_log_term(::google::protobuf::int64 value);

  // optional int64 commit_index = 5;
  void clear_commit_index();
  static const int kCommitIndexFieldNumber = 5;
  ::google::protobuf::int64 commit_index() const;
  void set_commit_index(::google::protobuf::int64 value);

  // optional int64 last_applied = 6;
  void clear_last_applied();
  static const int kLastAppliedFieldNumber = 6;
  ::google::protobuf::int64 last_applied() const;
  void set_last_applied(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:mpr.chubby.ShowStatusResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int64 term_;
  ::google::protobuf::int64 last_log_index_;
  ::google::protobuf::int64 last_log_term_;
  ::google::protobuf::int64 commit_index_;
  ::google::protobuf::int64 last_applied_;
  int status_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_service_2eproto();
  friend void protobuf_AssignDesc_service_2eproto();
  friend void protobuf_ShutdownFile_service_2eproto();

  void InitAsDefaultInstance();
  static ShowStatusResponse* default_instance_;
};
// -------------------------------------------------------------------

class ScanRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mpr.chubby.ScanRequest) */ {
 public:
  ScanRequest();
  virtual ~ScanRequest();

  ScanRequest(const ScanRequest& from);

  inline ScanRequest& operator=(const ScanRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ScanRequest& default_instance();

  void Swap(ScanRequest* other);

  // implements Message ----------------------------------------------

  inline ScanRequest* New() const { return New(NULL); }

  ScanRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ScanRequest& from);
  void MergeFrom(const ScanRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ScanRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string start_key = 1;
  void clear_start_key();
  static const int kStartKeyFieldNumber = 1;
  const ::std::string& start_key() const;
  void set_start_key(const ::std::string& value);
  void set_start_key(const char* value);
  void set_start_key(const char* value, size_t size);
  ::std::string* mutable_start_key();
  ::std::string* release_start_key();
  void set_allocated_start_key(::std::string* start_key);

  // optional bytes end_key = 2;
  void clear_end_key();
  static const int kEndKeyFieldNumber = 2;
  const ::std::string& end_key() const;
  void set_end_key(const ::std::string& value);
  void set_end_key(const char* value);
  void set_end_key(const void* value, size_t size);
  ::std::string* mutable_end_key();
  ::std::string* release_end_key();
  void set_allocated_end_key(::std::string* end_key);

  // optional int32 size_limit = 3;
  void clear_size_limit();
  static const int kSizeLimitFieldNumber = 3;
  ::google::protobuf::int32 size_limit() const;
  void set_size_limit(::google::protobuf::int32 value);

  // optional string uuid = 4;
  void clear_uuid();
  static const int kUuidFieldNumber = 4;
  const ::std::string& uuid() const;
  void set_uuid(const ::std::string& value);
  void set_uuid(const char* value);
  void set_uuid(const char* value, size_t size);
  ::std::string* mutable_uuid();
  ::std::string* release_uuid();
  void set_allocated_uuid(::std::string* uuid);

  // @@protoc_insertion_point(class_scope:mpr.chubby.ScanRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr start_key_;
  ::google::protobuf::internal::ArenaStringPtr end_key_;
  ::google::protobuf::internal::ArenaStringPtr uuid_;
  ::google::protobuf::int32 size_limit_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_service_2eproto();
  friend void protobuf_AssignDesc_service_2eproto();
  friend void protobuf_ShutdownFile_service_2eproto();

  void InitAsDefaultInstance();
  static ScanRequest* default_instance_;
};
// -------------------------------------------------------------------

class ScanItem : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mpr.chubby.ScanItem) */ {
 public:
  ScanItem();
  virtual ~ScanItem();

  ScanItem(const ScanItem& from);

  inline ScanItem& operator=(const ScanItem& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ScanItem& default_instance();

  void Swap(ScanItem* other);

  // implements Message ----------------------------------------------

  inline ScanItem* New() const { return New(NULL); }

  ScanItem* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ScanItem& from);
  void MergeFrom(const ScanItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ScanItem* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string key = 1;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // optional bytes value = 2;
  void clear_value();
  static const int kValueFieldNumber = 2;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:mpr.chubby.ScanItem)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_service_2eproto();
  friend void protobuf_AssignDesc_service_2eproto();
  friend void protobuf_ShutdownFile_service_2eproto();

  void InitAsDefaultInstance();
  static ScanItem* default_instance_;
};
// -------------------------------------------------------------------

class ScanResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mpr.chubby.ScanResponse) */ {
 public:
  ScanResponse();
  virtual ~ScanResponse();

  ScanResponse(const ScanResponse& from);

  inline ScanResponse& operator=(const ScanResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ScanResponse& default_instance();

  void Swap(ScanResponse* other);

  // implements Message ----------------------------------------------

  inline ScanResponse* New() const { return New(NULL); }

  ScanResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ScanResponse& from);
  void MergeFrom(const ScanResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ScanResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool has_more = 1;
  void clear_has_more();
  static const int kHasMoreFieldNumber = 1;
  bool has_more() const;
  void set_has_more(bool value);

  // repeated .mpr.chubby.ScanItem items = 2;
  int items_size() const;
  void clear_items();
  static const int kItemsFieldNumber = 2;
  const ::mpr::chubby::ScanItem& items(int index) const;
  ::mpr::chubby::ScanItem* mutable_items(int index);
  ::mpr::chubby::ScanItem* add_items();
  ::google::protobuf::RepeatedPtrField< ::mpr::chubby::ScanItem >*
      mutable_items();
  const ::google::protobuf::RepeatedPtrField< ::mpr::chubby::ScanItem >&
      items() const;

  // optional string leader_id = 3;
  void clear_leader_id();
  static const int kLeaderIdFieldNumber = 3;
  const ::std::string& leader_id() const;
  void set_leader_id(const ::std::string& value);
  void set_leader_id(const char* value);
  void set_leader_id(const char* value, size_t size);
  ::std::string* mutable_leader_id();
  ::std::string* release_leader_id();
  void set_allocated_leader_id(::std::string* leader_id);

  // optional bool success = 4;
  void clear_success();
  static const int kSuccessFieldNumber = 4;
  bool success() const;
  void set_success(bool value);

  // optional bool uuid_expired = 5;
  void clear_uuid_expired();
  static const int kUuidExpiredFieldNumber = 5;
  bool uuid_expired() const;
  void set_uuid_expired(bool value);

  // @@protoc_insertion_point(class_scope:mpr.chubby.ScanResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::mpr::chubby::ScanItem > items_;
  ::google::protobuf::internal::ArenaStringPtr leader_id_;
  bool has_more_;
  bool success_;
  bool uuid_expired_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_service_2eproto();
  friend void protobuf_AssignDesc_service_2eproto();
  friend void protobuf_ShutdownFile_service_2eproto();

  void InitAsDefaultInstance();
  static ScanResponse* default_instance_;
};
// -------------------------------------------------------------------

class LockRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mpr.chubby.LockRequest) */ {
 public:
  LockRequest();
  virtual ~LockRequest();

  LockRequest(const LockRequest& from);

  inline LockRequest& operator=(const LockRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LockRequest& default_instance();

  void Swap(LockRequest* other);

  // implements Message ----------------------------------------------

  inline LockRequest* New() const { return New(NULL); }

  LockRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LockRequest& from);
  void MergeFrom(const LockRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LockRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string key = 1;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // optional string session_id = 2;
  void clear_session_id();
  static const int kSessionIdFieldNumber = 2;
  const ::std::string& session_id() const;
  void set_session_id(const ::std::string& value);
  void set_session_id(const char* value);
  void set_session_id(const char* value, size_t size);
  ::std::string* mutable_session_id();
  ::std::string* release_session_id();
  void set_allocated_session_id(::std::string* session_id);

  // optional string hostname = 3;
  void clear_hostname();
  static const int kHostnameFieldNumber = 3;
  const ::std::string& hostname() const;
  void set_hostname(const ::std::string& value);
  void set_hostname(const char* value);
  void set_hostname(const char* value, size_t size);
  ::std::string* mutable_hostname();
  ::std::string* release_hostname();
  void set_allocated_hostname(::std::string* hostname);

  // optional string uuid = 4;
  void clear_uuid();
  static const int kUuidFieldNumber = 4;
  const ::std::string& uuid() const;
  void set_uuid(const ::std::string& value);
  void set_uuid(const char* value);
  void set_uuid(const char* value, size_t size);
  ::std::string* mutable_uuid();
  ::std::string* release_uuid();
  void set_allocated_uuid(::std::string* uuid);

  // @@protoc_insertion_point(class_scope:mpr.chubby.LockRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::google::protobuf::internal::ArenaStringPtr session_id_;
  ::google::protobuf::internal::ArenaStringPtr hostname_;
  ::google::protobuf::internal::ArenaStringPtr uuid_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_service_2eproto();
  friend void protobuf_AssignDesc_service_2eproto();
  friend void protobuf_ShutdownFile_service_2eproto();

  void InitAsDefaultInstance();
  static LockRequest* default_instance_;
};
// -------------------------------------------------------------------

class LockResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mpr.chubby.LockResponse) */ {
 public:
  LockResponse();
  virtual ~LockResponse();

  LockResponse(const LockResponse& from);

  inline LockResponse& operator=(const LockResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LockResponse& default_instance();

  void Swap(LockResponse* other);

  // implements Message ----------------------------------------------

  inline LockResponse* New() const { return New(NULL); }

  LockResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LockResponse& from);
  void MergeFrom(const LockResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LockResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool success = 1;
  void clear_success();
  static const int kSuccessFieldNumber = 1;
  bool success() const;
  void set_success(bool value);

  // optional string leader_id = 2;
  void clear_leader_id();
  static const int kLeaderIdFieldNumber = 2;
  const ::std::string& leader_id() const;
  void set_leader_id(const ::std::string& value);
  void set_leader_id(const char* value);
  void set_leader_id(const char* value, size_t size);
  ::std::string* mutable_leader_id();
  ::std::string* release_leader_id();
  void set_allocated_leader_id(::std::string* leader_id);

  // optional bool uuid_expired = 3;
  void clear_uuid_expired();
  static const int kUuidExpiredFieldNumber = 3;
  bool uuid_expired() const;
  void set_uuid_expired(bool value);

  // @@protoc_insertion_point(class_scope:mpr.chubby.LockResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr leader_id_;
  bool success_;
  bool uuid_expired_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_service_2eproto();
  friend void protobuf_AssignDesc_service_2eproto();
  friend void protobuf_ShutdownFile_service_2eproto();

  void InitAsDefaultInstance();
  static LockResponse* default_instance_;
};
// -------------------------------------------------------------------

class KeepAliveRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mpr.chubby.KeepAliveRequest) */ {
 public:
  KeepAliveRequest();
  virtual ~KeepAliveRequest();

  KeepAliveRequest(const KeepAliveRequest& from);

  inline KeepAliveRequest& operator=(const KeepAliveRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const KeepAliveRequest& default_instance();

  void Swap(KeepAliveRequest* other);

  // implements Message ----------------------------------------------

  inline KeepAliveRequest* New() const { return New(NULL); }

  KeepAliveRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const KeepAliveRequest& from);
  void MergeFrom(const KeepAliveRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(KeepAliveRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string session_id = 1;
  void clear_session_id();
  static const int kSessionIdFieldNumber = 1;
  const ::std::string& session_id() const;
  void set_session_id(const ::std::string& value);
  void set_session_id(const char* value);
  void set_session_id(const char* value, size_t size);
  ::std::string* mutable_session_id();
  ::std::string* release_session_id();
  void set_allocated_session_id(::std::string* session_id);

  // optional string uuid = 2;
  void clear_uuid();
  static const int kUuidFieldNumber = 2;
  const ::std::string& uuid() const;
  void set_uuid(const ::std::string& value);
  void set_uuid(const char* value);
  void set_uuid(const char* value, size_t size);
  ::std::string* mutable_uuid();
  ::std::string* release_uuid();
  void set_allocated_uuid(::std::string* uuid);

  // repeated string locks = 3;
  int locks_size() const;
  void clear_locks();
  static const int kLocksFieldNumber = 3;
  const ::std::string& locks(int index) const;
  ::std::string* mutable_locks(int index);
  void set_locks(int index, const ::std::string& value);
  void set_locks(int index, const char* value);
  void set_locks(int index, const char* value, size_t size);
  ::std::string* add_locks();
  void add_locks(const ::std::string& value);
  void add_locks(const char* value);
  void add_locks(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& locks() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_locks();

  // optional bool forward_from_leader = 4;
  void clear_forward_from_leader();
  static const int kForwardFromLeaderFieldNumber = 4;
  bool forward_from_leader() const;
  void set_forward_from_leader(bool value);

  // @@protoc_insertion_point(class_scope:mpr.chubby.KeepAliveRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr session_id_;
  ::google::protobuf::internal::ArenaStringPtr uuid_;
  ::google::protobuf::RepeatedPtrField< ::std::string> locks_;
  bool forward_from_leader_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_service_2eproto();
  friend void protobuf_AssignDesc_service_2eproto();
  friend void protobuf_ShutdownFile_service_2eproto();

  void InitAsDefaultInstance();
  static KeepAliveRequest* default_instance_;
};
// -------------------------------------------------------------------

class KeepAliveResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mpr.chubby.KeepAliveResponse) */ {
 public:
  KeepAliveResponse();
  virtual ~KeepAliveResponse();

  KeepAliveResponse(const KeepAliveResponse& from);

  inline KeepAliveResponse& operator=(const KeepAliveResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const KeepAliveResponse& default_instance();

  void Swap(KeepAliveResponse* other);

  // implements Message ----------------------------------------------

  inline KeepAliveResponse* New() const { return New(NULL); }

  KeepAliveResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const KeepAliveResponse& from);
  void MergeFrom(const KeepAliveResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(KeepAliveResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool success = 1;
  void clear_success();
  static const int kSuccessFieldNumber = 1;
  bool success() const;
  void set_success(bool value);

  // optional string leader_id = 2;
  void clear_leader_id();
  static const int kLeaderIdFieldNumber = 2;
  const ::std::string& leader_id() const;
  void set_leader_id(const ::std::string& value);
  void set_leader_id(const char* value);
  void set_leader_id(const char* value, size_t size);
  ::std::string* mutable_leader_id();
  ::std::string* release_leader_id();
  void set_allocated_leader_id(::std::string* leader_id);

  // @@protoc_insertion_point(class_scope:mpr.chubby.KeepAliveResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr leader_id_;
  bool success_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_service_2eproto();
  friend void protobuf_AssignDesc_service_2eproto();
  friend void protobuf_ShutdownFile_service_2eproto();

  void InitAsDefaultInstance();
  static KeepAliveResponse* default_instance_;
};
// -------------------------------------------------------------------

class LoginRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mpr.chubby.LoginRequest) */ {
 public:
  LoginRequest();
  virtual ~LoginRequest();

  LoginRequest(const LoginRequest& from);

  inline LoginRequest& operator=(const LoginRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginRequest& default_instance();

  void Swap(LoginRequest* other);

  // implements Message ----------------------------------------------

  inline LoginRequest* New() const { return New(NULL); }

  LoginRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LoginRequest& from);
  void MergeFrom(const LoginRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LoginRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string username = 1;
  void clear_username();
  static const int kUsernameFieldNumber = 1;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // optional string passwd = 2;
  void clear_passwd();
  static const int kPasswdFieldNumber = 2;
  const ::std::string& passwd() const;
  void set_passwd(const ::std::string& value);
  void set_passwd(const char* value);
  void set_passwd(const char* value, size_t size);
  ::std::string* mutable_passwd();
  ::std::string* release_passwd();
  void set_allocated_passwd(::std::string* passwd);

  // @@protoc_insertion_point(class_scope:mpr.chubby.LoginRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::google::protobuf::internal::ArenaStringPtr passwd_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_service_2eproto();
  friend void protobuf_AssignDesc_service_2eproto();
  friend void protobuf_ShutdownFile_service_2eproto();

  void InitAsDefaultInstance();
  static LoginRequest* default_instance_;
};
// -------------------------------------------------------------------

class Status : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mpr.chubby.Status) */ {
 public:
  Status();
  virtual ~Status();

  Status(const Status& from);

  inline Status& operator=(const Status& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Status& default_instance();

  void Swap(Status* other);

  // implements Message ----------------------------------------------

  inline Status* New() const { return New(NULL); }

  Status* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Status& from);
  void MergeFrom(const Status& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Status* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 code = 1;
  void clear_code();
  static const int kCodeFieldNumber = 1;
  ::google::protobuf::int64 code() const;
  void set_code(::google::protobuf::int64 value);

  // optional string message = 2;
  void clear_message();
  static const int kMessageFieldNumber = 2;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // @@protoc_insertion_point(class_scope:mpr.chubby.Status)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int64 code_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_service_2eproto();
  friend void protobuf_AssignDesc_service_2eproto();
  friend void protobuf_ShutdownFile_service_2eproto();

  void InitAsDefaultInstance();
  static Status* default_instance_;
};
// -------------------------------------------------------------------

class LoginResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mpr.chubby.LoginResponse) */ {
 public:
  LoginResponse();
  virtual ~LoginResponse();

  LoginResponse(const LoginResponse& from);

  inline LoginResponse& operator=(const LoginResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginResponse& default_instance();

  void Swap(LoginResponse* other);

  // implements Message ----------------------------------------------

  inline LoginResponse* New() const { return New(NULL); }

  LoginResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LoginResponse& from);
  void MergeFrom(const LoginResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LoginResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .mpr.chubby.Status status = 1;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  const ::mpr::chubby::Status& status() const;
  ::mpr::chubby::Status* mutable_status();
  ::mpr::chubby::Status* release_status();
  void set_allocated_status(::mpr::chubby::Status* status);

  // optional string uuid = 2;
  void clear_uuid();
  static const int kUuidFieldNumber = 2;
  const ::std::string& uuid() const;
  void set_uuid(const ::std::string& value);
  void set_uuid(const char* value);
  void set_uuid(const char* value, size_t size);
  ::std::string* mutable_uuid();
  ::std::string* release_uuid();
  void set_allocated_uuid(::std::string* uuid);

  // optional string leader_id = 3;
  void clear_leader_id();
  static const int kLeaderIdFieldNumber = 3;
  const ::std::string& leader_id() const;
  void set_leader_id(const ::std::string& value);
  void set_leader_id(const char* value);
  void set_leader_id(const char* value, size_t size);
  ::std::string* mutable_leader_id();
  ::std::string* release_leader_id();
  void set_allocated_leader_id(::std::string* leader_id);

  // @@protoc_insertion_point(class_scope:mpr.chubby.LoginResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::mpr::chubby::Status* status_;
  ::google::protobuf::internal::ArenaStringPtr uuid_;
  ::google::protobuf::internal::ArenaStringPtr leader_id_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_service_2eproto();
  friend void protobuf_AssignDesc_service_2eproto();
  friend void protobuf_ShutdownFile_service_2eproto();

  void InitAsDefaultInstance();
  static LoginResponse* default_instance_;
};
// -------------------------------------------------------------------

class LogoutRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mpr.chubby.LogoutRequest) */ {
 public:
  LogoutRequest();
  virtual ~LogoutRequest();

  LogoutRequest(const LogoutRequest& from);

  inline LogoutRequest& operator=(const LogoutRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LogoutRequest& default_instance();

  void Swap(LogoutRequest* other);

  // implements Message ----------------------------------------------

  inline LogoutRequest* New() const { return New(NULL); }

  LogoutRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LogoutRequest& from);
  void MergeFrom(const LogoutRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LogoutRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string uuid = 1;
  void clear_uuid();
  static const int kUuidFieldNumber = 1;
  const ::std::string& uuid() const;
  void set_uuid(const ::std::string& value);
  void set_uuid(const char* value);
  void set_uuid(const char* value, size_t size);
  ::std::string* mutable_uuid();
  ::std::string* release_uuid();
  void set_allocated_uuid(::std::string* uuid);

  // @@protoc_insertion_point(class_scope:mpr.chubby.LogoutRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr uuid_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_service_2eproto();
  friend void protobuf_AssignDesc_service_2eproto();
  friend void protobuf_ShutdownFile_service_2eproto();

  void InitAsDefaultInstance();
  static LogoutRequest* default_instance_;
};
// -------------------------------------------------------------------

class LogoutResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mpr.chubby.LogoutResponse) */ {
 public:
  LogoutResponse();
  virtual ~LogoutResponse();

  LogoutResponse(const LogoutResponse& from);

  inline LogoutResponse& operator=(const LogoutResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LogoutResponse& default_instance();

  void Swap(LogoutResponse* other);

  // implements Message ----------------------------------------------

  inline LogoutResponse* New() const { return New(NULL); }

  LogoutResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LogoutResponse& from);
  void MergeFrom(const LogoutResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LogoutResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .mpr.chubby.Status status = 1;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  const ::mpr::chubby::Status& status() const;
  ::mpr::chubby::Status* mutable_status();
  ::mpr::chubby::Status* release_status();
  void set_allocated_status(::mpr::chubby::Status* status);

  // optional string leader_id = 2;
  void clear_leader_id();
  static const int kLeaderIdFieldNumber = 2;
  const ::std::string& leader_id() const;
  void set_leader_id(const ::std::string& value);
  void set_leader_id(const char* value);
  void set_leader_id(const char* value, size_t size);
  ::std::string* mutable_leader_id();
  ::std::string* release_leader_id();
  void set_allocated_leader_id(::std::string* leader_id);

  // @@protoc_insertion_point(class_scope:mpr.chubby.LogoutResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::mpr::chubby::Status* status_;
  ::google::protobuf::internal::ArenaStringPtr leader_id_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_service_2eproto();
  friend void protobuf_AssignDesc_service_2eproto();
  friend void protobuf_ShutdownFile_service_2eproto();

  void InitAsDefaultInstance();
  static LogoutResponse* default_instance_;
};
// -------------------------------------------------------------------

class RegisterRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mpr.chubby.RegisterRequest) */ {
 public:
  RegisterRequest();
  virtual ~RegisterRequest();

  RegisterRequest(const RegisterRequest& from);

  inline RegisterRequest& operator=(const RegisterRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RegisterRequest& default_instance();

  void Swap(RegisterRequest* other);

  // implements Message ----------------------------------------------

  inline RegisterRequest* New() const { return New(NULL); }

  RegisterRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RegisterRequest& from);
  void MergeFrom(const RegisterRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RegisterRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string username = 1;
  void clear_username();
  static const int kUsernameFieldNumber = 1;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // optional string passwd = 2;
  void clear_passwd();
  static const int kPasswdFieldNumber = 2;
  const ::std::string& passwd() const;
  void set_passwd(const ::std::string& value);
  void set_passwd(const char* value);
  void set_passwd(const char* value, size_t size);
  ::std::string* mutable_passwd();
  ::std::string* release_passwd();
  void set_allocated_passwd(::std::string* passwd);

  // @@protoc_insertion_point(class_scope:mpr.chubby.RegisterRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::google::protobuf::internal::ArenaStringPtr passwd_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_service_2eproto();
  friend void protobuf_AssignDesc_service_2eproto();
  friend void protobuf_ShutdownFile_service_2eproto();

  void InitAsDefaultInstance();
  static RegisterRequest* default_instance_;
};
// -------------------------------------------------------------------

class RegisterResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mpr.chubby.RegisterResponse) */ {
 public:
  RegisterResponse();
  virtual ~RegisterResponse();

  RegisterResponse(const RegisterResponse& from);

  inline RegisterResponse& operator=(const RegisterResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RegisterResponse& default_instance();

  void Swap(RegisterResponse* other);

  // implements Message ----------------------------------------------

  inline RegisterResponse* New() const { return New(NULL); }

  RegisterResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RegisterResponse& from);
  void MergeFrom(const RegisterResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RegisterResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .mpr.chubby.Status status = 1;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  const ::mpr::chubby::Status& status() const;
  ::mpr::chubby::Status* mutable_status();
  ::mpr::chubby::Status* release_status();
  void set_allocated_status(::mpr::chubby::Status* status);

  // optional string leader_id = 2;
  void clear_leader_id();
  static const int kLeaderIdFieldNumber = 2;
  const ::std::string& leader_id() const;
  void set_leader_id(const ::std::string& value);
  void set_leader_id(const char* value);
  void set_leader_id(const char* value, size_t size);
  ::std::string* mutable_leader_id();
  ::std::string* release_leader_id();
  void set_allocated_leader_id(::std::string* leader_id);

  // @@protoc_insertion_point(class_scope:mpr.chubby.RegisterResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::mpr::chubby::Status* status_;
  ::google::protobuf::internal::ArenaStringPtr leader_id_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_service_2eproto();
  friend void protobuf_AssignDesc_service_2eproto();
  friend void protobuf_ShutdownFile_service_2eproto();

  void InitAsDefaultInstance();
  static RegisterResponse* default_instance_;
};
// -------------------------------------------------------------------

class CleanBinlogRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mpr.chubby.CleanBinlogRequest) */ {
 public:
  CleanBinlogRequest();
  virtual ~CleanBinlogRequest();

  CleanBinlogRequest(const CleanBinlogRequest& from);

  inline CleanBinlogRequest& operator=(const CleanBinlogRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CleanBinlogRequest& default_instance();

  void Swap(CleanBinlogRequest* other);

  // implements Message ----------------------------------------------

  inline CleanBinlogRequest* New() const { return New(NULL); }

  CleanBinlogRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CleanBinlogRequest& from);
  void MergeFrom(const CleanBinlogRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CleanBinlogRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 end_index = 1;
  void clear_end_index();
  static const int kEndIndexFieldNumber = 1;
  ::google::protobuf::int64 end_index() const;
  void set_end_index(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:mpr.chubby.CleanBinlogRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int64 end_index_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_service_2eproto();
  friend void protobuf_AssignDesc_service_2eproto();
  friend void protobuf_ShutdownFile_service_2eproto();

  void InitAsDefaultInstance();
  static CleanBinlogRequest* default_instance_;
};
// -------------------------------------------------------------------

class CleanBinlogResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mpr.chubby.CleanBinlogResponse) */ {
 public:
  CleanBinlogResponse();
  virtual ~CleanBinlogResponse();

  CleanBinlogResponse(const CleanBinlogResponse& from);

  inline CleanBinlogResponse& operator=(const CleanBinlogResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CleanBinlogResponse& default_instance();

  void Swap(CleanBinlogResponse* other);

  // implements Message ----------------------------------------------

  inline CleanBinlogResponse* New() const { return New(NULL); }

  CleanBinlogResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CleanBinlogResponse& from);
  void MergeFrom(const CleanBinlogResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CleanBinlogResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool success = 1;
  void clear_success();
  static const int kSuccessFieldNumber = 1;
  bool success() const;
  void set_success(bool value);

  // @@protoc_insertion_point(class_scope:mpr.chubby.CleanBinlogResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  bool success_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_service_2eproto();
  friend void protobuf_AssignDesc_service_2eproto();
  friend void protobuf_ShutdownFile_service_2eproto();

  void InitAsDefaultInstance();
  static CleanBinlogResponse* default_instance_;
};
// -------------------------------------------------------------------

class RpcStatRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mpr.chubby.RpcStatRequest) */ {
 public:
  RpcStatRequest();
  virtual ~RpcStatRequest();

  RpcStatRequest(const RpcStatRequest& from);

  inline RpcStatRequest& operator=(const RpcStatRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RpcStatRequest& default_instance();

  void Swap(RpcStatRequest* other);

  // implements Message ----------------------------------------------

  inline RpcStatRequest* New() const { return New(NULL); }

  RpcStatRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RpcStatRequest& from);
  void MergeFrom(const RpcStatRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RpcStatRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .mpr.chubby.StatOperation op = 1;
  int op_size() const;
  void clear_op();
  static const int kOpFieldNumber = 1;
  ::mpr::chubby::StatOperation op(int index) const;
  void set_op(int index, ::mpr::chubby::StatOperation value);
  void add_op(::mpr::chubby::StatOperation value);
  const ::google::protobuf::RepeatedField<int>& op() const;
  ::google::protobuf::RepeatedField<int>* mutable_op();

  // @@protoc_insertion_point(class_scope:mpr.chubby.RpcStatRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedField<int> op_;
  mutable int _op_cached_byte_size_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_service_2eproto();
  friend void protobuf_AssignDesc_service_2eproto();
  friend void protobuf_ShutdownFile_service_2eproto();

  void InitAsDefaultInstance();
  static RpcStatRequest* default_instance_;
};
// -------------------------------------------------------------------

class RpcStatResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mpr.chubby.RpcStatResponse) */ {
 public:
  RpcStatResponse();
  virtual ~RpcStatResponse();

  RpcStatResponse(const RpcStatResponse& from);

  inline RpcStatResponse& operator=(const RpcStatResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RpcStatResponse& default_instance();

  void Swap(RpcStatResponse* other);

  // implements Message ----------------------------------------------

  inline RpcStatResponse* New() const { return New(NULL); }

  RpcStatResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RpcStatResponse& from);
  void MergeFrom(const RpcStatResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RpcStatResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .mpr.chubby.NodeStatus status = 1;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  ::mpr::chubby::NodeStatus status() const;
  void set_status(::mpr::chubby::NodeStatus value);

  // repeated .mpr.chubby.StatInfo stats = 2;
  int stats_size() const;
  void clear_stats();
  static const int kStatsFieldNumber = 2;
  const ::mpr::chubby::StatInfo& stats(int index) const;
  ::mpr::chubby::StatInfo* mutable_stats(int index);
  ::mpr::chubby::StatInfo* add_stats();
  ::google::protobuf::RepeatedPtrField< ::mpr::chubby::StatInfo >*
      mutable_stats();
  const ::google::protobuf::RepeatedPtrField< ::mpr::chubby::StatInfo >&
      stats() const;

  // @@protoc_insertion_point(class_scope:mpr.chubby.RpcStatResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::mpr::chubby::StatInfo > stats_;
  int status_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_service_2eproto();
  friend void protobuf_AssignDesc_service_2eproto();
  friend void protobuf_ShutdownFile_service_2eproto();

  void InitAsDefaultInstance();
  static RpcStatResponse* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// UserInfo

// optional string username = 1;
inline void UserInfo::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserInfo::username() const {
  // @@protoc_insertion_point(field_get:mpr.chubby.UserInfo.username)
  return username_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserInfo::set_username(const ::std::string& value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mpr.chubby.UserInfo.username)
}
inline void UserInfo::set_username(const char* value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mpr.chubby.UserInfo.username)
}
inline void UserInfo::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mpr.chubby.UserInfo.username)
}
inline ::std::string* UserInfo::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:mpr.chubby.UserInfo.username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserInfo::release_username() {
  // @@protoc_insertion_point(field_release:mpr.chubby.UserInfo.username)
  
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserInfo::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:mpr.chubby.UserInfo.username)
}

// optional string password = 2;
inline void UserInfo::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserInfo::password() const {
  // @@protoc_insertion_point(field_get:mpr.chubby.UserInfo.password)
  return password_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserInfo::set_password(const ::std::string& value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mpr.chubby.UserInfo.password)
}
inline void UserInfo::set_password(const char* value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mpr.chubby.UserInfo.password)
}
inline void UserInfo::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mpr.chubby.UserInfo.password)
}
inline ::std::string* UserInfo::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:mpr.chubby.UserInfo.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserInfo::release_password() {
  // @@protoc_insertion_point(field_release:mpr.chubby.UserInfo.password)
  
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserInfo::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:mpr.chubby.UserInfo.password)
}

// -------------------------------------------------------------------

// Entry

// optional string key = 1;
inline void Entry::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Entry::key() const {
  // @@protoc_insertion_point(field_get:mpr.chubby.Entry.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Entry::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mpr.chubby.Entry.key)
}
inline void Entry::set_key(const char* value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mpr.chubby.Entry.key)
}
inline void Entry::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mpr.chubby.Entry.key)
}
inline ::std::string* Entry::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:mpr.chubby.Entry.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Entry::release_key() {
  // @@protoc_insertion_point(field_release:mpr.chubby.Entry.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Entry::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:mpr.chubby.Entry.key)
}

// optional bytes value = 2;
inline void Entry::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Entry::value() const {
  // @@protoc_insertion_point(field_get:mpr.chubby.Entry.value)
  return value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Entry::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mpr.chubby.Entry.value)
}
inline void Entry::set_value(const char* value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mpr.chubby.Entry.value)
}
inline void Entry::set_value(const void* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mpr.chubby.Entry.value)
}
inline ::std::string* Entry::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:mpr.chubby.Entry.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Entry::release_value() {
  // @@protoc_insertion_point(field_release:mpr.chubby.Entry.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Entry::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:mpr.chubby.Entry.value)
}

// optional int64 term = 3;
inline void Entry::clear_term() {
  term_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Entry::term() const {
  // @@protoc_insertion_point(field_get:mpr.chubby.Entry.term)
  return term_;
}
inline void Entry::set_term(::google::protobuf::int64 value) {
  
  term_ = value;
  // @@protoc_insertion_point(field_set:mpr.chubby.Entry.term)
}

// optional .mpr.chubby.LogOperation op = 4;
inline void Entry::clear_op() {
  op_ = 0;
}
inline ::mpr::chubby::LogOperation Entry::op() const {
  // @@protoc_insertion_point(field_get:mpr.chubby.Entry.op)
  return static_cast< ::mpr::chubby::LogOperation >(op_);
}
inline void Entry::set_op(::mpr::chubby::LogOperation value) {
  
  op_ = value;
  // @@protoc_insertion_point(field_set:mpr.chubby.Entry.op)
}

// optional string user = 5;
inline void Entry::clear_user() {
  user_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Entry::user() const {
  // @@protoc_insertion_point(field_get:mpr.chubby.Entry.user)
  return user_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Entry::set_user(const ::std::string& value) {
  
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mpr.chubby.Entry.user)
}
inline void Entry::set_user(const char* value) {
  
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mpr.chubby.Entry.user)
}
inline void Entry::set_user(const char* value, size_t size) {
  
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mpr.chubby.Entry.user)
}
inline ::std::string* Entry::mutable_user() {
  
  // @@protoc_insertion_point(field_mutable:mpr.chubby.Entry.user)
  return user_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Entry::release_user() {
  // @@protoc_insertion_point(field_release:mpr.chubby.Entry.user)
  
  return user_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Entry::set_allocated_user(::std::string* user) {
  if (user != NULL) {
    
  } else {
    
  }
  user_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user);
  // @@protoc_insertion_point(field_set_allocated:mpr.chubby.Entry.user)
}

// -------------------------------------------------------------------

// StatInfo

// optional int64 current_stat = 1;
inline void StatInfo::clear_current_stat() {
  current_stat_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 StatInfo::current_stat() const {
  // @@protoc_insertion_point(field_get:mpr.chubby.StatInfo.current_stat)
  return current_stat_;
}
inline void StatInfo::set_current_stat(::google::protobuf::int64 value) {
  
  current_stat_ = value;
  // @@protoc_insertion_point(field_set:mpr.chubby.StatInfo.current_stat)
}

// optional int64 average_stat = 2;
inline void StatInfo::clear_average_stat() {
  average_stat_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 StatInfo::average_stat() const {
  // @@protoc_insertion_point(field_get:mpr.chubby.StatInfo.average_stat)
  return average_stat_;
}
inline void StatInfo::set_average_stat(::google::protobuf::int64 value) {
  
  average_stat_ = value;
  // @@protoc_insertion_point(field_set:mpr.chubby.StatInfo.average_stat)
}

// -------------------------------------------------------------------

// AppendEntriesRequest

// optional int64 term = 1;
inline void AppendEntriesRequest::clear_term() {
  term_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 AppendEntriesRequest::term() const {
  // @@protoc_insertion_point(field_get:mpr.chubby.AppendEntriesRequest.term)
  return term_;
}
inline void AppendEntriesRequest::set_term(::google::protobuf::int64 value) {
  
  term_ = value;
  // @@protoc_insertion_point(field_set:mpr.chubby.AppendEntriesRequest.term)
}

// optional string leader_id = 2;
inline void AppendEntriesRequest::clear_leader_id() {
  leader_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AppendEntriesRequest::leader_id() const {
  // @@protoc_insertion_point(field_get:mpr.chubby.AppendEntriesRequest.leader_id)
  return leader_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AppendEntriesRequest::set_leader_id(const ::std::string& value) {
  
  leader_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mpr.chubby.AppendEntriesRequest.leader_id)
}
inline void AppendEntriesRequest::set_leader_id(const char* value) {
  
  leader_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mpr.chubby.AppendEntriesRequest.leader_id)
}
inline void AppendEntriesRequest::set_leader_id(const char* value, size_t size) {
  
  leader_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mpr.chubby.AppendEntriesRequest.leader_id)
}
inline ::std::string* AppendEntriesRequest::mutable_leader_id() {
  
  // @@protoc_insertion_point(field_mutable:mpr.chubby.AppendEntriesRequest.leader_id)
  return leader_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AppendEntriesRequest::release_leader_id() {
  // @@protoc_insertion_point(field_release:mpr.chubby.AppendEntriesRequest.leader_id)
  
  return leader_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AppendEntriesRequest::set_allocated_leader_id(::std::string* leader_id) {
  if (leader_id != NULL) {
    
  } else {
    
  }
  leader_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), leader_id);
  // @@protoc_insertion_point(field_set_allocated:mpr.chubby.AppendEntriesRequest.leader_id)
}

// optional int64 prev_log_index = 3;
inline void AppendEntriesRequest::clear_prev_log_index() {
  prev_log_index_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 AppendEntriesRequest::prev_log_index() const {
  // @@protoc_insertion_point(field_get:mpr.chubby.AppendEntriesRequest.prev_log_index)
  return prev_log_index_;
}
inline void AppendEntriesRequest::set_prev_log_index(::google::protobuf::int64 value) {
  
  prev_log_index_ = value;
  // @@protoc_insertion_point(field_set:mpr.chubby.AppendEntriesRequest.prev_log_index)
}

// optional int64 prev_log_term = 4;
inline void AppendEntriesRequest::clear_prev_log_term() {
  prev_log_term_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 AppendEntriesRequest::prev_log_term() const {
  // @@protoc_insertion_point(field_get:mpr.chubby.AppendEntriesRequest.prev_log_term)
  return prev_log_term_;
}
inline void AppendEntriesRequest::set_prev_log_term(::google::protobuf::int64 value) {
  
  prev_log_term_ = value;
  // @@protoc_insertion_point(field_set:mpr.chubby.AppendEntriesRequest.prev_log_term)
}

// optional int64 leader_commit_index = 5;
inline void AppendEntriesRequest::clear_leader_commit_index() {
  leader_commit_index_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 AppendEntriesRequest::leader_commit_index() const {
  // @@protoc_insertion_point(field_get:mpr.chubby.AppendEntriesRequest.leader_commit_index)
  return leader_commit_index_;
}
inline void AppendEntriesRequest::set_leader_commit_index(::google::protobuf::int64 value) {
  
  leader_commit_index_ = value;
  // @@protoc_insertion_point(field_set:mpr.chubby.AppendEntriesRequest.leader_commit_index)
}

// repeated .mpr.chubby.Entry entries = 6;
inline int AppendEntriesRequest::entries_size() const {
  return entries_.size();
}
inline void AppendEntriesRequest::clear_entries() {
  entries_.Clear();
}
inline const ::mpr::chubby::Entry& AppendEntriesRequest::entries(int index) const {
  // @@protoc_insertion_point(field_get:mpr.chubby.AppendEntriesRequest.entries)
  return entries_.Get(index);
}
inline ::mpr::chubby::Entry* AppendEntriesRequest::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:mpr.chubby.AppendEntriesRequest.entries)
  return entries_.Mutable(index);
}
inline ::mpr::chubby::Entry* AppendEntriesRequest::add_entries() {
  // @@protoc_insertion_point(field_add:mpr.chubby.AppendEntriesRequest.entries)
  return entries_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::mpr::chubby::Entry >*
AppendEntriesRequest::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:mpr.chubby.AppendEntriesRequest.entries)
  return &entries_;
}
inline const ::google::protobuf::RepeatedPtrField< ::mpr::chubby::Entry >&
AppendEntriesRequest::entries() const {
  // @@protoc_insertion_point(field_list:mpr.chubby.AppendEntriesRequest.entries)
  return entries_;
}

// -------------------------------------------------------------------

// AppendEntriesResponse

// optional int64 current_term = 1;
inline void AppendEntriesResponse::clear_current_term() {
  current_term_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 AppendEntriesResponse::current_term() const {
  // @@protoc_insertion_point(field_get:mpr.chubby.AppendEntriesResponse.current_term)
  return current_term_;
}
inline void AppendEntriesResponse::set_current_term(::google::protobuf::int64 value) {
  
  current_term_ = value;
  // @@protoc_insertion_point(field_set:mpr.chubby.AppendEntriesResponse.current_term)
}

// optional bool success = 2;
inline void AppendEntriesResponse::clear_success() {
  success_ = false;
}
inline bool AppendEntriesResponse::success() const {
  // @@protoc_insertion_point(field_get:mpr.chubby.AppendEntriesResponse.success)
  return success_;
}
inline void AppendEntriesResponse::set_success(bool value) {
  
  success_ = value;
  // @@protoc_insertion_point(field_set:mpr.chubby.AppendEntriesResponse.success)
}

// optional int64 log_length = 3;
inline void AppendEntriesResponse::clear_log_length() {
  log_length_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 AppendEntriesResponse::log_length() const {
  // @@protoc_insertion_point(field_get:mpr.chubby.AppendEntriesResponse.log_length)
  return log_length_;
}
inline void AppendEntriesResponse::set_log_length(::google::protobuf::int64 value) {
  
  log_length_ = value;
  // @@protoc_insertion_point(field_set:mpr.chubby.AppendEntriesResponse.log_length)
}

// optional bool is_busy = 4;
inline void AppendEntriesResponse::clear_is_busy() {
  is_busy_ = false;
}
inline bool AppendEntriesResponse::is_busy() const {
  // @@protoc_insertion_point(field_get:mpr.chubby.AppendEntriesResponse.is_busy)
  return is_busy_;
}
inline void AppendEntriesResponse::set_is_busy(bool value) {
  
  is_busy_ = value;
  // @@protoc_insertion_point(field_set:mpr.chubby.AppendEntriesResponse.is_busy)
}

// -------------------------------------------------------------------

// VoteRequest

// optional int64 term = 1;
inline void VoteRequest::clear_term() {
  term_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 VoteRequest::term() const {
  // @@protoc_insertion_point(field_get:mpr.chubby.VoteRequest.term)
  return term_;
}
inline void VoteRequest::set_term(::google::protobuf::int64 value) {
  
  term_ = value;
  // @@protoc_insertion_point(field_set:mpr.chubby.VoteRequest.term)
}

// optional string candidate_id = 2;
inline void VoteRequest::clear_candidate_id() {
  candidate_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VoteRequest::candidate_id() const {
  // @@protoc_insertion_point(field_get:mpr.chubby.VoteRequest.candidate_id)
  return candidate_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VoteRequest::set_candidate_id(const ::std::string& value) {
  
  candidate_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mpr.chubby.VoteRequest.candidate_id)
}
inline void VoteRequest::set_candidate_id(const char* value) {
  
  candidate_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mpr.chubby.VoteRequest.candidate_id)
}
inline void VoteRequest::set_candidate_id(const char* value, size_t size) {
  
  candidate_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mpr.chubby.VoteRequest.candidate_id)
}
inline ::std::string* VoteRequest::mutable_candidate_id() {
  
  // @@protoc_insertion_point(field_mutable:mpr.chubby.VoteRequest.candidate_id)
  return candidate_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VoteRequest::release_candidate_id() {
  // @@protoc_insertion_point(field_release:mpr.chubby.VoteRequest.candidate_id)
  
  return candidate_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VoteRequest::set_allocated_candidate_id(::std::string* candidate_id) {
  if (candidate_id != NULL) {
    
  } else {
    
  }
  candidate_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), candidate_id);
  // @@protoc_insertion_point(field_set_allocated:mpr.chubby.VoteRequest.candidate_id)
}

// optional int64 last_log_index = 3;
inline void VoteRequest::clear_last_log_index() {
  last_log_index_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 VoteRequest::last_log_index() const {
  // @@protoc_insertion_point(field_get:mpr.chubby.VoteRequest.last_log_index)
  return last_log_index_;
}
inline void VoteRequest::set_last_log_index(::google::protobuf::int64 value) {
  
  last_log_index_ = value;
  // @@protoc_insertion_point(field_set:mpr.chubby.VoteRequest.last_log_index)
}

// optional int64 last_log_term = 4;
inline void VoteRequest::clear_last_log_term() {
  last_log_term_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 VoteRequest::last_log_term() const {
  // @@protoc_insertion_point(field_get:mpr.chubby.VoteRequest.last_log_term)
  return last_log_term_;
}
inline void VoteRequest::set_last_log_term(::google::protobuf::int64 value) {
  
  last_log_term_ = value;
  // @@protoc_insertion_point(field_set:mpr.chubby.VoteRequest.last_log_term)
}

// -------------------------------------------------------------------

// VoteResponse

// optional int64 term = 1;
inline void VoteResponse::clear_term() {
  term_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 VoteResponse::term() const {
  // @@protoc_insertion_point(field_get:mpr.chubby.VoteResponse.term)
  return term_;
}
inline void VoteResponse::set_term(::google::protobuf::int64 value) {
  
  term_ = value;
  // @@protoc_insertion_point(field_set:mpr.chubby.VoteResponse.term)
}

// optional bool vote_granted = 2;
inline void VoteResponse::clear_vote_granted() {
  vote_granted_ = false;
}
inline bool VoteResponse::vote_granted() const {
  // @@protoc_insertion_point(field_get:mpr.chubby.VoteResponse.vote_granted)
  return vote_granted_;
}
inline void VoteResponse::set_vote_granted(bool value) {
  
  vote_granted_ = value;
  // @@protoc_insertion_point(field_set:mpr.chubby.VoteResponse.vote_granted)
}

// -------------------------------------------------------------------

// PutRequest

// optional string key = 1;
inline void PutRequest::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PutRequest::key() const {
  // @@protoc_insertion_point(field_get:mpr.chubby.PutRequest.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PutRequest::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mpr.chubby.PutRequest.key)
}
inline void PutRequest::set_key(const char* value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mpr.chubby.PutRequest.key)
}
inline void PutRequest::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mpr.chubby.PutRequest.key)
}
inline ::std::string* PutRequest::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:mpr.chubby.PutRequest.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PutRequest::release_key() {
  // @@protoc_insertion_point(field_release:mpr.chubby.PutRequest.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PutRequest::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:mpr.chubby.PutRequest.key)
}

// optional bytes value = 2;
inline void PutRequest::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PutRequest::value() const {
  // @@protoc_insertion_point(field_get:mpr.chubby.PutRequest.value)
  return value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PutRequest::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mpr.chubby.PutRequest.value)
}
inline void PutRequest::set_value(const char* value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mpr.chubby.PutRequest.value)
}
inline void PutRequest::set_value(const void* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mpr.chubby.PutRequest.value)
}
inline ::std::string* PutRequest::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:mpr.chubby.PutRequest.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PutRequest::release_value() {
  // @@protoc_insertion_point(field_release:mpr.chubby.PutRequest.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PutRequest::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:mpr.chubby.PutRequest.value)
}

// optional string uuid = 3;
inline void PutRequest::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PutRequest::uuid() const {
  // @@protoc_insertion_point(field_get:mpr.chubby.PutRequest.uuid)
  return uuid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PutRequest::set_uuid(const ::std::string& value) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mpr.chubby.PutRequest.uuid)
}
inline void PutRequest::set_uuid(const char* value) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mpr.chubby.PutRequest.uuid)
}
inline void PutRequest::set_uuid(const char* value, size_t size) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mpr.chubby.PutRequest.uuid)
}
inline ::std::string* PutRequest::mutable_uuid() {
  
  // @@protoc_insertion_point(field_mutable:mpr.chubby.PutRequest.uuid)
  return uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PutRequest::release_uuid() {
  // @@protoc_insertion_point(field_release:mpr.chubby.PutRequest.uuid)
  
  return uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PutRequest::set_allocated_uuid(::std::string* uuid) {
  if (uuid != NULL) {
    
  } else {
    
  }
  uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:mpr.chubby.PutRequest.uuid)
}

// -------------------------------------------------------------------

// PutResponse

// optional bool success = 1;
inline void PutResponse::clear_success() {
  success_ = false;
}
inline bool PutResponse::success() const {
  // @@protoc_insertion_point(field_get:mpr.chubby.PutResponse.success)
  return success_;
}
inline void PutResponse::set_success(bool value) {
  
  success_ = value;
  // @@protoc_insertion_point(field_set:mpr.chubby.PutResponse.success)
}

// optional string leader_id = 2;
inline void PutResponse::clear_leader_id() {
  leader_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PutResponse::leader_id() const {
  // @@protoc_insertion_point(field_get:mpr.chubby.PutResponse.leader_id)
  return leader_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PutResponse::set_leader_id(const ::std::string& value) {
  
  leader_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mpr.chubby.PutResponse.leader_id)
}
inline void PutResponse::set_leader_id(const char* value) {
  
  leader_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mpr.chubby.PutResponse.leader_id)
}
inline void PutResponse::set_leader_id(const char* value, size_t size) {
  
  leader_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mpr.chubby.PutResponse.leader_id)
}
inline ::std::string* PutResponse::mutable_leader_id() {
  
  // @@protoc_insertion_point(field_mutable:mpr.chubby.PutResponse.leader_id)
  return leader_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PutResponse::release_leader_id() {
  // @@protoc_insertion_point(field_release:mpr.chubby.PutResponse.leader_id)
  
  return leader_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PutResponse::set_allocated_leader_id(::std::string* leader_id) {
  if (leader_id != NULL) {
    
  } else {
    
  }
  leader_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), leader_id);
  // @@protoc_insertion_point(field_set_allocated:mpr.chubby.PutResponse.leader_id)
}

// optional bool uuid_expired = 3;
inline void PutResponse::clear_uuid_expired() {
  uuid_expired_ = false;
}
inline bool PutResponse::uuid_expired() const {
  // @@protoc_insertion_point(field_get:mpr.chubby.PutResponse.uuid_expired)
  return uuid_expired_;
}
inline void PutResponse::set_uuid_expired(bool value) {
  
  uuid_expired_ = value;
  // @@protoc_insertion_point(field_set:mpr.chubby.PutResponse.uuid_expired)
}

// -------------------------------------------------------------------

// GetRequest

// optional string key = 1;
inline void GetRequest::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetRequest::key() const {
  // @@protoc_insertion_point(field_get:mpr.chubby.GetRequest.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetRequest::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mpr.chubby.GetRequest.key)
}
inline void GetRequest::set_key(const char* value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mpr.chubby.GetRequest.key)
}
inline void GetRequest::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mpr.chubby.GetRequest.key)
}
inline ::std::string* GetRequest::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:mpr.chubby.GetRequest.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetRequest::release_key() {
  // @@protoc_insertion_point(field_release:mpr.chubby.GetRequest.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetRequest::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:mpr.chubby.GetRequest.key)
}

// optional string uuid = 2;
inline void GetRequest::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetRequest::uuid() const {
  // @@protoc_insertion_point(field_get:mpr.chubby.GetRequest.uuid)
  return uuid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetRequest::set_uuid(const ::std::string& value) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mpr.chubby.GetRequest.uuid)
}
inline void GetRequest::set_uuid(const char* value) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mpr.chubby.GetRequest.uuid)
}
inline void GetRequest::set_uuid(const char* value, size_t size) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mpr.chubby.GetRequest.uuid)
}
inline ::std::string* GetRequest::mutable_uuid() {
  
  // @@protoc_insertion_point(field_mutable:mpr.chubby.GetRequest.uuid)
  return uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetRequest::release_uuid() {
  // @@protoc_insertion_point(field_release:mpr.chubby.GetRequest.uuid)
  
  return uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetRequest::set_allocated_uuid(::std::string* uuid) {
  if (uuid != NULL) {
    
  } else {
    
  }
  uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:mpr.chubby.GetRequest.uuid)
}

// -------------------------------------------------------------------

// GetResponse

// optional bool hit = 1;
inline void GetResponse::clear_hit() {
  hit_ = false;
}
inline bool GetResponse::hit() const {
  // @@protoc_insertion_point(field_get:mpr.chubby.GetResponse.hit)
  return hit_;
}
inline void GetResponse::set_hit(bool value) {
  
  hit_ = value;
  // @@protoc_insertion_point(field_set:mpr.chubby.GetResponse.hit)
}

// optional bytes value = 2;
inline void GetResponse::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetResponse::value() const {
  // @@protoc_insertion_point(field_get:mpr.chubby.GetResponse.value)
  return value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetResponse::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mpr.chubby.GetResponse.value)
}
inline void GetResponse::set_value(const char* value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mpr.chubby.GetResponse.value)
}
inline void GetResponse::set_value(const void* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mpr.chubby.GetResponse.value)
}
inline ::std::string* GetResponse::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:mpr.chubby.GetResponse.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetResponse::release_value() {
  // @@protoc_insertion_point(field_release:mpr.chubby.GetResponse.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetResponse::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:mpr.chubby.GetResponse.value)
}

// optional string leader_id = 3;
inline void GetResponse::clear_leader_id() {
  leader_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetResponse::leader_id() const {
  // @@protoc_insertion_point(field_get:mpr.chubby.GetResponse.leader_id)
  return leader_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetResponse::set_leader_id(const ::std::string& value) {
  
  leader_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mpr.chubby.GetResponse.leader_id)
}
inline void GetResponse::set_leader_id(const char* value) {
  
  leader_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mpr.chubby.GetResponse.leader_id)
}
inline void GetResponse::set_leader_id(const char* value, size_t size) {
  
  leader_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mpr.chubby.GetResponse.leader_id)
}
inline ::std::string* GetResponse::mutable_leader_id() {
  
  // @@protoc_insertion_point(field_mutable:mpr.chubby.GetResponse.leader_id)
  return leader_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetResponse::release_leader_id() {
  // @@protoc_insertion_point(field_release:mpr.chubby.GetResponse.leader_id)
  
  return leader_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetResponse::set_allocated_leader_id(::std::string* leader_id) {
  if (leader_id != NULL) {
    
  } else {
    
  }
  leader_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), leader_id);
  // @@protoc_insertion_point(field_set_allocated:mpr.chubby.GetResponse.leader_id)
}

// optional bool success = 4;
inline void GetResponse::clear_success() {
  success_ = false;
}
inline bool GetResponse::success() const {
  // @@protoc_insertion_point(field_get:mpr.chubby.GetResponse.success)
  return success_;
}
inline void GetResponse::set_success(bool value) {
  
  success_ = value;
  // @@protoc_insertion_point(field_set:mpr.chubby.GetResponse.success)
}

// optional bool uuid_expired = 5;
inline void GetResponse::clear_uuid_expired() {
  uuid_expired_ = false;
}
inline bool GetResponse::uuid_expired() const {
  // @@protoc_insertion_point(field_get:mpr.chubby.GetResponse.uuid_expired)
  return uuid_expired_;
}
inline void GetResponse::set_uuid_expired(bool value) {
  
  uuid_expired_ = value;
  // @@protoc_insertion_point(field_set:mpr.chubby.GetResponse.uuid_expired)
}

// -------------------------------------------------------------------

// DelRequest

// optional string key = 1;
inline void DelRequest::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DelRequest::key() const {
  // @@protoc_insertion_point(field_get:mpr.chubby.DelRequest.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DelRequest::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mpr.chubby.DelRequest.key)
}
inline void DelRequest::set_key(const char* value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mpr.chubby.DelRequest.key)
}
inline void DelRequest::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mpr.chubby.DelRequest.key)
}
inline ::std::string* DelRequest::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:mpr.chubby.DelRequest.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DelRequest::release_key() {
  // @@protoc_insertion_point(field_release:mpr.chubby.DelRequest.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DelRequest::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:mpr.chubby.DelRequest.key)
}

// optional string uuid = 2;
inline void DelRequest::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DelRequest::uuid() const {
  // @@protoc_insertion_point(field_get:mpr.chubby.DelRequest.uuid)
  return uuid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DelRequest::set_uuid(const ::std::string& value) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mpr.chubby.DelRequest.uuid)
}
inline void DelRequest::set_uuid(const char* value) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mpr.chubby.DelRequest.uuid)
}
inline void DelRequest::set_uuid(const char* value, size_t size) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mpr.chubby.DelRequest.uuid)
}
inline ::std::string* DelRequest::mutable_uuid() {
  
  // @@protoc_insertion_point(field_mutable:mpr.chubby.DelRequest.uuid)
  return uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DelRequest::release_uuid() {
  // @@protoc_insertion_point(field_release:mpr.chubby.DelRequest.uuid)
  
  return uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DelRequest::set_allocated_uuid(::std::string* uuid) {
  if (uuid != NULL) {
    
  } else {
    
  }
  uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:mpr.chubby.DelRequest.uuid)
}

// -------------------------------------------------------------------

// DelResponse

// optional bool success = 1;
inline void DelResponse::clear_success() {
  success_ = false;
}
inline bool DelResponse::success() const {
  // @@protoc_insertion_point(field_get:mpr.chubby.DelResponse.success)
  return success_;
}
inline void DelResponse::set_success(bool value) {
  
  success_ = value;
  // @@protoc_insertion_point(field_set:mpr.chubby.DelResponse.success)
}

// optional string leader_id = 2;
inline void DelResponse::clear_leader_id() {
  leader_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DelResponse::leader_id() const {
  // @@protoc_insertion_point(field_get:mpr.chubby.DelResponse.leader_id)
  return leader_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DelResponse::set_leader_id(const ::std::string& value) {
  
  leader_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mpr.chubby.DelResponse.leader_id)
}
inline void DelResponse::set_leader_id(const char* value) {
  
  leader_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mpr.chubby.DelResponse.leader_id)
}
inline void DelResponse::set_leader_id(const char* value, size_t size) {
  
  leader_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mpr.chubby.DelResponse.leader_id)
}
inline ::std::string* DelResponse::mutable_leader_id() {
  
  // @@protoc_insertion_point(field_mutable:mpr.chubby.DelResponse.leader_id)
  return leader_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DelResponse::release_leader_id() {
  // @@protoc_insertion_point(field_release:mpr.chubby.DelResponse.leader_id)
  
  return leader_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DelResponse::set_allocated_leader_id(::std::string* leader_id) {
  if (leader_id != NULL) {
    
  } else {
    
  }
  leader_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), leader_id);
  // @@protoc_insertion_point(field_set_allocated:mpr.chubby.DelResponse.leader_id)
}

// optional bool uuid_expired = 3;
inline void DelResponse::clear_uuid_expired() {
  uuid_expired_ = false;
}
inline bool DelResponse::uuid_expired() const {
  // @@protoc_insertion_point(field_get:mpr.chubby.DelResponse.uuid_expired)
  return uuid_expired_;
}
inline void DelResponse::set_uuid_expired(bool value) {
  
  uuid_expired_ = value;
  // @@protoc_insertion_point(field_set:mpr.chubby.DelResponse.uuid_expired)
}

// -------------------------------------------------------------------

// UnLockRequest

// optional string key = 1;
inline void UnLockRequest::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UnLockRequest::key() const {
  // @@protoc_insertion_point(field_get:mpr.chubby.UnLockRequest.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UnLockRequest::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mpr.chubby.UnLockRequest.key)
}
inline void UnLockRequest::set_key(const char* value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mpr.chubby.UnLockRequest.key)
}
inline void UnLockRequest::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mpr.chubby.UnLockRequest.key)
}
inline ::std::string* UnLockRequest::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:mpr.chubby.UnLockRequest.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UnLockRequest::release_key() {
  // @@protoc_insertion_point(field_release:mpr.chubby.UnLockRequest.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UnLockRequest::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:mpr.chubby.UnLockRequest.key)
}

// optional string session_id = 2;
inline void UnLockRequest::clear_session_id() {
  session_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UnLockRequest::session_id() const {
  // @@protoc_insertion_point(field_get:mpr.chubby.UnLockRequest.session_id)
  return session_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UnLockRequest::set_session_id(const ::std::string& value) {
  
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mpr.chubby.UnLockRequest.session_id)
}
inline void UnLockRequest::set_session_id(const char* value) {
  
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mpr.chubby.UnLockRequest.session_id)
}
inline void UnLockRequest::set_session_id(const char* value, size_t size) {
  
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mpr.chubby.UnLockRequest.session_id)
}
inline ::std::string* UnLockRequest::mutable_session_id() {
  
  // @@protoc_insertion_point(field_mutable:mpr.chubby.UnLockRequest.session_id)
  return session_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UnLockRequest::release_session_id() {
  // @@protoc_insertion_point(field_release:mpr.chubby.UnLockRequest.session_id)
  
  return session_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UnLockRequest::set_allocated_session_id(::std::string* session_id) {
  if (session_id != NULL) {
    
  } else {
    
  }
  session_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), session_id);
  // @@protoc_insertion_point(field_set_allocated:mpr.chubby.UnLockRequest.session_id)
}

// optional string uuid = 3;
inline void UnLockRequest::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UnLockRequest::uuid() const {
  // @@protoc_insertion_point(field_get:mpr.chubby.UnLockRequest.uuid)
  return uuid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UnLockRequest::set_uuid(const ::std::string& value) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mpr.chubby.UnLockRequest.uuid)
}
inline void UnLockRequest::set_uuid(const char* value) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mpr.chubby.UnLockRequest.uuid)
}
inline void UnLockRequest::set_uuid(const char* value, size_t size) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mpr.chubby.UnLockRequest.uuid)
}
inline ::std::string* UnLockRequest::mutable_uuid() {
  
  // @@protoc_insertion_point(field_mutable:mpr.chubby.UnLockRequest.uuid)
  return uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UnLockRequest::release_uuid() {
  // @@protoc_insertion_point(field_release:mpr.chubby.UnLockRequest.uuid)
  
  return uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UnLockRequest::set_allocated_uuid(::std::string* uuid) {
  if (uuid != NULL) {
    
  } else {
    
  }
  uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:mpr.chubby.UnLockRequest.uuid)
}

// -------------------------------------------------------------------

// UnLockResponse

// optional bool success = 1;
inline void UnLockResponse::clear_success() {
  success_ = false;
}
inline bool UnLockResponse::success() const {
  // @@protoc_insertion_point(field_get:mpr.chubby.UnLockResponse.success)
  return success_;
}
inline void UnLockResponse::set_success(bool value) {
  
  success_ = value;
  // @@protoc_insertion_point(field_set:mpr.chubby.UnLockResponse.success)
}

// optional string leader_id = 2;
inline void UnLockResponse::clear_leader_id() {
  leader_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UnLockResponse::leader_id() const {
  // @@protoc_insertion_point(field_get:mpr.chubby.UnLockResponse.leader_id)
  return leader_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UnLockResponse::set_leader_id(const ::std::string& value) {
  
  leader_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mpr.chubby.UnLockResponse.leader_id)
}
inline void UnLockResponse::set_leader_id(const char* value) {
  
  leader_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mpr.chubby.UnLockResponse.leader_id)
}
inline void UnLockResponse::set_leader_id(const char* value, size_t size) {
  
  leader_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mpr.chubby.UnLockResponse.leader_id)
}
inline ::std::string* UnLockResponse::mutable_leader_id() {
  
  // @@protoc_insertion_point(field_mutable:mpr.chubby.UnLockResponse.leader_id)
  return leader_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UnLockResponse::release_leader_id() {
  // @@protoc_insertion_point(field_release:mpr.chubby.UnLockResponse.leader_id)
  
  return leader_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UnLockResponse::set_allocated_leader_id(::std::string* leader_id) {
  if (leader_id != NULL) {
    
  } else {
    
  }
  leader_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), leader_id);
  // @@protoc_insertion_point(field_set_allocated:mpr.chubby.UnLockResponse.leader_id)
}

// optional bool uuid_expired = 3;
inline void UnLockResponse::clear_uuid_expired() {
  uuid_expired_ = false;
}
inline bool UnLockResponse::uuid_expired() const {
  // @@protoc_insertion_point(field_get:mpr.chubby.UnLockResponse.uuid_expired)
  return uuid_expired_;
}
inline void UnLockResponse::set_uuid_expired(bool value) {
  
  uuid_expired_ = value;
  // @@protoc_insertion_point(field_set:mpr.chubby.UnLockResponse.uuid_expired)
}

// -------------------------------------------------------------------

// ShowStatusRequest

// -------------------------------------------------------------------

// ShowStatusResponse

// optional .mpr.chubby.NodeStatus status = 1;
inline void ShowStatusResponse::clear_status() {
  status_ = 0;
}
inline ::mpr::chubby::NodeStatus ShowStatusResponse::status() const {
  // @@protoc_insertion_point(field_get:mpr.chubby.ShowStatusResponse.status)
  return static_cast< ::mpr::chubby::NodeStatus >(status_);
}
inline void ShowStatusResponse::set_status(::mpr::chubby::NodeStatus value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:mpr.chubby.ShowStatusResponse.status)
}

// optional int64 term = 2;
inline void ShowStatusResponse::clear_term() {
  term_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 ShowStatusResponse::term() const {
  // @@protoc_insertion_point(field_get:mpr.chubby.ShowStatusResponse.term)
  return term_;
}
inline void ShowStatusResponse::set_term(::google::protobuf::int64 value) {
  
  term_ = value;
  // @@protoc_insertion_point(field_set:mpr.chubby.ShowStatusResponse.term)
}

// optional int64 last_log_index = 3;
inline void ShowStatusResponse::clear_last_log_index() {
  last_log_index_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 ShowStatusResponse::last_log_index() const {
  // @@protoc_insertion_point(field_get:mpr.chubby.ShowStatusResponse.last_log_index)
  return last_log_index_;
}
inline void ShowStatusResponse::set_last_log_index(::google::protobuf::int64 value) {
  
  last_log_index_ = value;
  // @@protoc_insertion_point(field_set:mpr.chubby.ShowStatusResponse.last_log_index)
}

// optional int64 last_log_term = 4;
inline void ShowStatusResponse::clear_last_log_term() {
  last_log_term_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 ShowStatusResponse::last_log_term() const {
  // @@protoc_insertion_point(field_get:mpr.chubby.ShowStatusResponse.last_log_term)
  return last_log_term_;
}
inline void ShowStatusResponse::set_last_log_term(::google::protobuf::int64 value) {
  
  last_log_term_ = value;
  // @@protoc_insertion_point(field_set:mpr.chubby.ShowStatusResponse.last_log_term)
}

// optional int64 commit_index = 5;
inline void ShowStatusResponse::clear_commit_index() {
  commit_index_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 ShowStatusResponse::commit_index() const {
  // @@protoc_insertion_point(field_get:mpr.chubby.ShowStatusResponse.commit_index)
  return commit_index_;
}
inline void ShowStatusResponse::set_commit_index(::google::protobuf::int64 value) {
  
  commit_index_ = value;
  // @@protoc_insertion_point(field_set:mpr.chubby.ShowStatusResponse.commit_index)
}

// optional int64 last_applied = 6;
inline void ShowStatusResponse::clear_last_applied() {
  last_applied_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 ShowStatusResponse::last_applied() const {
  // @@protoc_insertion_point(field_get:mpr.chubby.ShowStatusResponse.last_applied)
  return last_applied_;
}
inline void ShowStatusResponse::set_last_applied(::google::protobuf::int64 value) {
  
  last_applied_ = value;
  // @@protoc_insertion_point(field_set:mpr.chubby.ShowStatusResponse.last_applied)
}

// -------------------------------------------------------------------

// ScanRequest

// optional string start_key = 1;
inline void ScanRequest::clear_start_key() {
  start_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ScanRequest::start_key() const {
  // @@protoc_insertion_point(field_get:mpr.chubby.ScanRequest.start_key)
  return start_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ScanRequest::set_start_key(const ::std::string& value) {
  
  start_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mpr.chubby.ScanRequest.start_key)
}
inline void ScanRequest::set_start_key(const char* value) {
  
  start_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mpr.chubby.ScanRequest.start_key)
}
inline void ScanRequest::set_start_key(const char* value, size_t size) {
  
  start_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mpr.chubby.ScanRequest.start_key)
}
inline ::std::string* ScanRequest::mutable_start_key() {
  
  // @@protoc_insertion_point(field_mutable:mpr.chubby.ScanRequest.start_key)
  return start_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ScanRequest::release_start_key() {
  // @@protoc_insertion_point(field_release:mpr.chubby.ScanRequest.start_key)
  
  return start_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ScanRequest::set_allocated_start_key(::std::string* start_key) {
  if (start_key != NULL) {
    
  } else {
    
  }
  start_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), start_key);
  // @@protoc_insertion_point(field_set_allocated:mpr.chubby.ScanRequest.start_key)
}

// optional bytes end_key = 2;
inline void ScanRequest::clear_end_key() {
  end_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ScanRequest::end_key() const {
  // @@protoc_insertion_point(field_get:mpr.chubby.ScanRequest.end_key)
  return end_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ScanRequest::set_end_key(const ::std::string& value) {
  
  end_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mpr.chubby.ScanRequest.end_key)
}
inline void ScanRequest::set_end_key(const char* value) {
  
  end_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mpr.chubby.ScanRequest.end_key)
}
inline void ScanRequest::set_end_key(const void* value, size_t size) {
  
  end_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mpr.chubby.ScanRequest.end_key)
}
inline ::std::string* ScanRequest::mutable_end_key() {
  
  // @@protoc_insertion_point(field_mutable:mpr.chubby.ScanRequest.end_key)
  return end_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ScanRequest::release_end_key() {
  // @@protoc_insertion_point(field_release:mpr.chubby.ScanRequest.end_key)
  
  return end_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ScanRequest::set_allocated_end_key(::std::string* end_key) {
  if (end_key != NULL) {
    
  } else {
    
  }
  end_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), end_key);
  // @@protoc_insertion_point(field_set_allocated:mpr.chubby.ScanRequest.end_key)
}

// optional int32 size_limit = 3;
inline void ScanRequest::clear_size_limit() {
  size_limit_ = 0;
}
inline ::google::protobuf::int32 ScanRequest::size_limit() const {
  // @@protoc_insertion_point(field_get:mpr.chubby.ScanRequest.size_limit)
  return size_limit_;
}
inline void ScanRequest::set_size_limit(::google::protobuf::int32 value) {
  
  size_limit_ = value;
  // @@protoc_insertion_point(field_set:mpr.chubby.ScanRequest.size_limit)
}

// optional string uuid = 4;
inline void ScanRequest::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ScanRequest::uuid() const {
  // @@protoc_insertion_point(field_get:mpr.chubby.ScanRequest.uuid)
  return uuid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ScanRequest::set_uuid(const ::std::string& value) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mpr.chubby.ScanRequest.uuid)
}
inline void ScanRequest::set_uuid(const char* value) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mpr.chubby.ScanRequest.uuid)
}
inline void ScanRequest::set_uuid(const char* value, size_t size) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mpr.chubby.ScanRequest.uuid)
}
inline ::std::string* ScanRequest::mutable_uuid() {
  
  // @@protoc_insertion_point(field_mutable:mpr.chubby.ScanRequest.uuid)
  return uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ScanRequest::release_uuid() {
  // @@protoc_insertion_point(field_release:mpr.chubby.ScanRequest.uuid)
  
  return uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ScanRequest::set_allocated_uuid(::std::string* uuid) {
  if (uuid != NULL) {
    
  } else {
    
  }
  uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:mpr.chubby.ScanRequest.uuid)
}

// -------------------------------------------------------------------

// ScanItem

// optional string key = 1;
inline void ScanItem::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ScanItem::key() const {
  // @@protoc_insertion_point(field_get:mpr.chubby.ScanItem.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ScanItem::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mpr.chubby.ScanItem.key)
}
inline void ScanItem::set_key(const char* value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mpr.chubby.ScanItem.key)
}
inline void ScanItem::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mpr.chubby.ScanItem.key)
}
inline ::std::string* ScanItem::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:mpr.chubby.ScanItem.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ScanItem::release_key() {
  // @@protoc_insertion_point(field_release:mpr.chubby.ScanItem.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ScanItem::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:mpr.chubby.ScanItem.key)
}

// optional bytes value = 2;
inline void ScanItem::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ScanItem::value() const {
  // @@protoc_insertion_point(field_get:mpr.chubby.ScanItem.value)
  return value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ScanItem::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mpr.chubby.ScanItem.value)
}
inline void ScanItem::set_value(const char* value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mpr.chubby.ScanItem.value)
}
inline void ScanItem::set_value(const void* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mpr.chubby.ScanItem.value)
}
inline ::std::string* ScanItem::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:mpr.chubby.ScanItem.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ScanItem::release_value() {
  // @@protoc_insertion_point(field_release:mpr.chubby.ScanItem.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ScanItem::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:mpr.chubby.ScanItem.value)
}

// -------------------------------------------------------------------

// ScanResponse

// optional bool has_more = 1;
inline void ScanResponse::clear_has_more() {
  has_more_ = false;
}
inline bool ScanResponse::has_more() const {
  // @@protoc_insertion_point(field_get:mpr.chubby.ScanResponse.has_more)
  return has_more_;
}
inline void ScanResponse::set_has_more(bool value) {
  
  has_more_ = value;
  // @@protoc_insertion_point(field_set:mpr.chubby.ScanResponse.has_more)
}

// repeated .mpr.chubby.ScanItem items = 2;
inline int ScanResponse::items_size() const {
  return items_.size();
}
inline void ScanResponse::clear_items() {
  items_.Clear();
}
inline const ::mpr::chubby::ScanItem& ScanResponse::items(int index) const {
  // @@protoc_insertion_point(field_get:mpr.chubby.ScanResponse.items)
  return items_.Get(index);
}
inline ::mpr::chubby::ScanItem* ScanResponse::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:mpr.chubby.ScanResponse.items)
  return items_.Mutable(index);
}
inline ::mpr::chubby::ScanItem* ScanResponse::add_items() {
  // @@protoc_insertion_point(field_add:mpr.chubby.ScanResponse.items)
  return items_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::mpr::chubby::ScanItem >*
ScanResponse::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:mpr.chubby.ScanResponse.items)
  return &items_;
}
inline const ::google::protobuf::RepeatedPtrField< ::mpr::chubby::ScanItem >&
ScanResponse::items() const {
  // @@protoc_insertion_point(field_list:mpr.chubby.ScanResponse.items)
  return items_;
}

// optional string leader_id = 3;
inline void ScanResponse::clear_leader_id() {
  leader_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ScanResponse::leader_id() const {
  // @@protoc_insertion_point(field_get:mpr.chubby.ScanResponse.leader_id)
  return leader_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ScanResponse::set_leader_id(const ::std::string& value) {
  
  leader_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mpr.chubby.ScanResponse.leader_id)
}
inline void ScanResponse::set_leader_id(const char* value) {
  
  leader_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mpr.chubby.ScanResponse.leader_id)
}
inline void ScanResponse::set_leader_id(const char* value, size_t size) {
  
  leader_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mpr.chubby.ScanResponse.leader_id)
}
inline ::std::string* ScanResponse::mutable_leader_id() {
  
  // @@protoc_insertion_point(field_mutable:mpr.chubby.ScanResponse.leader_id)
  return leader_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ScanResponse::release_leader_id() {
  // @@protoc_insertion_point(field_release:mpr.chubby.ScanResponse.leader_id)
  
  return leader_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ScanResponse::set_allocated_leader_id(::std::string* leader_id) {
  if (leader_id != NULL) {
    
  } else {
    
  }
  leader_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), leader_id);
  // @@protoc_insertion_point(field_set_allocated:mpr.chubby.ScanResponse.leader_id)
}

// optional bool success = 4;
inline void ScanResponse::clear_success() {
  success_ = false;
}
inline bool ScanResponse::success() const {
  // @@protoc_insertion_point(field_get:mpr.chubby.ScanResponse.success)
  return success_;
}
inline void ScanResponse::set_success(bool value) {
  
  success_ = value;
  // @@protoc_insertion_point(field_set:mpr.chubby.ScanResponse.success)
}

// optional bool uuid_expired = 5;
inline void ScanResponse::clear_uuid_expired() {
  uuid_expired_ = false;
}
inline bool ScanResponse::uuid_expired() const {
  // @@protoc_insertion_point(field_get:mpr.chubby.ScanResponse.uuid_expired)
  return uuid_expired_;
}
inline void ScanResponse::set_uuid_expired(bool value) {
  
  uuid_expired_ = value;
  // @@protoc_insertion_point(field_set:mpr.chubby.ScanResponse.uuid_expired)
}

// -------------------------------------------------------------------

// LockRequest

// optional string key = 1;
inline void LockRequest::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LockRequest::key() const {
  // @@protoc_insertion_point(field_get:mpr.chubby.LockRequest.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LockRequest::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mpr.chubby.LockRequest.key)
}
inline void LockRequest::set_key(const char* value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mpr.chubby.LockRequest.key)
}
inline void LockRequest::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mpr.chubby.LockRequest.key)
}
inline ::std::string* LockRequest::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:mpr.chubby.LockRequest.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LockRequest::release_key() {
  // @@protoc_insertion_point(field_release:mpr.chubby.LockRequest.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LockRequest::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:mpr.chubby.LockRequest.key)
}

// optional string session_id = 2;
inline void LockRequest::clear_session_id() {
  session_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LockRequest::session_id() const {
  // @@protoc_insertion_point(field_get:mpr.chubby.LockRequest.session_id)
  return session_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LockRequest::set_session_id(const ::std::string& value) {
  
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mpr.chubby.LockRequest.session_id)
}
inline void LockRequest::set_session_id(const char* value) {
  
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mpr.chubby.LockRequest.session_id)
}
inline void LockRequest::set_session_id(const char* value, size_t size) {
  
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mpr.chubby.LockRequest.session_id)
}
inline ::std::string* LockRequest::mutable_session_id() {
  
  // @@protoc_insertion_point(field_mutable:mpr.chubby.LockRequest.session_id)
  return session_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LockRequest::release_session_id() {
  // @@protoc_insertion_point(field_release:mpr.chubby.LockRequest.session_id)
  
  return session_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LockRequest::set_allocated_session_id(::std::string* session_id) {
  if (session_id != NULL) {
    
  } else {
    
  }
  session_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), session_id);
  // @@protoc_insertion_point(field_set_allocated:mpr.chubby.LockRequest.session_id)
}

// optional string hostname = 3;
inline void LockRequest::clear_hostname() {
  hostname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LockRequest::hostname() const {
  // @@protoc_insertion_point(field_get:mpr.chubby.LockRequest.hostname)
  return hostname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LockRequest::set_hostname(const ::std::string& value) {
  
  hostname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mpr.chubby.LockRequest.hostname)
}
inline void LockRequest::set_hostname(const char* value) {
  
  hostname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mpr.chubby.LockRequest.hostname)
}
inline void LockRequest::set_hostname(const char* value, size_t size) {
  
  hostname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mpr.chubby.LockRequest.hostname)
}
inline ::std::string* LockRequest::mutable_hostname() {
  
  // @@protoc_insertion_point(field_mutable:mpr.chubby.LockRequest.hostname)
  return hostname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LockRequest::release_hostname() {
  // @@protoc_insertion_point(field_release:mpr.chubby.LockRequest.hostname)
  
  return hostname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LockRequest::set_allocated_hostname(::std::string* hostname) {
  if (hostname != NULL) {
    
  } else {
    
  }
  hostname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hostname);
  // @@protoc_insertion_point(field_set_allocated:mpr.chubby.LockRequest.hostname)
}

// optional string uuid = 4;
inline void LockRequest::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LockRequest::uuid() const {
  // @@protoc_insertion_point(field_get:mpr.chubby.LockRequest.uuid)
  return uuid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LockRequest::set_uuid(const ::std::string& value) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mpr.chubby.LockRequest.uuid)
}
inline void LockRequest::set_uuid(const char* value) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mpr.chubby.LockRequest.uuid)
}
inline void LockRequest::set_uuid(const char* value, size_t size) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mpr.chubby.LockRequest.uuid)
}
inline ::std::string* LockRequest::mutable_uuid() {
  
  // @@protoc_insertion_point(field_mutable:mpr.chubby.LockRequest.uuid)
  return uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LockRequest::release_uuid() {
  // @@protoc_insertion_point(field_release:mpr.chubby.LockRequest.uuid)
  
  return uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LockRequest::set_allocated_uuid(::std::string* uuid) {
  if (uuid != NULL) {
    
  } else {
    
  }
  uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:mpr.chubby.LockRequest.uuid)
}

// -------------------------------------------------------------------

// LockResponse

// optional bool success = 1;
inline void LockResponse::clear_success() {
  success_ = false;
}
inline bool LockResponse::success() const {
  // @@protoc_insertion_point(field_get:mpr.chubby.LockResponse.success)
  return success_;
}
inline void LockResponse::set_success(bool value) {
  
  success_ = value;
  // @@protoc_insertion_point(field_set:mpr.chubby.LockResponse.success)
}

// optional string leader_id = 2;
inline void LockResponse::clear_leader_id() {
  leader_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LockResponse::leader_id() const {
  // @@protoc_insertion_point(field_get:mpr.chubby.LockResponse.leader_id)
  return leader_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LockResponse::set_leader_id(const ::std::string& value) {
  
  leader_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mpr.chubby.LockResponse.leader_id)
}
inline void LockResponse::set_leader_id(const char* value) {
  
  leader_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mpr.chubby.LockResponse.leader_id)
}
inline void LockResponse::set_leader_id(const char* value, size_t size) {
  
  leader_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mpr.chubby.LockResponse.leader_id)
}
inline ::std::string* LockResponse::mutable_leader_id() {
  
  // @@protoc_insertion_point(field_mutable:mpr.chubby.LockResponse.leader_id)
  return leader_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LockResponse::release_leader_id() {
  // @@protoc_insertion_point(field_release:mpr.chubby.LockResponse.leader_id)
  
  return leader_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LockResponse::set_allocated_leader_id(::std::string* leader_id) {
  if (leader_id != NULL) {
    
  } else {
    
  }
  leader_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), leader_id);
  // @@protoc_insertion_point(field_set_allocated:mpr.chubby.LockResponse.leader_id)
}

// optional bool uuid_expired = 3;
inline void LockResponse::clear_uuid_expired() {
  uuid_expired_ = false;
}
inline bool LockResponse::uuid_expired() const {
  // @@protoc_insertion_point(field_get:mpr.chubby.LockResponse.uuid_expired)
  return uuid_expired_;
}
inline void LockResponse::set_uuid_expired(bool value) {
  
  uuid_expired_ = value;
  // @@protoc_insertion_point(field_set:mpr.chubby.LockResponse.uuid_expired)
}

// -------------------------------------------------------------------

// KeepAliveRequest

// optional string session_id = 1;
inline void KeepAliveRequest::clear_session_id() {
  session_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& KeepAliveRequest::session_id() const {
  // @@protoc_insertion_point(field_get:mpr.chubby.KeepAliveRequest.session_id)
  return session_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void KeepAliveRequest::set_session_id(const ::std::string& value) {
  
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mpr.chubby.KeepAliveRequest.session_id)
}
inline void KeepAliveRequest::set_session_id(const char* value) {
  
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mpr.chubby.KeepAliveRequest.session_id)
}
inline void KeepAliveRequest::set_session_id(const char* value, size_t size) {
  
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mpr.chubby.KeepAliveRequest.session_id)
}
inline ::std::string* KeepAliveRequest::mutable_session_id() {
  
  // @@protoc_insertion_point(field_mutable:mpr.chubby.KeepAliveRequest.session_id)
  return session_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* KeepAliveRequest::release_session_id() {
  // @@protoc_insertion_point(field_release:mpr.chubby.KeepAliveRequest.session_id)
  
  return session_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void KeepAliveRequest::set_allocated_session_id(::std::string* session_id) {
  if (session_id != NULL) {
    
  } else {
    
  }
  session_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), session_id);
  // @@protoc_insertion_point(field_set_allocated:mpr.chubby.KeepAliveRequest.session_id)
}

// optional string uuid = 2;
inline void KeepAliveRequest::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& KeepAliveRequest::uuid() const {
  // @@protoc_insertion_point(field_get:mpr.chubby.KeepAliveRequest.uuid)
  return uuid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void KeepAliveRequest::set_uuid(const ::std::string& value) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mpr.chubby.KeepAliveRequest.uuid)
}
inline void KeepAliveRequest::set_uuid(const char* value) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mpr.chubby.KeepAliveRequest.uuid)
}
inline void KeepAliveRequest::set_uuid(const char* value, size_t size) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mpr.chubby.KeepAliveRequest.uuid)
}
inline ::std::string* KeepAliveRequest::mutable_uuid() {
  
  // @@protoc_insertion_point(field_mutable:mpr.chubby.KeepAliveRequest.uuid)
  return uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* KeepAliveRequest::release_uuid() {
  // @@protoc_insertion_point(field_release:mpr.chubby.KeepAliveRequest.uuid)
  
  return uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void KeepAliveRequest::set_allocated_uuid(::std::string* uuid) {
  if (uuid != NULL) {
    
  } else {
    
  }
  uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:mpr.chubby.KeepAliveRequest.uuid)
}

// repeated string locks = 3;
inline int KeepAliveRequest::locks_size() const {
  return locks_.size();
}
inline void KeepAliveRequest::clear_locks() {
  locks_.Clear();
}
inline const ::std::string& KeepAliveRequest::locks(int index) const {
  // @@protoc_insertion_point(field_get:mpr.chubby.KeepAliveRequest.locks)
  return locks_.Get(index);
}
inline ::std::string* KeepAliveRequest::mutable_locks(int index) {
  // @@protoc_insertion_point(field_mutable:mpr.chubby.KeepAliveRequest.locks)
  return locks_.Mutable(index);
}
inline void KeepAliveRequest::set_locks(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:mpr.chubby.KeepAliveRequest.locks)
  locks_.Mutable(index)->assign(value);
}
inline void KeepAliveRequest::set_locks(int index, const char* value) {
  locks_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:mpr.chubby.KeepAliveRequest.locks)
}
inline void KeepAliveRequest::set_locks(int index, const char* value, size_t size) {
  locks_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mpr.chubby.KeepAliveRequest.locks)
}
inline ::std::string* KeepAliveRequest::add_locks() {
  // @@protoc_insertion_point(field_add_mutable:mpr.chubby.KeepAliveRequest.locks)
  return locks_.Add();
}
inline void KeepAliveRequest::add_locks(const ::std::string& value) {
  locks_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:mpr.chubby.KeepAliveRequest.locks)
}
inline void KeepAliveRequest::add_locks(const char* value) {
  locks_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:mpr.chubby.KeepAliveRequest.locks)
}
inline void KeepAliveRequest::add_locks(const char* value, size_t size) {
  locks_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:mpr.chubby.KeepAliveRequest.locks)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
KeepAliveRequest::locks() const {
  // @@protoc_insertion_point(field_list:mpr.chubby.KeepAliveRequest.locks)
  return locks_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
KeepAliveRequest::mutable_locks() {
  // @@protoc_insertion_point(field_mutable_list:mpr.chubby.KeepAliveRequest.locks)
  return &locks_;
}

// optional bool forward_from_leader = 4;
inline void KeepAliveRequest::clear_forward_from_leader() {
  forward_from_leader_ = false;
}
inline bool KeepAliveRequest::forward_from_leader() const {
  // @@protoc_insertion_point(field_get:mpr.chubby.KeepAliveRequest.forward_from_leader)
  return forward_from_leader_;
}
inline void KeepAliveRequest::set_forward_from_leader(bool value) {
  
  forward_from_leader_ = value;
  // @@protoc_insertion_point(field_set:mpr.chubby.KeepAliveRequest.forward_from_leader)
}

// -------------------------------------------------------------------

// KeepAliveResponse

// optional bool success = 1;
inline void KeepAliveResponse::clear_success() {
  success_ = false;
}
inline bool KeepAliveResponse::success() const {
  // @@protoc_insertion_point(field_get:mpr.chubby.KeepAliveResponse.success)
  return success_;
}
inline void KeepAliveResponse::set_success(bool value) {
  
  success_ = value;
  // @@protoc_insertion_point(field_set:mpr.chubby.KeepAliveResponse.success)
}

// optional string leader_id = 2;
inline void KeepAliveResponse::clear_leader_id() {
  leader_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& KeepAliveResponse::leader_id() const {
  // @@protoc_insertion_point(field_get:mpr.chubby.KeepAliveResponse.leader_id)
  return leader_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void KeepAliveResponse::set_leader_id(const ::std::string& value) {
  
  leader_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mpr.chubby.KeepAliveResponse.leader_id)
}
inline void KeepAliveResponse::set_leader_id(const char* value) {
  
  leader_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mpr.chubby.KeepAliveResponse.leader_id)
}
inline void KeepAliveResponse::set_leader_id(const char* value, size_t size) {
  
  leader_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mpr.chubby.KeepAliveResponse.leader_id)
}
inline ::std::string* KeepAliveResponse::mutable_leader_id() {
  
  // @@protoc_insertion_point(field_mutable:mpr.chubby.KeepAliveResponse.leader_id)
  return leader_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* KeepAliveResponse::release_leader_id() {
  // @@protoc_insertion_point(field_release:mpr.chubby.KeepAliveResponse.leader_id)
  
  return leader_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void KeepAliveResponse::set_allocated_leader_id(::std::string* leader_id) {
  if (leader_id != NULL) {
    
  } else {
    
  }
  leader_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), leader_id);
  // @@protoc_insertion_point(field_set_allocated:mpr.chubby.KeepAliveResponse.leader_id)
}

// -------------------------------------------------------------------

// LoginRequest

// optional string username = 1;
inline void LoginRequest::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LoginRequest::username() const {
  // @@protoc_insertion_point(field_get:mpr.chubby.LoginRequest.username)
  return username_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoginRequest::set_username(const ::std::string& value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mpr.chubby.LoginRequest.username)
}
inline void LoginRequest::set_username(const char* value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mpr.chubby.LoginRequest.username)
}
inline void LoginRequest::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mpr.chubby.LoginRequest.username)
}
inline ::std::string* LoginRequest::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:mpr.chubby.LoginRequest.username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LoginRequest::release_username() {
  // @@protoc_insertion_point(field_release:mpr.chubby.LoginRequest.username)
  
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoginRequest::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:mpr.chubby.LoginRequest.username)
}

// optional string passwd = 2;
inline void LoginRequest::clear_passwd() {
  passwd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LoginRequest::passwd() const {
  // @@protoc_insertion_point(field_get:mpr.chubby.LoginRequest.passwd)
  return passwd_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoginRequest::set_passwd(const ::std::string& value) {
  
  passwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mpr.chubby.LoginRequest.passwd)
}
inline void LoginRequest::set_passwd(const char* value) {
  
  passwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mpr.chubby.LoginRequest.passwd)
}
inline void LoginRequest::set_passwd(const char* value, size_t size) {
  
  passwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mpr.chubby.LoginRequest.passwd)
}
inline ::std::string* LoginRequest::mutable_passwd() {
  
  // @@protoc_insertion_point(field_mutable:mpr.chubby.LoginRequest.passwd)
  return passwd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LoginRequest::release_passwd() {
  // @@protoc_insertion_point(field_release:mpr.chubby.LoginRequest.passwd)
  
  return passwd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoginRequest::set_allocated_passwd(::std::string* passwd) {
  if (passwd != NULL) {
    
  } else {
    
  }
  passwd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), passwd);
  // @@protoc_insertion_point(field_set_allocated:mpr.chubby.LoginRequest.passwd)
}

// -------------------------------------------------------------------

// Status

// optional int64 code = 1;
inline void Status::clear_code() {
  code_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Status::code() const {
  // @@protoc_insertion_point(field_get:mpr.chubby.Status.code)
  return code_;
}
inline void Status::set_code(::google::protobuf::int64 value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:mpr.chubby.Status.code)
}

// optional string message = 2;
inline void Status::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Status::message() const {
  // @@protoc_insertion_point(field_get:mpr.chubby.Status.message)
  return message_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Status::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mpr.chubby.Status.message)
}
inline void Status::set_message(const char* value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mpr.chubby.Status.message)
}
inline void Status::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mpr.chubby.Status.message)
}
inline ::std::string* Status::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:mpr.chubby.Status.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Status::release_message() {
  // @@protoc_insertion_point(field_release:mpr.chubby.Status.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Status::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:mpr.chubby.Status.message)
}

// -------------------------------------------------------------------

// LoginResponse

// optional .mpr.chubby.Status status = 1;
inline bool LoginResponse::has_status() const {
  return !_is_default_instance_ && status_ != NULL;
}
inline void LoginResponse::clear_status() {
  if (GetArenaNoVirtual() == NULL && status_ != NULL) delete status_;
  status_ = NULL;
}
inline const ::mpr::chubby::Status& LoginResponse::status() const {
  // @@protoc_insertion_point(field_get:mpr.chubby.LoginResponse.status)
  return status_ != NULL ? *status_ : *default_instance_->status_;
}
inline ::mpr::chubby::Status* LoginResponse::mutable_status() {
  
  if (status_ == NULL) {
    status_ = new ::mpr::chubby::Status;
  }
  // @@protoc_insertion_point(field_mutable:mpr.chubby.LoginResponse.status)
  return status_;
}
inline ::mpr::chubby::Status* LoginResponse::release_status() {
  // @@protoc_insertion_point(field_release:mpr.chubby.LoginResponse.status)
  
  ::mpr::chubby::Status* temp = status_;
  status_ = NULL;
  return temp;
}
inline void LoginResponse::set_allocated_status(::mpr::chubby::Status* status) {
  delete status_;
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mpr.chubby.LoginResponse.status)
}

// optional string uuid = 2;
inline void LoginResponse::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LoginResponse::uuid() const {
  // @@protoc_insertion_point(field_get:mpr.chubby.LoginResponse.uuid)
  return uuid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoginResponse::set_uuid(const ::std::string& value) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mpr.chubby.LoginResponse.uuid)
}
inline void LoginResponse::set_uuid(const char* value) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mpr.chubby.LoginResponse.uuid)
}
inline void LoginResponse::set_uuid(const char* value, size_t size) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mpr.chubby.LoginResponse.uuid)
}
inline ::std::string* LoginResponse::mutable_uuid() {
  
  // @@protoc_insertion_point(field_mutable:mpr.chubby.LoginResponse.uuid)
  return uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LoginResponse::release_uuid() {
  // @@protoc_insertion_point(field_release:mpr.chubby.LoginResponse.uuid)
  
  return uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoginResponse::set_allocated_uuid(::std::string* uuid) {
  if (uuid != NULL) {
    
  } else {
    
  }
  uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:mpr.chubby.LoginResponse.uuid)
}

// optional string leader_id = 3;
inline void LoginResponse::clear_leader_id() {
  leader_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LoginResponse::leader_id() const {
  // @@protoc_insertion_point(field_get:mpr.chubby.LoginResponse.leader_id)
  return leader_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoginResponse::set_leader_id(const ::std::string& value) {
  
  leader_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mpr.chubby.LoginResponse.leader_id)
}
inline void LoginResponse::set_leader_id(const char* value) {
  
  leader_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mpr.chubby.LoginResponse.leader_id)
}
inline void LoginResponse::set_leader_id(const char* value, size_t size) {
  
  leader_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mpr.chubby.LoginResponse.leader_id)
}
inline ::std::string* LoginResponse::mutable_leader_id() {
  
  // @@protoc_insertion_point(field_mutable:mpr.chubby.LoginResponse.leader_id)
  return leader_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LoginResponse::release_leader_id() {
  // @@protoc_insertion_point(field_release:mpr.chubby.LoginResponse.leader_id)
  
  return leader_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoginResponse::set_allocated_leader_id(::std::string* leader_id) {
  if (leader_id != NULL) {
    
  } else {
    
  }
  leader_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), leader_id);
  // @@protoc_insertion_point(field_set_allocated:mpr.chubby.LoginResponse.leader_id)
}

// -------------------------------------------------------------------

// LogoutRequest

// optional string uuid = 1;
inline void LogoutRequest::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LogoutRequest::uuid() const {
  // @@protoc_insertion_point(field_get:mpr.chubby.LogoutRequest.uuid)
  return uuid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LogoutRequest::set_uuid(const ::std::string& value) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mpr.chubby.LogoutRequest.uuid)
}
inline void LogoutRequest::set_uuid(const char* value) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mpr.chubby.LogoutRequest.uuid)
}
inline void LogoutRequest::set_uuid(const char* value, size_t size) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mpr.chubby.LogoutRequest.uuid)
}
inline ::std::string* LogoutRequest::mutable_uuid() {
  
  // @@protoc_insertion_point(field_mutable:mpr.chubby.LogoutRequest.uuid)
  return uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LogoutRequest::release_uuid() {
  // @@protoc_insertion_point(field_release:mpr.chubby.LogoutRequest.uuid)
  
  return uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LogoutRequest::set_allocated_uuid(::std::string* uuid) {
  if (uuid != NULL) {
    
  } else {
    
  }
  uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:mpr.chubby.LogoutRequest.uuid)
}

// -------------------------------------------------------------------

// LogoutResponse

// optional .mpr.chubby.Status status = 1;
inline bool LogoutResponse::has_status() const {
  return !_is_default_instance_ && status_ != NULL;
}
inline void LogoutResponse::clear_status() {
  if (GetArenaNoVirtual() == NULL && status_ != NULL) delete status_;
  status_ = NULL;
}
inline const ::mpr::chubby::Status& LogoutResponse::status() const {
  // @@protoc_insertion_point(field_get:mpr.chubby.LogoutResponse.status)
  return status_ != NULL ? *status_ : *default_instance_->status_;
}
inline ::mpr::chubby::Status* LogoutResponse::mutable_status() {
  
  if (status_ == NULL) {
    status_ = new ::mpr::chubby::Status;
  }
  // @@protoc_insertion_point(field_mutable:mpr.chubby.LogoutResponse.status)
  return status_;
}
inline ::mpr::chubby::Status* LogoutResponse::release_status() {
  // @@protoc_insertion_point(field_release:mpr.chubby.LogoutResponse.status)
  
  ::mpr::chubby::Status* temp = status_;
  status_ = NULL;
  return temp;
}
inline void LogoutResponse::set_allocated_status(::mpr::chubby::Status* status) {
  delete status_;
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mpr.chubby.LogoutResponse.status)
}

// optional string leader_id = 2;
inline void LogoutResponse::clear_leader_id() {
  leader_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LogoutResponse::leader_id() const {
  // @@protoc_insertion_point(field_get:mpr.chubby.LogoutResponse.leader_id)
  return leader_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LogoutResponse::set_leader_id(const ::std::string& value) {
  
  leader_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mpr.chubby.LogoutResponse.leader_id)
}
inline void LogoutResponse::set_leader_id(const char* value) {
  
  leader_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mpr.chubby.LogoutResponse.leader_id)
}
inline void LogoutResponse::set_leader_id(const char* value, size_t size) {
  
  leader_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mpr.chubby.LogoutResponse.leader_id)
}
inline ::std::string* LogoutResponse::mutable_leader_id() {
  
  // @@protoc_insertion_point(field_mutable:mpr.chubby.LogoutResponse.leader_id)
  return leader_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LogoutResponse::release_leader_id() {
  // @@protoc_insertion_point(field_release:mpr.chubby.LogoutResponse.leader_id)
  
  return leader_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LogoutResponse::set_allocated_leader_id(::std::string* leader_id) {
  if (leader_id != NULL) {
    
  } else {
    
  }
  leader_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), leader_id);
  // @@protoc_insertion_point(field_set_allocated:mpr.chubby.LogoutResponse.leader_id)
}

// -------------------------------------------------------------------

// RegisterRequest

// optional string username = 1;
inline void RegisterRequest::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RegisterRequest::username() const {
  // @@protoc_insertion_point(field_get:mpr.chubby.RegisterRequest.username)
  return username_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RegisterRequest::set_username(const ::std::string& value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mpr.chubby.RegisterRequest.username)
}
inline void RegisterRequest::set_username(const char* value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mpr.chubby.RegisterRequest.username)
}
inline void RegisterRequest::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mpr.chubby.RegisterRequest.username)
}
inline ::std::string* RegisterRequest::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:mpr.chubby.RegisterRequest.username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RegisterRequest::release_username() {
  // @@protoc_insertion_point(field_release:mpr.chubby.RegisterRequest.username)
  
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RegisterRequest::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:mpr.chubby.RegisterRequest.username)
}

// optional string passwd = 2;
inline void RegisterRequest::clear_passwd() {
  passwd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RegisterRequest::passwd() const {
  // @@protoc_insertion_point(field_get:mpr.chubby.RegisterRequest.passwd)
  return passwd_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RegisterRequest::set_passwd(const ::std::string& value) {
  
  passwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mpr.chubby.RegisterRequest.passwd)
}
inline void RegisterRequest::set_passwd(const char* value) {
  
  passwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mpr.chubby.RegisterRequest.passwd)
}
inline void RegisterRequest::set_passwd(const char* value, size_t size) {
  
  passwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mpr.chubby.RegisterRequest.passwd)
}
inline ::std::string* RegisterRequest::mutable_passwd() {
  
  // @@protoc_insertion_point(field_mutable:mpr.chubby.RegisterRequest.passwd)
  return passwd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RegisterRequest::release_passwd() {
  // @@protoc_insertion_point(field_release:mpr.chubby.RegisterRequest.passwd)
  
  return passwd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RegisterRequest::set_allocated_passwd(::std::string* passwd) {
  if (passwd != NULL) {
    
  } else {
    
  }
  passwd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), passwd);
  // @@protoc_insertion_point(field_set_allocated:mpr.chubby.RegisterRequest.passwd)
}

// -------------------------------------------------------------------

// RegisterResponse

// optional .mpr.chubby.Status status = 1;
inline bool RegisterResponse::has_status() const {
  return !_is_default_instance_ && status_ != NULL;
}
inline void RegisterResponse::clear_status() {
  if (GetArenaNoVirtual() == NULL && status_ != NULL) delete status_;
  status_ = NULL;
}
inline const ::mpr::chubby::Status& RegisterResponse::status() const {
  // @@protoc_insertion_point(field_get:mpr.chubby.RegisterResponse.status)
  return status_ != NULL ? *status_ : *default_instance_->status_;
}
inline ::mpr::chubby::Status* RegisterResponse::mutable_status() {
  
  if (status_ == NULL) {
    status_ = new ::mpr::chubby::Status;
  }
  // @@protoc_insertion_point(field_mutable:mpr.chubby.RegisterResponse.status)
  return status_;
}
inline ::mpr::chubby::Status* RegisterResponse::release_status() {
  // @@protoc_insertion_point(field_release:mpr.chubby.RegisterResponse.status)
  
  ::mpr::chubby::Status* temp = status_;
  status_ = NULL;
  return temp;
}
inline void RegisterResponse::set_allocated_status(::mpr::chubby::Status* status) {
  delete status_;
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mpr.chubby.RegisterResponse.status)
}

// optional string leader_id = 2;
inline void RegisterResponse::clear_leader_id() {
  leader_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RegisterResponse::leader_id() const {
  // @@protoc_insertion_point(field_get:mpr.chubby.RegisterResponse.leader_id)
  return leader_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RegisterResponse::set_leader_id(const ::std::string& value) {
  
  leader_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mpr.chubby.RegisterResponse.leader_id)
}
inline void RegisterResponse::set_leader_id(const char* value) {
  
  leader_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mpr.chubby.RegisterResponse.leader_id)
}
inline void RegisterResponse::set_leader_id(const char* value, size_t size) {
  
  leader_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mpr.chubby.RegisterResponse.leader_id)
}
inline ::std::string* RegisterResponse::mutable_leader_id() {
  
  // @@protoc_insertion_point(field_mutable:mpr.chubby.RegisterResponse.leader_id)
  return leader_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RegisterResponse::release_leader_id() {
  // @@protoc_insertion_point(field_release:mpr.chubby.RegisterResponse.leader_id)
  
  return leader_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RegisterResponse::set_allocated_leader_id(::std::string* leader_id) {
  if (leader_id != NULL) {
    
  } else {
    
  }
  leader_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), leader_id);
  // @@protoc_insertion_point(field_set_allocated:mpr.chubby.RegisterResponse.leader_id)
}

// -------------------------------------------------------------------

// CleanBinlogRequest

// optional int64 end_index = 1;
inline void CleanBinlogRequest::clear_end_index() {
  end_index_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 CleanBinlogRequest::end_index() const {
  // @@protoc_insertion_point(field_get:mpr.chubby.CleanBinlogRequest.end_index)
  return end_index_;
}
inline void CleanBinlogRequest::set_end_index(::google::protobuf::int64 value) {
  
  end_index_ = value;
  // @@protoc_insertion_point(field_set:mpr.chubby.CleanBinlogRequest.end_index)
}

// -------------------------------------------------------------------

// CleanBinlogResponse

// optional bool success = 1;
inline void CleanBinlogResponse::clear_success() {
  success_ = false;
}
inline bool CleanBinlogResponse::success() const {
  // @@protoc_insertion_point(field_get:mpr.chubby.CleanBinlogResponse.success)
  return success_;
}
inline void CleanBinlogResponse::set_success(bool value) {
  
  success_ = value;
  // @@protoc_insertion_point(field_set:mpr.chubby.CleanBinlogResponse.success)
}

// -------------------------------------------------------------------

// RpcStatRequest

// repeated .mpr.chubby.StatOperation op = 1;
inline int RpcStatRequest::op_size() const {
  return op_.size();
}
inline void RpcStatRequest::clear_op() {
  op_.Clear();
}
inline ::mpr::chubby::StatOperation RpcStatRequest::op(int index) const {
  // @@protoc_insertion_point(field_get:mpr.chubby.RpcStatRequest.op)
  return static_cast< ::mpr::chubby::StatOperation >(op_.Get(index));
}
inline void RpcStatRequest::set_op(int index, ::mpr::chubby::StatOperation value) {
  op_.Set(index, value);
  // @@protoc_insertion_point(field_set:mpr.chubby.RpcStatRequest.op)
}
inline void RpcStatRequest::add_op(::mpr::chubby::StatOperation value) {
  op_.Add(value);
  // @@protoc_insertion_point(field_add:mpr.chubby.RpcStatRequest.op)
}
inline const ::google::protobuf::RepeatedField<int>&
RpcStatRequest::op() const {
  // @@protoc_insertion_point(field_list:mpr.chubby.RpcStatRequest.op)
  return op_;
}
inline ::google::protobuf::RepeatedField<int>*
RpcStatRequest::mutable_op() {
  // @@protoc_insertion_point(field_mutable_list:mpr.chubby.RpcStatRequest.op)
  return &op_;
}

// -------------------------------------------------------------------

// RpcStatResponse

// optional .mpr.chubby.NodeStatus status = 1;
inline void RpcStatResponse::clear_status() {
  status_ = 0;
}
inline ::mpr::chubby::NodeStatus RpcStatResponse::status() const {
  // @@protoc_insertion_point(field_get:mpr.chubby.RpcStatResponse.status)
  return static_cast< ::mpr::chubby::NodeStatus >(status_);
}
inline void RpcStatResponse::set_status(::mpr::chubby::NodeStatus value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:mpr.chubby.RpcStatResponse.status)
}

// repeated .mpr.chubby.StatInfo stats = 2;
inline int RpcStatResponse::stats_size() const {
  return stats_.size();
}
inline void RpcStatResponse::clear_stats() {
  stats_.Clear();
}
inline const ::mpr::chubby::StatInfo& RpcStatResponse::stats(int index) const {
  // @@protoc_insertion_point(field_get:mpr.chubby.RpcStatResponse.stats)
  return stats_.Get(index);
}
inline ::mpr::chubby::StatInfo* RpcStatResponse::mutable_stats(int index) {
  // @@protoc_insertion_point(field_mutable:mpr.chubby.RpcStatResponse.stats)
  return stats_.Mutable(index);
}
inline ::mpr::chubby::StatInfo* RpcStatResponse::add_stats() {
  // @@protoc_insertion_point(field_add:mpr.chubby.RpcStatResponse.stats)
  return stats_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::mpr::chubby::StatInfo >*
RpcStatResponse::mutable_stats() {
  // @@protoc_insertion_point(field_mutable_list:mpr.chubby.RpcStatResponse.stats)
  return &stats_;
}
inline const ::google::protobuf::RepeatedPtrField< ::mpr::chubby::StatInfo >&
RpcStatResponse::stats() const {
  // @@protoc_insertion_point(field_list:mpr.chubby.RpcStatResponse.stats)
  return stats_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace chubby
}  // namespace mpr

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::mpr::chubby::NodeStatus> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mpr::chubby::NodeStatus>() {
  return ::mpr::chubby::NodeStatus_descriptor();
}
template <> struct is_proto_enum< ::mpr::chubby::LogOperation> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mpr::chubby::LogOperation>() {
  return ::mpr::chubby::LogOperation_descriptor();
}
template <> struct is_proto_enum< ::mpr::chubby::StatOperation> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mpr::chubby::StatOperation>() {
  return ::mpr::chubby::StatOperation_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_service_2eproto__INCLUDED
